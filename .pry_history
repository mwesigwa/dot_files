current_user
user
params
body
vinz
current_user
session
params
user
restart
exit
continue
next
escape
exit
user
exit
config_name
config_name.humanize
quit
config_name
config_name.humanize
config_name equal config_name.humanize
config_name == config_name.humanize
quit
@client
quit
exit
hash
next
continue
quit
hash
quit
batchrun
{"error"=>"No batchruns found!"}
batchruns = {"error"=>"No batchruns found!"}
batchruns.each{|x| x}
batchruns.each{|x| puts x}
batchruns.each{|x, y| puts x}
quit
path
quit
path
quit
path
@configuration.urls[resource.to_sym]
@configuration.urls[resource.to_sym].to_s
ids
quit
path
ids
quit
path
quit
params
params[:config_name]
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
params
quit
psql
User.find
User.all
quit
page.evaluate_script('$.active'))
page.evaluate_script('$.active')
quit
page.evaluate_script('$.active')
page.evaluate_script('$.active')page.evaluate_script('$.active')
quit
wait
quit
params
quit
exit
puts 1
0<1
(0)
if 1?
  puts true
puts true if 1
puts true if 0
puts true if nil
puts true if 0>0
quit
@users = User.paginate(:page => 1, :per_page=> 10)
@users.total_pages
{:total_pages = 3}
{:total_pages => 3}
me = {:total_pages => 3}
me.total_pages
user.per_page
@users.per_page
quit
@users.per_page
@users = User.paginate(:page => 1, :per_page=> 10)
@users.type?
quit
list
quit
list
list.include?("error")
quit
@batchrun_list
quit
list
@batchrun_list
quit
list
quit
list
quit
list
quit
list
quit
params
quit
params
quit
list
list = @batchrun_list
list[:total_pages]
list[:total]
quit
pagination_params[:page]
pagination_params[:total_pages]
quit
@total_pages
total_batchruns
quit
total_batchruns
@total_pages
quit
home_params
quit
list
quit
current_number
client.get_batchruns(batchruns_call_params)
quit
list
quit
list
@batchrun_list
@batchrun_list = {page: 1, run_statistics: {:total=>1}.default(0), runs: []}
b = {:total=>1}
b.default(0)
b[:hey]
b
b[:5}
b[:a}
b[:a]
b["a"]
b.default('0')
b[0]
b
quit
params
quit
params
quit
params
quit
params[:start_date]
quit
find("#start_date")
find("#start_date").value
find("#start_date").value should eq "2013-09-01"
find("#start_date").value should equal "2013-09-01"
find("#start_date").value should have_content "2013-09-01"
find("#start_date").value should eq "2013-09-01"
find("#start_date").value 
find("#start_date").value should eq "2013-09-01"
find("#start_date").value
find("#start_date").value should eq "2013-09-01"
find("#start_date").value
find("#start_date").value should eq "2013-09-01"
find("#start_date").value should eq("2013-09-01")
find("#start_date").value.should eq("2013-09-01")
quit
client.get_batchruns(batchruns_call_params)
client.get_batchruns(batchruns_call_params)["run_statistics"]
quit
client.get_batchruns(batchruns_call_params)["run_statistics"]["total"]
quit
current_number = client.get_batchruns(batchruns_call_params)["run_statistics"]["total"]
quit
Date.today
Date.today.at_beginning_of_month
Date.today.at_beginning_of_month.strftime('MM/dd/yyyy')
Date.today.at_beginning_of_month.strftime("MM/dd/yyyy")
Date.today.at_beginning_of_month.toString("MM/dd/yyyy")
Date.today.at_beginning_of_month.strftime "MM/dd/yyyy"
Date.today.at_beginning_of_month.strftime 
Date.today.at_beginning_of_month.to_formatted_string
Date.today.at_beginning_of_month.to_formatted_s
Date.today.at_beginning_of_month.to_formatted_s "MM"
Date.today.at_beginning_of_month.to_formatted_s "MM/dd/yyyy"
Date.today.at_beginning_of_month.to_formatted_s("MM/dd/yyyy")
Date.today.at_beginning_of_month.to_s("MM/dd/yyyy")
DateTime.today.at_beginning_of_month.to_s("MM/dd/yyyy")
DateTime.today
Date.today.at_beginning_of_month.strftime "%m/%d/%Y"
quit
list
api_params.values.include?(nil)
api_params
quit
list
quit
page.find_link(@batch_name, :href => "/#{@batch_id}")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "..//")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "..")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").should have_content "killed"
quit
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../../..")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "..//..")
quit
page.find_link(@batch_name, :href => "/#{@batch_id}")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../../")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..")
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").content
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").html
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").native.html()
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").native.html
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").native.text
@batch_id
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").native.text
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").should
page.find_link(@batch_name, :href => "/#{@batch_id}").find(:xpath, "../..").should have_content("killed")
quit
date
date + 1
quit
date
date + 1
quit
api_params[:end_date]
api_params[:end_date] + 1
process_date (params[:end_date] || Date.today) + 1
process_date (params[:end_date] || Date.today) 
(process_date (params[:end_date] || Date.today)) + 1
quit
s = "< 1000"
/<\s*\w/.match(s)
t = "< shit"
/<\s*\w/.match(t)
t = "<shit"
/<\s*\w/.match(t)
/<\s*\d+/.match(t)
/<\s*\w/.match(t)
/<\s*\w+/.match(t)
/<\s*\d+/.match(s)
b = /<\s*\d+/.match(s)
b[0]
b[1]
b.split("<")
b[0].split("<")
date = "Wed Aug 07 06:47:22 -0500 2013"
time = date
I18n.l time, :format => "%a, %b %d %Y %H:%M"
time = DateTime.parse(time)
I18n.l time, :format => "%a, %b %d %Y %H:%M"
time.strftime("%a, %b %d %Y %H:%M")
quit
time
time.localtime
quit
time
quit
exit
quit
exit
quit
TimeZone.all
Time.zone
Time.zone.all
Time.zone.all()
TimeZone.all()
TimeZone
Time
TimeZone
Time.zone
Time.zone.all()
Time.zones
require TimeZone
require Timezone
TimeZone.seconds_to_utc_offset(-21_600)
Time
Time.now
TimeZone.seconds_to_utc_offset(-21_600)
ActiveSupport::TimeZone
ActiveSupport::TimeZone::zones
ActiveSupport::TimeZone.all()
date = "2013/09/09 22:20:54 +0000"
DateTime.parse(date).in_time_zone("Central Time (US & Canada)")
DateTime.parse(date).in_time_zone(Central Time (US & Canada))
DateTime.parse(date).to_time.in_time_zone("Central Time (US & Canada)")
time = _
I18n.l time, :format => "%a, %b %d %Y %H:%M"
quit
id
quit
batch_id
quit
batch_id
quit
/\d+/.match(params[:units])
params[:units]
quit
/^\d+[[:space:]]*\/[[:space:]]*\d+$/.match(params[:units])
units = params[:units].split("/")
params[:max_units_to_process] = units[0].to_i
params[:min_units_to_process] = units[1].to_i
params[:max_units_to_process] = units[0].to_iqu
quit
params
quit
params
quit
time = DateTime.parse(time)
date = "Wed Aug 07 06:47:22 -0500 2013"
time = DateTime.parse(date)
I18n.l time, :format => "%a, %b %d %Y %H:%M"
time = DateTime.parse(date)
time.utc
time.gmt
time.utc
Batchrun.find(20320).started_on
Batchrun.find(20320)
quit
list
list[:page]
quit
list
quit
@batchrun_list
list
list.empty?
quit
path_to(target)
target
path_to(target)
path_to
quit
path_to(target)
quit
target
call(target)
send(target)
quit
send(batchruns_path)
send("batchruns_path")
quit
visit "#{batchrun_path}/#{@batch_id}"
"#{batchrun_path}/#{@batch_id}"
"#{batchrun_path}"
batchrun_path
send("show_batchrun_path")
show_batchrun_path
me_path
show_batchrun_path
batchruns_path
home_path
show_batchrun_path
quit
show_batchrun
show_batchrun_path
quit
show_batchrun_path
batchruns
batchruns_path
quit
batchruns
client.get_batchruns(api_params)["runs"]
client
client.get_batchruns(api_params)
quit
last_page
batchruns
batchruns.last
quit
first_batchrun_id
last_page
quit
batchrun_list_path
home_path
quit
api_params
api_params = api_params.merge(parse_units_parameter) if api_params[:units]
api_params[:units]
quit
api_params
quit
api_params
quit
current_path
request.path
quit
request.path
batchrun_list_path
quit
user.try(:id)
User.try(:id)
@user_id
Cnuapp::Client.new(config_override)
config_override
quit
client.send(method, *args)
method
*args
args
quit
method
args
client.send(method, *args)
qut
quit
Batchelor::Application.initialize!
Batchelor
Batchelor::APIError
Batchelor::APIError < StandardError
Batchelor::APIError
::Batchelor::APIError
::Batchelor::
ls
Batchelor
Batchelor.methods
Batchelor.included_modules
ls
quit
require 'api"
require 'api'
ApiError
quit
find(:xpath, "//tr[contains(.,'test_batch_two')]/td/a", :text => 'restart')
quit
find(:xpath, "//tr[contains(.,'test_batch_two')]/td/a", :text => 'restart')
b = _
b.text
b.click
visit "/"
Capybara.match = :first
b = find(:xpath, "//tr[contains(.,'test_batch_two')]/td/a", :text => 'restart')
b.click
find('#confirmation_body_submit').click
assert first("#batchtable_content table tbody tr td").has_link?("test_batch_one")
assert first("#batchtable_content table tbody tr td").has_link?("test_batch_two")
quit
batch_list
batchlist.select { |config_name| /test/.match(config_name) }
batch_list.select { |config_name| /test/.match(config_name) }
batch_list.select { |config_name| /test/.match(config_name) }.first()
batch_list.select { |config_name| /test/.match(config_name) }.random()
batch_list.select { |config_name| /test/.match(config_name) }.rand()
batch_list.select { |config_name| /test/.match(config_name) }.rand
batch_list.select { |config_name| /test/.match(config_name) }.sample
quit
find_td
find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]").data('id')
find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]")
td.text
td = find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]")
td.text
td = find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]/../a")
td = find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]/./../a")
td = find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")
td.text
td.href
td.native.href
td.native.attr('href')
td.native.methods
td.native.attr
td = find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")['data']
td = find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a").id
td = find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a").native.id
td = find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a").text
exit
find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")
Capybara.match = :first
find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")
b = _
b.id
b.native.id
first(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")
b = _
b.native.id
b["id]
]
];
"
];
b["id"]
quit
find(:xpath, "//a[contains(.,'test_batch_chains_sync_chain')]")['id']
find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]")['id']
find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]")
find(:xpath, "//td[contains(.,'test_batch_chains_sync_chain')]/td/a")['id']
find(:xpath, "//tr[contains(.,'test_batch_chains_sync_chain')]/td/a")['id']
quit
Timezone
TimeZone
require 'TimeZone'
exit
request
request.headers
quit
request.header
request.headers
request.headers["Host"]
request.headers["brand"]
quit
reques
request
$request
request
$batchelor_subdomain
batchelor_subdomain
quit
Cnuapp
Cnuapp.configure
quit
Cnuapp
quit
Cnuapp
Cnuapp.configure
Cnuapp.methods
quit
request
$batchelor_subdomain
batchelor_subdomain
request
quit
$batchelor_subdomain
$response
response
env
quit
$batchelor_subdomain
$quit
quit
requst.headers["batchelor_brand"]
request.headers["batchelor_brand"]
request["batchelor_brand"]
request.headers["batchelor_brand"]
quit
request.headers["batchelor_brand"]
quit
brand
@clients
target = Batchelor::CONFIG.clients[api_target].api
api_target = case request.headers["batchelor_brand"]
when "us" then "cashnetusa"
when "gb" then "quickquid"
else "cashnetusa"
end
api_target
target = Batchelor::CONFIG.clients[api_target].api
Cnuapp.configure do |config|
  target = Batchelor::CONFIG.clients[api_target].api
  config.domain =  target.domain
  config.version =  target.version
  config.secure =  target.secure unless target.secure.nil?
end
Cnuapp.config.inspect
Cnuapp.client
quit
@clients[brand]
quit
Batchelor::CONFIG.clients
brand
quit
brand
"#{Batchelor::CONFIG.clients[brand].loan_url}#{loan_id}"
quit
"#{Batchelor::CONFIG.clients[brand].previous_customer_url}#{customer_id}"
quit
"#{Batchelor::CONFIG.clients[brand_name].loan_url}#{loan_id}"
quit
"#{Batchelor::CONFIG.clients[brand_name].previous_customer_url}#{customer_id}"
quit
"#{Batchelor::CONFIG.clients[brand_name].loan_url}#{loan_id}"
quit
"#{Batchelor::CONFIG.clients[brand_name].previous_customer_url}#{customer_id}"
quit
require 'cnuapp'
require 'vendor'
require 'cnuapp_client'
require 'cnuapp_client'quit
exit
request.headers
request
Capybara.current_session.driver.header
Capybara.current_session.driver.
Capybara.cur
path
location
current_path
current_url
stube
stub
request.headers
double("request.headers[\"batchelor_brand\"]").and_return("us")
double!("request.headers[\"batchelor_brand\"]").and_return("us")
double("request.headers[\"batchelor_brand\"]").and_return("us")
request.headers
current_url
stub
request
double('request')
request
stub('request').and_return('hi')
stub!('request').and_return('hi')
request
stub('request').and_return('hi')
return = double :return, :headers => {"batchelor_brand" => "us"}
return
request = double :return, :headers => {"batchelor_brand" => "us"}
request
request.headers
request.headers["batchelor_brand"]
request = double :return, :headers => {"batchelor_brand" => "us"}
quit
request
request.headers["batchelor_brand"]
request.headers
client
client.request = double :return, :headers => {"batchelor_brand" => "us"}
client.stub(:request).and_return(:headers => {"batchelor_brand" => "us"})
client
stub(client.request
)
client.send(:request=, :headers => {"batchelor_brand" => "us"})
request
client
vim /Users/cmwesigwa/.rbenv/versions/1.9.3-p448/lib/ruby/gems/1.9.1/gems/rack-test-0.6.2/lib/rack/test.rb
ApplicationHelper.brand
ApplicationHelper.brand = double :brand, "us"
ApplicationHelper = double :brand_name, :brand=>"us"
client
ApplicationHelper.brand
ApplicationHelper.double(:brand).and_return("us")
ApplicationHelper.stub(:brand).and_return("us")
client
ApplicationHelper.stub(:brand).and_return("us")
client
ApplicationHelper.stub!(:brand).and_return("us")
client
ApplicationHelper.stub(:brand).and_return("us")
client
ApplicationHelper.brand
ApplicationHelper.stub(:brand).and_return("ug")
ApplicationHelper.brand
ApplicationHelper.stub(:brand).and_return("us")
ApplicationHelper.brand
client
quit
ApplicationHelper.brand
client
ApplicationHelper.any_instance.stub(:brand).and_return("us")
ApplicationHelper.any.stub(:brand).and_return("us")
ApplicationHelper.stub(:brand).and_return("us")
quit
Rack::Test
Rack::Test::Session
Rack::Test::Session.stub(:request)
Rack::Test::Session.stub(:request).and_return({:headers=>{:batchelor_brand=>"us"}})
Rack::Test::Session.request
client
Rack::Test::Session.request
client
request
ActionDispatch::Request
ActionDispatch::Reques
ActionDispatch::Request
ActionDispatch::Request.headers
Rack::Test::Session.stub(:request).and_return({:headers=>{:batchelor_brand=>"us"}})
client
Rack::Test::Session.any_instance.stub(:request).and_return({:headers=>{:batchelor_brand=>"us"}})
client
Rack::Test::Session.any_instance.stub(:request).and_return({:headers=>{:batchelor_brand=>"us"}})
Rack::Test::Session.send(:request)
Rack::Test::Session.send("request")
quit
Rack::Test::Session.send(:request)
Rack::Test::Session.send("request")
Rack::Test::Session.methods
Rack::Test::Session.ancestors
Rack::Test::Session.respond_to(:request)
Rack::Test::Session.respond_to?(:request)
Rack::Test::Session.respond_to?(:header)
Rack::Test::respond_to?(:header)
Rack::respond_to?(:header)
Rack::Test::Session.respond_to?(:request)
Rack::Test::Session.respond_to?(:request,1)
client
quit
env
env.headers
reqest
request
quit
qquit
quit
client
env
request "/"
request
quit
request
ancestors
request
respond_to?(:request)
methods
request
Cucumber::Rails::World.respond_to?(:request)
which 
parents
ancestors
methods
Rack
Rack.respond_to(:request)
Rack.respond_to?(:request)
Rack::Test.respond_to?(:request)
ancestors
Rack::Test::Session.respond_to?(:request)
request
quit
client
ApplicationHelper
ApplicationHelper.respond_to?(:brand)
ApplicationHelper.stub(:brand).and_return("us")
client
ApplicationHelper.mock(:brand).and_return("us")
ApplicationHelper.stub(:brand).and_return("us")
ApplicationHelper.stub!(:brand).and_return("us")
client
quit
client
quit
client
hi
target = Batchelor::CONFIG.clients['cashnetusa'].api
client = Cnuapp::Client.new target
client
quit
client
ls
quit
client
cnu_client.nil
cnu_client.defined?
defined? cnu_client
defined?(cnu_client)
puts defined?(cnu_client)
defined?(cnu_client)
cnu_client = ""
defined?(cnu_client)
exists?(cnu_client)
quit
client
quit
@clients[brand]
quit
find("#errors .accordion-toggle")
find("#errors")
find("#errors").find("accordion-toggle")
current_url
find("#errors").find(".accordion-toggle")
find(".accordion-heading")
click_link("Errors")
find(:xpath, "//a[@href='/#error-body']")
find(:xpath, "//a[@href='#error-body']")
page.html
reload
page.reload
current_url
visit "/batchruns/533"
page.html
exit
first("batch-custom tbody")
first(".batch-custom tbody")
first(".batch-custom tbody").all(".batch-custom td").last
first(".batch-custom tbody").all(".batch-custom td").last.text
all(".batch-custom td").last
all(".batch-custom td").last.text
first(".batch-custom tbody").all("td").last.text
first(".batch-custom tbody td").last.text
last(".batch-custom tbody td").last.text
all(".batch-custom tbody td").last.text
quit
@batch_id
visit "#{batchrun_path(@batch_id)}"
batchrun_path(@batch_id)
quit
client.kill_batchrun @batch_id
@batch_id
quit
first(".batch-table tr").all("td")
first(".batch-table tr").all("td").last
first(".batch-table tr")
first(".batch-table tr").text
first(".batch-table tbody tr").text
first(".batch-table tbody tr").text.contains? "not_started"
/not_started/.match(first(".batch-table tbody tr").text)
/hello/.match(first(".batch-table tbody tr").text)
quit
<CnuException: 10025: [:can_not_issue] Can not issue loan (id=35665028), reason: loan_type_invalid_for_state (loan_id=35665028) (customer_id=16234452) (troublemaker=issue_all_approved)>
line = "<CnuException: 10025: [:can_not_issue] Can not issue loan (id=35665028), reason: loan_type_invalid_for_state (loan_id=35665028) (customer_id=16234452) (troublemaker=issue_all_approved)>
"
line
decorate_error(line)
require 'show_helper'
decorate_error(line)
ShowHelper::decorate_error(line)
ShowHelper
ShowHelper.methods
ShowHelper.methods.include? "decorate_error"
exit
include ShowHelper
helper.decorate_error(line)
helper
helper.decorate_error(line)
line = "<CnuException: 10025: [:can_not_issue] Can not issue loan (id=35665028), reason: loan_type_invalid_for_state (loan_id=35665028) (customer_id=16234452) (troublemaker=issue_all_approved)>"
helper.decorate_error(line)
headers
response
response.headers
loan_id = line.scan(/loan_id=\d+/)[0].split('=')[1]
loan_url = "somelink"
loan_url_text = "loan_id=#{loan_id}"
line.gsub!(/loan_id=\d+/, "<a href=#{loan_url} class=loan_id >#{loan_url_text}</a>" )
line.gsub(/loan (id=\d+)/, "<a href=#{loan_url} class=loan_id >loan (id=#{loan_id})</a>" )
line.match(/loan (id=\d+)/
  ;
line.match(/loan (id=\d+)/)
line.match(/loan/)
line.match(/loan (/)
line.match(/loan \(/)
line.match(/loan \(id=\d+\)/)
line.gsub(/loan \(id=\d+\)/, "<a href=#{loan_url} class=loan_id >loan (id=#{loan_id})</a>" )
params
quit
/^d+$/.match params[:query]
params[:query]
/^"d+"$/.match params[:query]
/^\"d+\"$/.match params[:query]
/^"d+"$/.match params[:query]
/^"d+"$/.match(params[:query])
/^"d+"$/.match 1
/^"d+"$/.match "1"
/^d+$/.match "1"
/^\d+$/.match "1"
$0
$1
/^\d+$/.match "1"
/^"\d+"$/.match params[:query]
/^\d+$/.match params[:query]
quit
@properties = Property.where(["lower(address) LIKE :value", { :value => params[:query].downcase }])
@properties = Property.where(["lower(address) = :value", { :value => params[:query].downcase }])
Property.find 9
b = _
b.address
b.address.lower
lower(b.address)
b.address.downcase
b.address.strip
b.save
@properties = Property.where(["lower(address) = :value", { :value => params[:query].downcase }])
b
b.reload
b.save!
b.reload
b.update
b.update {address: "1244 N Massasoit Av, Chicago, IL,"
}
b.update {:address => "1244 N Massasoit Av, Chicago, IL,"}
b.update ({:address => "1244 N Massasoit Av, Chicago, IL,"})
b
@properties = Property.where(["lower(address) = :value", { :value => params[:query].downcase }])
quit
b = Property.find 9
quit
data
data[:pay_load]
data["pay_load"]
quit
data
quit
ChainStat.update_stats
quit
find_link("Errors")
quit
find_link("Errors")
_.click
all("ul#error_stack_trace li").size.should > 0
quit
rmls = "123_zpid"
/_zpid/.match rmls
rmls - _
_.inspect
_.data
_[0]
_[1]
/_zpid/.match rmls
_.prematch
_.pre_match
quit
ChainStat.update_stats
ChainStat.all
ChainStat.delete :all
ChainStat.delete_all
quit
ChainStat.update_stats
quit
ChainStat.delete_all
ChainStat.update_stats
quit
client.cron[day]
client.cron
client
Batchelor::CONFIG.clients['cashnetusa']
Batchelor::CONFIG.clients['cashnetusa'].api
@cnu_client = Cnuapp::Client.new target
@cnu_client
@cnu_client.domain
@cnu_client.configuration
@cnu_client.configuration.domain
Batchelor::CONFIG.clients['cashnetusa'].api.domain
quit
client.cron
quit
TimeZone
Timezone
require ActiveSupport::TimeZone
require 'ActiveSupport::TimeZone'
ActiveSupport::TimeZone.all
ChainStat.update_stats
chain
ChainStat.where(config_name: chain["config_name"], cluster: cluster)[0]
ChainStat.all
ChainStat.find_all
ChainStat.all
hains = client.get_batches.select { |config_name| config_name.include? "chain" }
chains = client.get_batches.select { |config_name| config_name.include? "chain" }
chains.keys.each do |config_name|
  FactoryGirl.create(:chain_stat, config_name: config_name, cluster: cluster, time_per_unit: 0, expected_run_time: 0)
end
chain_stat = ChainStat.where(config_name: chain["config_name"], cluster: cluster)[0]
binding.pry
quit
chain_stat
ChainStat.all
FactoryGirl.create(:chain_stat, config_name: config_name, cluster: cluster, time_per_unit: 0, expected_run_time: 0)
chains.keys.each do |config_name|
  FactoryGirl.create(:chain_stat, config_name: config_name, cluster: cluster, time_per_unit: 0, expected_run_time: 0)
end
chains = client.get_batches.select { |config_name| config_name.include? "chain" }
chains.keys.each do |config_name|
  FactoryGirl.create(:chain_stat, config_name: config_name, cluster: cluster, time_per_unit: 0, expected_run_time: 0)
end
ChainStat.where(config_name: chain["config_name"], cluster: cluster)[0]
ChainStat.where
ChainStat.all
quit
ChainStat.all
quit
ChainStat.all
quit
request.headers["batchelor_brand"]
quit
quti
quit
exit
quit
cluster
request.headers["batchelor_brand"]
quit
exit
eixt
exit
Rails.env
Rails.env == "development" ? "us" : "hi"
exit
:devise_controller
:devise_controller?
:devise_controller ?
controller
params[:controller]
controller
class
  self.class
self.class;
self.class
:devise_controller?
quit
self.class
self.type
quit
:devise_controller?
self.class
quit
"9340 S RHODES Ave
CHICAGO, IL 60619".titleize
"434343 Spoil, CHICAGO, IL, 60623"
b + _
b = _
b.gsub(/^Il$/, IL)
b.gsub(/^Il$/, "IL")
Property
Property.all
Property.all.each {|p| p.address.gsub(/^Il$/, "IL")}
Property.all.each {|p| p.address.gsub(/^Il$/, "IL") p.save}
Property.all.each {|p| p.address.gsub(/^Il$/, "IL"); p.save}
quit
Property.all.each {|p| p.address.gsub(/^Il$/, "IL"); p.save}
Property.all
Property.all.each {|p| p.address.gsub!(/^Il$/, "IL"); p.save}
Property.all
Property.all.each {|p| p.address = p.address.gsub(/^Il$/, "IL"); p.save}
Property.all
Property.all.first {|p| p.address = p.address.gsub(/^Il$/, "IL"); p.save}
Property.first
p = Property.first
p.address
p.address = p.address.gsub(/^Il$/, "IL")
p.address 
a = p.address
a.gsub(/^Il$/, "IL")
/^Il$/.match a
/[[:space]]Il[[:space]]/.match a
/[[:space]]/.match a
a
/ Il /.match a
a
/\ Il\ /.match a
/Il/.match a
/ Il/.match a
/[[:space]]Il/.match a
/[[:blank]]Il/.match a
/[[:blank]] Il/.match a
/Il/.match a
/ Il/.match a
/[[:space:]]Il/.match a
/[[:space:]]Il![[:alpha:]]/.match a
/[[:space:]]Il{^[[:alpha:]]}/.match a
/[[:space:]]Il{^a}/.match a
/[[:space:]]Il\p{Alpha}/.match a
/[[:space:]]Il\p{^Alpha}/.match a
$1
\1
a.gsub(/[[:space:]]Il\p{^Alpha}/, '\1.uppercase')
a.gsub(/[[:space:]]Il\p{^Alpha}/, '\1')
a.gsub(/[[:space:]]Il\p{^Alpha}/, '<\1>')
a.gsub(/[[:space:]]Il\p{^Alpha}/ { |s| s }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| puts s }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s.uppercase }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s.upper }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s.capitalize }
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s.capitalize! }
a
"Il,".capitalize
"Il,".upcase
a.gsub(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }
Property.all.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save}
Property.all
Property.all.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save}
Property.all
Property.first {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save}
Property.first {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
Property.first {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; hi}
Property.first.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; }
props = Property.all
props 
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save}
Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; hi}
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save}
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
Property.all
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props
quit
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
a = "Single Family"
a.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }
a.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }
a
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
quit
props = Property.all
props.each {|p| p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props = Property.all
props.each {|p| p.address = p.address.gsub!(/[[:space:]]Il\p{^Alpha}/) { |s| s.upcase }; p.save!}
props
Property.all
Property.where(visited: false, considered:false)
Property.where(visited: false, considered:false).size
Date
Date.today
Date.today.strftime("%d/%m/%Y")
Date.today.strftime("%d-%m-%Y")
quit
base_url
root_url
Rails
Rails.root_url
quit
root_url
quit
request
request.domain
request.url
split_url = request.url.partition(request.domain)
split_url = request.split(request.domain)
split_url = request.url.split(request.domain)
split_url = request.url.partition(request.domain)
split_url.join
split_url = request.url.partition(request.domain)
split_url[1] = "hi"
split_url.join
split_url[1] = "hi"
quit
request
request.url
/http/.match
/http/.match request.url
/(http|https)/.match request.url
match_data = _
match_data[0]
/(http|https)\:\/\//.match request.url
match_data = _
match_data[0]
/(http|https)(\:\/\/)/.match request.url
/(http|https)\:\/\//.match request.url
/(http|https)\:\/\/(\w+)./.match request.url
/(http|https)\:\/\/(\w+)\./.match request.url
request.url = "http://us.localhost:3000/users/sign_in"
string = _
string = "http://us.localhost:3000/users/sign_in"
/(http|https)\:\/\/(\w+)\./.match string
match_data[1]
match_data = _
match_data[1]
match_data = /(http|https)\:\/\/(\w+)\./.match string
match_data[1]
match_data[2]
match_data[0]
quit
split_url
url = "http://batchelor.enova.com"
url.domain
ActionDispatch::Http::URL.extract_domain("http://batchelor.enova.com", 1)
ActionDispatch::Http::URL.extract_domain("http://batchelor.enova.com", 2)
ActionDispatch::Http::URL.extract_domain("http://batchelor.enova.com", 3)
ActionDispatch::Http::URL.extract_domain("http://batchelor.enova.com", 0)
ActionDispatch::Http::URL.extract_domain("http://batchelor.enova.com", 2)
"http://batchelor.enova.com".partition("http://)
;
"
)
"http://batchelor.enova.com".partition("http://")
"http://batchelor.enova.com".gsub(/\:\/\//, /\:\/\/us\.)
/
)
"http://batchelor.enova.com".gsub(/\:\/\//, /\:\/\/us\./)
"http://batchelor.enova.com".gsub(/\:\/\//, "://us.")
quit
request.host
request.url
request.parameters
url += "eligible_batchelors"
url
url = "http://us.localhost:3000/"
url += "eligible_batchelors"
url.gsub(/\:\/\//, "://#{batchelor_brand}.")
url.gsub(/\:\/\//, "://us.")
url.gsub(/\:\/\//, "://us.").gsub(/\/\w$/, "")
url.gsub(/\:\/\//, "://us.").gsub(/\/\w/, "")
url.gsub(/\:\/\//, "://us.").gsub(/\/\w+$/, "")
quit
brand
quit
chains
chains.sort
quit
"a".sort
"a".try(:sort)
"a".respond_to(:sort)
"a".respond_to?(:sort)
"a".respond_to? :sort
[].respond_to? :sort
"".each
[[1, 2, 3]]
[[1, 2, 3]].flatten
[1, 2, 3].flatten
quit
all("table#batchruns tbody tr")
all("table#batchruns tbody tr").size
quit
all("table#batchruns tbody tr").size.should == @chainrun["batchruns"].size
@chainrun
quit
@chainrun
all("table#batchruns tbody tr").size.should == @chainrun["batchruns"].size
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
path
quit
api_params
quit
api_params
quit
"50"
URI.encode _
URI.encode 50
50.try(URI.encode)
try(URI.encode(50))
try(URI.encode(50.to_s))
URI.encode 50.to_s
quit
client
brand
cluster
visit "/"
path
current_url
visit "/users/sign_in"
current_url
visit "/users/sign_"
visit "/users/sign_in"
current_url
quit
Rails.env
cluster
quit
cluster
quit
first(".batch-custom tbody tr").all("td").last.text
visit "#{batchrun_path(@batch_id)}"
first(".batch-custom tbody tr").all("td").last.text
quit
index = all("table#previous-runs tbody tr").size - 1
index = all("table#previous-runs tbody tr").size
index = all("#previous-runs tbody tr").size
index = all("#previous-runs tbody tr")
index = firts("#previous-runs tbody tr")
index = first("#previous-runs tbody tr")
index = first("#previous-runs")
url
current_url
find("#previous-runs")
page.html
refresh
visit current_url
page.html
visit current_url
page.html
quit
qpi_params
api_params
quit
params
quit
api_params
quit
params
get_resource(:batchruns, [], params)
quit
page.html
current_url
quit
index
quit
Chainstat.all
ChainStat
ChainStat.all
ChainStat.all.size
ChainStat.all
ChainStat.where(cluster: "us").size
ChainStat.where(cluster: "gb").size
quit
Batchelor::CONFIG.clients
Batchelor::CONFIG.clients.map
Batchelor::CONFIG.clients.map {k, config[:enabled] }
Batchelor::CONFIG.clients.select {|k, config| config[:enabled] }
Batchelor::CONFIG.clients.select {|k, config| config[:enabled] }.map {|k,config| k}
Batchelor::CONFIG.clients.select {|k, config| config[:enabled] }.keys
quit
ChainStat.all
ChainStat.destroy_all
ChainStat.all
quit
ChainStat.all
ChainStat.all.size
quit
client
quit
"90%"
b = _
b.to_i
quit
batchrun
batchrun["error_count"]
batchrun
batchrun[:calculations]
batchrun["calculations"]
batchrun["calculations"]["error_count"]
quit
Date.now
Date
Date.today
Time.now
Time.now.strftime("yyyy-mm-dd h:m:s)
Time.now.strftime("yyyy-mm-dd h:m:s")
Time.now.strftime("%a, %e %b %Y %H:%M:%S")
quit
Status
Status.create(status: "Active")
Status.all
Status.create(status: "Contingent")
Status.create(status: "Sold")
Status.create(status: "Pending")
Status.all
Status.create(status: "Offer Submitted")
Status.create(status: "Offer Denied")
Status.create(status: "Price Change")
Status.create(status: "New")
Status.create(status: "Short Sale")
Status.all
Property.find(status: "active")
Property.where(status: "active")
Property.where(status: "Active")
quit
Status
Property.first
quit
Property.first
Property.all
Property.size
Property.all.size
quit
k
classes
run_statistics
quit
Property.first
Property.status
Property.first.status
ni
nil
nil.to_i
quit
run_statistics
run_statistics[:error]
run_statistics[:killed]
quit
run_statistics
home_params[:run_statistics]
quit
@batchrun_list
quit
stat
run_statistics[:error].to_i + run_statistics[:killed].to_i
k
stat
quit
statistic
quit
all('#run_statistics a.btn.alert').map {|elem| elem.text}
all('#run_statistics a.btn.alert h3').map {|elem| elem.text}
all('#run_statistics a.btn.alert h3').map {|elem| elem.text}.inject(0, :+)
all('#run_statistics a.btn.alert h3').map {|elem| elem.text.to_i}.inject(0, :+)
quit
[0,1,2,3].inject(0, &+)
[0,1,2,3].inject(0)
[0,1,2,3].inject(0, :+)
quit
total
find('#run_statistics a.btn.alert.alert-info h3')
find('#run_statistics a.btn.alert.alert-info h3').text
find('#run_statistics a.btn.alert.alert-info h3').html
page
page.content
page.text
visit "/"
page.text
page.url
page.location
page.ulr
page.url
page.location
current_url
current_url.methods
Batchelor::CONFIG
Batchelor::CONFIG.clients
quit
total
quit
total
quit
status
wq
quit
all('.batch-table tr td')
all('.batch-table tr td').each {|element| element.should have_content status }
all('.batch-table tr').each {|element| element.should have_content status }
all('.batch-table tbody tr').each {|element| element.should have_content status }
all('.batch-table tbody tr').each {|element| element.should have_content "finished" }
quit
find("#spinner").should be_empty
current_url
page.reload
page.refresh
visit current_url
current_url
quit
total
sum = all('#run_statistics a.btn.alert h3').map {|elem| elem.text.to_i}.inject(:+)
sum = all('#run_statistics a.btn.alert h3').map {|elem| puts elem.text.to_i}.inject(:+)
sum = all('#run_statistics a.btn.alert h3').map {|elem| elem.text.to_i}
sum = all('#run_statistics a.btn.alert h3').map {|elem| puts elem.text.to_i}.inject(:+)
sum = all('#run_statistics a.btn.alert h3').map {|elem| elem.text.to_i}.inject(:+)
1275 - 77
total
quit
find('#run_statistics a.btn.alert.alert-info h3').text.to_i
sum = all('#run_statistics a.btn.alert h3').map {|elem| elem.text.to_i}.inject(:+)
sum - 649
quit
batch["parent_id"]
if nil
  nil
  puts false
end
if nil puts false end
if nil puts "false" end
if nil puts "false"; end
if nil; puts "false"; end
unless nil; puts "false"; end
quit
Rails.env
Rails.env.integration?
quit
Property.first
p = _
p.status
p.status_id
p.status = nil
p.status
quit
Property.first
p = _
p.status
p.status.status
quit
Property.first
Property
quit
Property
quit
Property.first
p = _
p.status.status
p = Property.new{mls: 234, address: "test", price: 0.8, type: "Single Family", units: 1, bedrooms: 3, baths: 3, comments: "", visited: false, considered: false}
p = Property.new({mls: 234, address: "test", price: 0.8, type: "Single Family", units: 1, bedrooms: 3, baths: 3, comments: "", visited: false, considered: false})
p.save
p = Property.new({mls: 234, address: "test", price: 0.8, type: "Single Family", units: 1, bedrooms: 3, baths: 3, comments: "", visited: false, considered: false, status_id: 1})
p.save
p = Property.new({mls: 234, address: "test", price: 0.8, type: "Single Family", units: 1, bedrooms: 3, baths: 3, comments: "", visited: false, considered: false, status_id: 1, status: "Active"})
p = Property.new({mls: 234, address: "test", price: 0.8, type: "Single Family", units: 1, bedrooms: 3, baths: 3, comments: "", visited: false, considered: false, status_id: 1})
p.save
Status.each
Status.all
Status.all.each
Status.all
Status.all.map
Status.all.map {|s| s.id}
Status.all.map {|s| s.status}
{"utf8"=>"",
  "authenticity_token"=>"OKHyeR6mH9P/GW0egQJqCQPQv8mLq+GG5WjM39AoUpY=",
  "property"=>{"mls"=>"23424",
    "rmls"=>"23424",
    "address"=>"Wwewrw Test",
    "price"=>"4",
    "status_id"=>"1",
    "status"=>"Contingent",
    "type"=>"Single Family",
    "units"=>"1",
    "bedrooms"=>"3",
    "baths"=>"3",
    "comments"=>"Cool One",
    "opinion"=>"Under Consideration",
    "visited"=>"0",
  "considered"=>"0"},
"commit"=>"Create Property"}
{"utf8"=>"",
  "authenticity_token"=>"OKHyeR6mH9P/GW0egQJqCQPQv8mLq+GG5WjM39AoUpY=",
  "property"=>{"mls"=>"23424",
    "rmls"=>"23424",
    "address"=>"Wwewrw Test",
    "price"=>"4",
    "status_id"=>"1",
    "status"=>"Contingent",
    "type"=>"Single Family",
    "units"=>"1",
    "bedrooms"=>"3",
    "baths"=>"3",
    "comments"=>"Cool One",
    "opinion"=>"Under Consideration",
    "visited"=>"0",
  "considered"=>"0"},
"commit"=>"Create Property"}
b = _
b = Property.new b[:property]
{"utf8"=>"",
  "authenticity_token"=>"OKHyeR6mH9P/GW0egQJqCQPQv8mLq+GG5WjM39AoUpY=",
  "property"=>{"mls"=>"23424",
    "rmls"=>"23424",
    "address"=>"Wwewrw Test",
    "price"=>"4",
    "status_id"=>"1",
    "status"=>"Contingent",
    "type"=>"Single Family",
    "units"=>"1",
    "bedrooms"=>"3",
    "baths"=>"3",
    "comments"=>"Cool One",
    "opinion"=>"Under Consideration",
    "visited"=>"0",
  "considered"=>"0"},
"commit"=>"Create Property"}
b = _
b[:property]
b["property"]
p = Property.new b["property"]
b["property"].remove["status"]
b["property"].delete["status"]
b["property"].delete("status")
b
p = Property.new b["property"]
p.save
p.id
quit
Property.new ({"mls"=>"23424",
    "rmls"=>"23424",
    "address"=>"Wwewrw Test",
    "price"=>"4.0",
    "status"=>"Pending",
    "type"=>"Single Family",
    "units"=>"1",
    "bedrooms"=>"3",
    "baths"=>"3.0",
    "comments"=>"Cool One",
    "opinion"=>"Under Consideration",
    "visited"=>"0",
"considered"=>"0"})
Status.all
p = Property.find 25
p.status = "Active"
p
p.save!
p.save
p
p.status
p.raw_status
p.status_before_type_cast
p
p.status
p
p.save
s = Status.new(name: "test")
s.save
Status.all
p = Property.find 25
p.status = test
p.status = "test"
p
p.status = "Test"
p
p.save
p
p.save
Property.first
Property.first.status
Property.first.save
quit
"Undertermined"
_.try(:round)
s = "Undertermined"
s.round
s.try(:round) || s
quit
unit
data[:pay_load]
quit
data[:pay_load][:time]
data[:pay_load][:time].try(round,4)
(data[:pay_load][:time]).try(round,4)
(data[:pay_load][:time]).type
(data[:pay_load][:time]).is?
(data[:pay_load][:time]).type?
(data[:pay_load][:time]).round
(data[:pay_load][:time]).round(4)
data[:pay_load][:time].try(:round,4)
quit
data[:pay_load]
data[:pay_load].size
data[:pay_load].keys?
data[:pay_load].keys
array = [[1], [2], [3]]
array.keys
array.try(:keys)
quit
list
list[:runs]
list["runs"]
list["runs"].select { |chain| chain["config_name"] == "test_batch_one" }
list["runs"].select { |chain| chain["config_name"] == "test_batch_one" }.size
quit
current_number
batch_name
chain
list["runs"]
list["runs"].select { |chain| chain["config_name"] == batch_name || chain["chainrun"] == batch_name }.size
batch_name
list["runs"].select { |chain| chain["config_name"] == batch_name || chain["chainrun"] == batch_name }.size
list["runs"].select(& "chainrun")
list["runs"].select(& :chainrun)
list["runs"].select(& :.chainrun)
list["runs"].select(& :"chainrun")
list["runs"].select { |chain| chain["chainrun"] }
"test_batch_chains_sync_chain: 265".include "test_batch_chains_sync_chain"
"test_batch_chains_sync_chain: 265".include? "test_batch_chains_sync_chain"
"test_batch_chains_sync_chain: 265".include? "test_batch_chains_sync_chi"
quit
[1,1,3,4,5]
a = [1,1,3,4,5]
a.delete[1]
a.delete
a.delete 1
a
b= a
b.delete 4
a
a = [1, 1, 3, 4, 5, 6]
a.each {|n| puts n}
a.each {|n| puts n }
b
b = a
Integer::MAX
Integer::max
Integer.max
Integer
Integer::MAX
Integer.maximum
Integer::MAXIMUM
MAXIMUM
quit
FinanceXL
exit
FinanceXL::ActivityType,
FinanceXL::ActivityType
Gem
Gem.path
require finance_xl
require 'finance_xl'
FinanceXL::ActivityType
require 'finance_xl/*'
FinanceXL
FinanceXL.methods
FinanceXL.classes
FinanceXL.included_modules
ActivityType
require 'financexl'
require 'finance_xl'
require 'finance_xl/'
require 'finance_xl'
FinanceXL
FinanceXL::Activity_Type
FinanceXL::ActivityType
require 'activitytype'
require 'activity_type'
require 'app/activity_type'
quit
FinanceXL::Ledger
FinanceXL::Ledger.all
DatabaseCleaner.clean_with(:truncation)
FinanceXL::Ledger.all
FinanceXL::Ledger.destroy_all
FinanceXL::Ledger.first
FinanceXL::Ledger.first.destroy
FinanceXL::Ledger.all
FinanceXL::Ledger.all { |l| l.destroy }
FinanceXL::Ledger.all
FinanceXL::Ledger.all { |l| l.destroy! }
FinanceXL::Ledger.all
FinanceXL::Ledger.all { |l| l}
FinanceXL::Ledger.all { |l| l.destroy }
FinanceXL::Ledger.all
FinanceXL::Ledger.all.reload
FinanceXL::Ledger.reload
FinanceXL::Ledger
FinanceXL::Ledger.all
FinanceXL::Ledger.cache
FinanceXL::Ledger.cache?
FinanceXL::Ledger.lookup
FinanceXL::Ledger.lookup.cache
FinanceXL::Ledger.lookup.cache.clear
FinanceXL::Ledger.all
FinanceXL::Ledger.lookup.cache.clear
FinanceXL::Ledger.lookup
FinanceXL::Ledger.lookup.cache
FinanceXL::Ledger.lookup
FinanceXL::Ledger.lookup.cache
FinanceXL::Ledger.lookup.cache.write
FinanceXL::Ledger.lookup.write
FinanceXL::Ledger.all
quit
FinanceXL::ActivityType
FinanceXL::ActivityType.all
FinanceXL::ActivityType.lookup
FinanceXL::ActivityType.lookup.clear
FinanceXL::ActivityType.all
FinanceXL::ActivityType.lookup
FinanceXL::ActivityType.lookup.delete!
FinanceXL::ActivityType.lookup.clear
FinanceXL::ActivityType.lookup
FinanceXL::ActivityType.all
FinanceXL::ActivityType.first.delete
FinanceXL::ActivityType.first
FinanceXL::ActivityType.first.delete
FinanceXL::ActivityType.all
FinanceXL::Ledger.all
FinanceXL::Ledger.lookup_by_cache.reset!
FinanceXL::ActivityType.lookup_by_cache.reset!
quit
models
models.each { |m| m.lookup_by_cache.reset! if m.respond_to?(:lookup_by_cache) }
FinanceXL::Ledger
FinanceXL::Ledger.all
FinanceXL::Ledger.lookup
FinanceXL::Ledger.lookup_by_cache
FinanceXL::Ledger.lookup
FinanceXL::Ledger.lookup.reload
DatabaseCleaner.clean
DatabaseCleaner.db
DatabaseCleaner
DatabaseCleaner.methods
quit
exec_delete('DELETE * FROM accounting.ledger')
ActiveRecord
ActiveRecord::Connection
ActiveRecord.connection
ActiveRecord::Base.connection
ActiveRecord::Base.connection.exec_delete('DELETE * FROM accounting.ledger')
ActiveRecord::Base.connection.exec_delete('DELETE FROM accounting.ledger')
models
models.first
models.first.all
models.first.reload
models.first.
all
models.first.all
models.first.table
models.first.table_name
ActiveRecord::Base.connection.exec_delete('DELETE FROM ')
models.each { |m| ActiveRecord::Base.connection.exec_delete('DELETE FROM #{m.table_name} WHERE 1=1') }
models.each { |m| ActiveRecord::Base.connection.exec_delete("DELETE FROM #{m.table_name} WHERE 1=1") }
quit
ex
date
sum(date
)
)sums
sums
quit
subject
quit
qquit
quit
ActivityFree.new.book(:aggressive) }
ActivityFree.new.book(:aggressive)
ActivityFree
ActivityFree.new
ActivityFree.new.book
ActivityFree.new.book(:none)
quit
books
books.find { |book| book.ledger == ledger }
ledger
ledger = FinanceXL::Ledger[ledger]
quit
ledger
FinanceXL::Ledger[ledger]
books.find { |book| puts book.ledger }
books.each { |book| puts book.ledger }
books.each { |book| puts book.ledger.inspect }
books.each { |book| book.ledger }
books
books.each { |book| book }
books
books.ledger
books
puts books.inspect
puts books.ledger
puts books.each { |b| b.ledger == nil }
books.each { |b| b.ledger == nil }
ledger_names
Book.all
quit
ledger = FinanceXL::Ledger :none
ledger = FinanceXL::Ledger.ledger :none
ledger = FinanceXL::Ledger.new :none
ledger = FinanceXL::Ledger.new (:none)
ledger = FinanceXL::Ledger[:none]
FinanceXL::Ledger.all
quit
FinanceXL::Ledger
FinanceXL::Ledger.all
quit
FinanceXL::ActivityType.all
FinanceXL::EntryType.all
FinanceXL::EntryType.lookup.reload
FinanceXL::EntryType.all
FinanceXL::EntryType.reload
FinanceXL::EntryType.reset!
FinanceXL::EntryType
FinanceXL::EntryType.all
exit
FinanceXL::EntryType.all
FinanceXL::EntryType.all.dr
FinanceXL::EntryType.all.debit
FinanceXL::EntryType.all.methods
FinanceXL::EntryType.all
Accounts
FinanceXL::Account
FinanceXL::Account.all
FinanceXL::Account.lookup.relaod
FinanceXL::Account.lookup.reload
FinanceXL::Entry
FinanceXL::Entry.all
FinanceXL::Entry
FinanceXL::Entry.all
FinanceXL::EntryType
FinanceXL::EntryType.all
quit
models
FinanceXL::ActivityType
FinanceXL::ActivityType.all
FinanceXL::EntryType
FinanceXL::EntryType.all
quit
models
FinanceXL::ActivityType.all
FinanceXL::EntryType.all
FinanceXL::EntryType.all.size
FinanceXL::Account.all
FinanceXL::Account.all.size
FinanceXL::Ledger.all
quit
models
FinanceXL::ActivityType
FinanceXL::ActivityType.all
FinanceXL::EntryType.all
quit
IPAddr
quit
IPAddr
quit
ruby
Ruby
IPAddr
RUBY_VERSION
RUBY_PATCHLEVEL
IP
IPADDR
IPAddr
require 'ipaddr'
IPAddr
quit
balance
D(balance)
quit
actual
source
quit
accountant
quit
ledger
@accountant.accounts(ledger)
;15
@accountant
@accountant.save!
@accountant.save
@accountant
accountant = MultiLedgerAccountant.new
@accountant.accounts
Date('2012-10-01')
Date.new(2012-10-01)
Date.new('2012-10-01')
Date.new(2012-10-01)
Date.parse(2012-10-01)
Date.parse('2012-10-01')
accountant.simulate { issue, Date.parse('2012-10-01'), 100, Date.parse('2012-10-01) }
;
';
accountant.simulate { issue, Date.parse('2012-10-01'), 100, Date.parse('2012-10-01') }
accountant.simulate { issue, Date.parse('2012-10-01'), D(100), Date.parse('2012-10-01') }
accountant.simulate { issue Date.parse('2012-10-01'), D(100), Date.parse('2012-10-01') }
accountant.accounts
accountant.simulate { finish, Date.parse('2012-10-02') }
accountant.simulate { finish Date.parse('2012-10-02') }
accountant
accountant.simulate { finish Date.parse('2012-10-02') }
accountant.simulate { finish Date.parse('2012-10-02'), Date.parse('2012-10-02') }
accountant
accountant.simulate { finish Date.parse('2012-10-02') }
accountant.simulate { finish Date.today }
accountant.simulate { finish Date.parse('2012-10-02') }
quit
binding.pry
quit
@accountant
@accountant.schedule
@accountant.schedule.methods
@accountant.schedule.methods.schedule
@accountant.schedule.schedule
@accountant
@accountant.activities
@accountant.accounts
@accountant.ledger
@accountant.ledgers
@accountant[:aggresive]
@accountant.ledger[:aggresive]
accountant.simulate { issue, Date.parse('2012-10-01'), D(100), Date.parse('2012-10-01') }
accountant.simulate { issue Date.parse('2012-10-01'), D(100), Date.parse('2012-10-01') }
accountant = MultiLedgerAccountant.new
accountant.simulate { issue Date.parse('2012-10-01'), D(100), Date.parse('2012-10-01') }
accountant.simulate { finish Date.parse('2012-10-01'), D(100) }
accountant.simulate { finish Date.parse('2012-10-01') }
accountant.activities
accountant.finish
accountant.simulate { finish, Date.parse('2012-10-01') }
accountant.simulate { finish Date.parse('2012-10-01') }
accountant.simulate { finish Date.parse('2012-10-03') }
date = Date.parse('2012-10-02')
accountant.simulate { finish date }
accountant
@accountant.activities
@accountant.activities[1]
@accountant.activities.1
@accountant.activities.methods
@accountant.activities
@accountant.activities[0]
@accountant.activities.first
@accountant.activities.first.activities
@accountant.activities.first.methods
@accountant.activities.first.entries
@accountant.activities.last.entries
@accountant.activities.last
@accountant.activities.at_index(2)
@accountant.activities.methods
@accountant.activities.methods.to_a
@accountant.activities.to_a
ac = @accountant.activities.to_a
ac[1]
ac[1].entries
clear
@
@accountant
quit
@date
quit
@accountant
quit
@date
end_date
audit(:fast_forward, start_date, end_date)
audit(:ledgers, self)
quit
@date
end_date
audit(:fast_forward, start_date, end_date)
audit(:ledgers, self)
quit
@date
end_date
date == end_date
quit
@date
end_date
quit
@accountat
@accountant
quit
@accountant
quit
@accountant
@date
quit
@accountant
quit
@accountant
quit
@accountant
accountant
self
quit
self
quit
slef
self
scheduled_activities(@date) if simulating?
self
audit(:daily_complete, @date)
daily
self
quit
dialy_procs
daily_procs
daily_procs[:aggressive]
daily_procs[:aggressive].methods
daily_procs[:aggressive].inspect
daily_procs[:aggressive].methods
daily_procs[:aggressive].to_s
daily_procs[:aggressive].to_yaml
daily_procs[:aggressive].to_yaml.inspect
daily_procs[:aggressive].to_yaml.expand
daily_procs[:aggressive].to_yaml.to_query
daily_procs[:aggressive].to_query
daily_procs[:aggressive].to_comment_line
quit
today
activity :interest, today, daily_interest(2)
self
self.activities
quit
self
quit
self
quit
self
self.daily_procs
quit
self.daily_procs
self.context_helpers
self.activity_procs
quit
@accountant
quit
self.daily_guard_proc
self.daily_guard
quit
self
daily.perform
quit
self
quit
daily.perform
self
quit
accounts
simulator = @accountant.simulating_accountant(start_date: @date, accounts: accounts)
run_daily simulator, simulator.book(book.name)
activities = simulator.activities - @accountant.activities
activites
activities
activities.each { |act| act.entries }
activities.each { |act| put act.entries }
activities.each { |act| puts act.entries }
activities.each { |act| act.entries.inspect }
@cache = {}
activities.first
activities.first.entries
activities.first.entries.delete_if { |e| e.ledger != book.ledger }
quit
accounts
book
simulator = @accountant.simulating_accountant(start_date: @date, accounts: accounts)
run_daily simulator, simulator.book(book.name)
activities = simulator.activities - @accountant.activities
quit
produced
quit
produced
quit
activities
simulator = @accountant.simulating_accountant(start_date: @date, accounts: accounts)
run_daily simulator, simulator.book(book.name)
activities = simulator.activities - @accountant.activities
activities.each { |act| act.entries.delete_if { |e| e.ledger != book.ledger } }
activities.each { |act| @act = act.entries.delete_if { |e| e.ledger != book.ledger } }
@act
activities.each { |act| act.entries.select { |e| e.ledger == book.ledger } }
activities.each { |act| @act = act.entries.delete_if { |e| e.ledger != book.ledger } }
activities.entries
activities.first.entries
a = [1,2,3]
a = [[1], [2], [3]]
a.each {|b| b.delete if b.include 1 }
a.each {|b| b.delete if b.include? 1 }
a.each {|b| b.delete_if b.include? 1 }
a.each {|b| b.delete_if (b.include? 1) }
a.each {|b| b.delete_if {b.include? 1} }
a
a.each {|b| b.delete_if { |c| c.include? 1} }
a = [[[1]], [[2]], [[3]]]
a.each {|b| b.delete_if { |c| c.include? 1} }
activities.first.entries
activities.first.entries.delete_if { |e| e.ledger != book.ledger }
activities
activities.first.entries.select! { |e| e.ledger == book.ledger }
activities
activities.first.entries.select! { |e| e.ledger != book.ledger }
activities
activities.first.entries
activities.first.entries.select { |e| false }
activities.first.entries.select { |e| e.id }
activities.first.entries.select { |e| e.ledger }
activities.first.entries.select { |e| e.ledger == book.leder}
activities.first.entries.select { |e| e.ledger == book.ledger}
activities.first.entries.select! { |e| e.ledger == book.ledger}
actities
activities
activities.entries
activities.first.entries.select! { |e| e.ledger == book.ledger}
activities.first.entries.select { |e| e.ledger == book.ledger}
a = activities.first
a
a.entries
a.entries.select { |e| e.ledger == book.ledger}
a.entries.select! { |e| e.ledger == book.ledger}
a
a.entries = a.entries.select { |e| e.ledger == book.ledger}
a
quit
accounts
accountant.books
@accountant.books
produced
quit
produced
quit
produced
quit
activities
simulator.activities
@accountant.activities
quit
@accountant.activities
simulator.activities
block
run_daily
run_daily simulator.book
simulator.book
book.name
simulator
simulator.books
run_daily simulator, simulator.book(book.name)
@accountant.daily_procs
@accountant.daily_procs[book.name]
context = ActivityContext.new(simulator, book, @date, nil)
context
context.books
context.accountant
context
context.accountant
context.methods
context.actvities
context.activities
quit
produced
quit
book
helper
helper.name
helper.methods
helper.pretty_print
helper.inspect
helper.to_s
helper
helper.instance_methods
helper.instance_method
helper.included_modules
helper.methods
helper.to_yaml
helper.to_yaml_properties
helper.to_json
helper.as_json
helper.methods
helper.parent
helper.class
helper.instance_of?
helper.display
quit
account
account.id
Portfolio::LoanApplication.create_for_account_id(account.id, requested_loan_amount: 100)
visit accounts/1/
;
visit "accounts/1/"
get "accounts/1/"
quit
Portfolio::LoanApplication.create_for_account_id(account.id, requested_loan_amount: 100)
quit
Portfolio::LoanApplication
Portfolio::LoanApplication..create_for_account_id(account.id, requested_loan_amount: 100)
Portfolio::LoanApplication.create_for_account_id(account.id, requested_loan_amount: 100)
quit
application = Portfolio::LoanApplication.create_for_account_id(account.id, requested_loan_amount: 100)
quit
Portfolio::LoanApplication.create_for_account_id(account.id, requested_loan_amount: 100)
SecurityInterest.new(vehicle: account.current_vehicle, lien_status_id: LienStatus[''].id) if account.current_vehicle
la.security_interest       = SecurityInterest.new(vehicle: account.current_vehicle, lien_status_id: LienStatus[''].id) if account.current_vehicle
quit
la.security_interest       = SecurityInterest.new(vehicle: account.current_vehicle, lien_status_id: LienStatus[''].id) if account.current_vehicle
LienStatus[''].id
LienStatus.all
LienStatus[]
LienStatus["Converted for repo"]
LienStatus[""]
LienStatus["Lien perfected"]
LienStatus[""]
LienStatus[lien_status: ""]
LienStatus[nil]
quit
underwriter
underwriter.underwriting_decision
begin underwriter.underwriting_decision resque ex
  underwriter
  ;
end
begin
  underwriter.underwriting_decision
  resque Exception => ex
  puts ex.msg
end
begin
  underwriter.underwriting_decision
rescue Exception => ex
  puts ex.msg
end
begin
  underwriter.underwriting_decision
rescue Exception => ex
  puts ex
end
begin
  underwriter.underwriting_decision
  puts ex
rescue Exception => ex
  puts ex.back_trace
end
begin
  underwriter.underwriting_decision
rescue Exception => ex
  puts ex.backtrace
end
ls
underwriter
quit
loan_application.country
loan_application.region
quit
loan_application.region
quit
Region.all
Region.lookup.reload
quit
qiut
quit
Region["ID"]
underwriter.underwriting_decision.underwriting_decision_reasons.map(&:name).should include 'has_open_loan'
quit
loan_application.region
quit
loan_application.region
quit
loan_application.region
quit
loan_application.region = Region["ID"]
quit
loan_application.region
Region.all
Region.lookup.reload
quit
Region
Region.all
loan_applicaition.region
loan_application.region
quit
qui
quit
ls
@loan_application
quit
Region.all
Region["ID']
"]
Region["ID"]
Region["OK"]
Region["NV"]
Region["ID"]
Region.where( abbr: "ID")
Region["ID"]
Region.lookup
Region["WI"]
quit
Region.lookup.reload
uit
quit
Region.lookup.reload
uit
quit
regions_reload
quit
Accountant
accountant = Accountant.new
quit
accountant = Accountant.new
loan = Loan.new
loan.accountant
quit
Region.all
quit
print-accouting @accountant
print-accounting @accountant
quit
print-accounting @accountant
quit
scope = Activity.where(source_id: source_id).order(:accounting_date).includes(:entries => :entry_type).try(:references, :entries)
scope = Activity.where(source_id: source_id).order(:accounting_date).includes(:entries => :entry_type).try(:references)
scope
scope = Activity.where(source_id: source_id).order(:accounting_date).includes(:entries => :entry_type)
scope
scope.try(:references)
scope.try!(:references)
scope.try(:references)
scope
scope = scope.references(:entries) if scope.respond_to?(:references)
scope
quit
exit
quit
accountant
accountant.save!
loan.accountant
loan
loan.accountant
Activity.all
FinanceXL::Activity.all
FinanceXL::Activity.reload.all
FinanceXL::Activity.all
accountant
@activities = ActivitySet.new(1, nil, nil)
@activities = FinanceXl::ActivitySet.new(1, nil, nil)
FinanceXl::Activity
FinanceXl::ActivitySet
FinanceXl::Accountant::ActivitySet
FinanceXl::Accountant
FinanceXL::Accountant
FinanceXL::Accountant::ActivitySet
FinanceXL::ActivitySet
FinanceXL::ActivitySet.new(1, nil, nil)
FinanceXL::ActivitySet.all
FinanceXL::ActivitySet.new(1, nil, nil)
scope = Activity.where(source_id: 1).order(:accounting_date).includes(:entries => :entry_type)
scope = FinanceXL::Activity.where(source_id: 1).order(:accounting_date).includes(:entries => :entry_type)
scope = scope.references(:entries) if scope.respond_to?(:references)
scope
quit
loan.accountant
quit
accountant
loan.accountant
quit
scope
Activity.all
quit
@activities
quit
source_id
@activities
quit
FinanceXL::Activity.all
accountant
accountant.save
accountant.save!
FinanceXL::Activity.all
accountant
loan = Loan.where(id: loan_id).first_or_create!
loan.accountant
scope
quit
@activities
loaded?
quit
@activities
quit
accountant.save!
loan.reload
loan.accountant
scope
quit
@activities
quit
@activities
quit
@activities
quit
accountant.save!
loan.reload
loan.accountant
scope
quit
@activities
quit
scope
loaded?
quit
@activities.loaded?
@activities.activities
quit
@activities.loaded?
@activities.activities
@activities.activities.type?
@activities.activities.type
@activities.activities.class
quit
scope.to_a
quit
@activities
quit
accountant
loan.accountant
quit
Loan.first
l = _
l.accountant
quit
loan.accountant
loan = Loan.first
loan.accountant
loan.accountant.activity :issue 20
loan.accountant.activity :issue, 20, Date.today
loan.accountant.activity :issue, Date.today, 20
loan.accountant
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities
loan.accountant.activities.loaded?
loan.accountant.activities.all
loan.accountant.activities.loaded?
quit
loan.accountant.activities.loaded?
loan = Loan.first
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities
loan.reload.accountant.activities
quit
loan = Loan.first
loan.accountant
loan.accountant.activities.size
loan.accountant.activities
quit
Loan.all
quit
Loan.all
quit
Loan.all
quit
Loan.all
quit
Loan.al
Loan.all
quit
Loan.all
quit
Loan.all
quit
Loan.first
l = _
l.accountant
DatabaseCleaner.clean
Loan.all
quit
Loan.all
quit
DatabaseCleaner.start
DatabaseCleaner.clean
Loan.all
quit
Loan.all
quit
Loan.all
quit
loan.accountant.balances
loan.accountant
loan.accountant.accounts
loan.accountant.accounts.principal
loan.accountant.accounts.at :principal
quit
loan.accountant
loan.accountant.accounts[account]
loan.accountant.accounts[account.to_sym]
quit
loan = Loan.first
loan.accountant
quit
loan.accountant
loan = Loan.first
loan.accountant
quit
loan.accountant
loan = Loan.first
loan.accountant
quit
loan = Loan.first
loan.accountant
quit
new_scenario = fetch_and_delete row, "Scenario"
row
row.values
row.all
quit
row
quit
account
loan_id
new_scenario
"".empty?
current_scenario = new_scenario.empty? ? current_scenario : new_scenario
current_scenario
quit
new_scenario
nil.empty?
quit
current_scenario
principal
account
loan_id
expected_amount
actual_amount
quit
account
current_scenario
row
quit
current_scenario
one = nil || 1
new_scenario
quit
current_scenario
quit
current_scenario = fetch_and_delete row, "Scenario" || current_scenario
current_scenario
current_scenario = fetch_and_delete row, "Scenario" || current_scenario
quit
row
quit
row
quit
fetch_and_delete row, "Scenario" || current_scenario
current_scenario
quit
@example_count
exception
super
parent
..
methods
example
example.finish
Example.finish
RSpec::Core::Example.finish
RSpec::Core::Example
finish
example.finish
example.instance_eval { finish }
example
example.instance_eval
example.instance_eval finish
example.instance_eval {RSpec::Core::Example.finish}
RSpec::Core::Example.methods
example
methods
classes
class
end
example.send(:finish)
finish
example.__send__ :finish, reporter
reporter
methods
example.__send__ :finish, nil
reporter
@reporter
report
reporter
@configuratoin
@configuratin
@configuration
Rspec
Rspec::Configuration
Rspec::
Conf
RSpec::Conf
RSpec::Configuration
RSpec::configuration
RSpec::configuration.reporter
example.__send__ :finish, Spec::configuration.reporter
example.__send__ :finish, RSpec::configuration.reporter
quit
RSpec::configuration.reporter.example_count
RSpec::configuration.reporter
RSpec::configuration.reporter.example_passed
RSpec::configuration.reporter.example_started
RSpec::configuration.reporter.example_started example
quit
RSpec::configuration.reporter
RSpec::configuration.reporter.send(:example_count)
RSpec::configuration.reporter
RSpec::configuration.reporter.duration
RSpec::configuration.reporter["duration"]
RSpec::configuration.reporter.instance_variable_get(:@example_count)
RSpec::configuration.reporter.instance_variable_set(:@example_count,2)
RSpec::configuration.reporter.instance_variable_get(:@example_count)
quit
Loan
Loan.all
loan
Loan
Loan.all
Loan.create {id: 1}
Loan.create ({id: 1})
Loan
Loan.all
Loan.accountant
Loan.find 1
l = _
l.accountant
l.activity :issue, 20
l.accountant.activity :issue, 20
l.accountant
l.accountant.activities
l.accountant.activities.size
l.accountant.save!
l.accountant.activities.size
l.accountant
l.accountant.activities.all
l.accountant.activity :issue, Date.today, 20
l.accountant.activities.all
l.accountant.save
l.accountant.save!
l.accountant
l
l.accountant
i = accountant.activities.find { |a| a.type?(:issue) }
i = l.accountant.activities.find { |a| a.type?(:issue) }
i.eff_date
i.effective_date
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
l.accountant.activity :cancel, i
l.accountant.activity :cancel, i.accounting_date
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
l.accountant.activity :cancel, i, i.accounting_date
l.accountant.activity :cancel, i.accounting_date, i.activity_amount
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
quit
l = Loan.find 1
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
i
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
current_activity
today
cancel_actitivity
cancel_activity
cancel_activity self, current_activity.cancels_activity_id, today
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
quit
current_activity
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date
current_activity
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
i
i.activity_id
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, i.activity_id
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, i.activity_id
quit
current_activity.cancels_activity_id
current_activity
cancel_activity
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, i.activity_id
current_activity
current_activity.save!
current_activity
current_activity.cancels_activity_id
current_activity
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
i
l.accountant.accountant.simulate do
  cancel repay.accounting_date + 3, repay.activity_amount,
  repay.accounting_date + 3, nil, repay.activity_id
end
l.accountant.simulate do
  cancel repay.accounting_date + 3, repay.activity_amount,
  repay.accounting_date + 3, nil, repay.activity_id
end
repay = i
l.accountant.simulate do
  cancel repay.accounting_date + 3, repay.activity_amount,
  repay.accounting_date + 3, nil, repay.activity_id
end
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
i.payment
i.payment_id
i.payment_id = 1
i.save!
i
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, i.activity_id
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, i.activity_id
current_activity
current_activity.cancels_activity_id
amount
activity
current_activity.cancels?
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
current_activity.cancels_activity_id
cancel_activity current_activity.id, current_activity.cancels_activity_id, today
cancel_activity self, current_activity.cancels_activity_id, today
cancel_activity current_activity, current_activity.cancels_activity_id, today
l
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
l.accountant.save
l.accountant.save!
quit
l = Loan.find 1
i = l.accountant.activities.find { |a| a.type?(:issue) }
l.accountant.activity :cancel, i.accounting_date, i.activity_amount, i.effective_date, nil, i.activity_id
l.accountant.save!
l.accountant
l
l.accountant
l.accountant.save!
quit
Activities.all
Activity.all
FinanceXL::Activity.all
FinanceXL::Activity.last
FinanceXL::Activity.last.delete!
FinanceXL::Activity.last.destroy!
Entries.all
FinanceXL::Entry
FinanceXL::Entry.all
FinanceXL::Entry.last.destroy
FinanceXL::Entry.all
FinanceXL::Activity.last.destroy!
l = Loan.find 1
l.accountant
l.accountant.cancel_activity(:issue, today)
l.accountant.cancel_activity(:issue, Date.today)
l.accountant.cancel_acitivity(:issue, Date.today)
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today)
l.accountant
l.accountant.save!
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today-1)
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today-1)
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today-1)
activity_to_cancel
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today-1)
quit
l = Loan.find 1
l.accountant.cancel_activity(:issue, Date.today-1)
l.accountant.cancel_activity(:issue, Date.today)
l.accountant
l.accountant.save!
l.accountant
l.accountant.activities
l.accountant.activities.all
l.accountant.activities.first
l.accountant.activities.first.cancelled?
quit
l = Loan.find 1
l
l.accountant
l.accountant.accounts
quit
\q
quit
@simulator_schedule ||= FinanceXL::Schedule.new(accountant.schedule.after(start_date))
start_date
quit
@simulator_schedule ||= FinanceXL::Schedule.new(accountant.schedule.after(start_date))
quit
FinanceXL::Schedule.new(accountant.schedule.after(start_date))
quit
accountant.schedule.after(start_date)
quit
accountant.schedule.after(start_date)
@simulator_schedule = []
quit
@simulator_schedule ||= FinanceXL::Schedule.new()
quit
accountant.schedule.after(start_date)
quit
@simulator_schedule ||= FinanceXL::Schedule.new(accountant.schedule.after(start_date)).tap do |schedule|
  @introduce_activities.each do |act|
    next if schedule.includes_activity?(act)
    schedule.schedule_activity(act)
  end
end
accountant
accountant.activities
accountant.activities.all
nullify_activities
accountant.activities
accountant.activities.all
accountant.activities.all.first
accountant.activities.all.first.cancelled?
quit
@simulator_schedule
quit
@simulator_schedule
accountant.schedule.after(start_date)
nullify_activities
accountant.activities.effective_after(start_date).each
accountant.activities.effective_after(start_date)
start_date
accountant.activities
accountant.activities.all
accountant.activities.effective_after(start_date)
accountant.activities.all.each(&:cancelled?}
accountant.activities.all.each(&:cancelled?)
accountant.activities.all.each{ puts cancelled? }
accountant.activities.all.each{|act| puts act.cancelled? }
nullify_activities
accountant.activities.all.each{|act| puts act.cancelled? }
quit
@original_activities
@simulated_activities
@simulated_activities.first
@simulated_activities.first.cancelled?
@original_activities.first.cancelled?
nullify_activities
@original_activities.first.cancelled?
accountant.activities.reject(&:cancelled?)
nullify_activities
accountant.activities
accountant.activities.all.each { |act| act.cancelled? }
accountant.activities.all.each { |act| puts act.cancelled? }
nullify_activities
accountant.activities.all.each { |act| puts act.cancelled? }
quit
@original_activities
accountant.activities.
x
accountant.activities
accountant.activities.all
accountant.activities.all.first
accountant.activities.all.first.cancelled?
nullify_activities
accountant.activities.all.first.cancelled?
quit
accountant
accountant.activities.all.first.cancelled?
nullify_activities
accountant.activities.all.first.cancelled?
accountant
accountant.activities.all.first.cancelled?
quit
accountant
accountant.activities.all
accountant.activities.all.first.cancelled?
nullify_activities
accountant.activities.all.first.cancelled?
@accountant.reload
self.reload
accountant.reload
accountant.activities
accountant.activities.reload
accountant.activities.activities
accountant.activities.activities.reload
accountant.activities.activities
quit
accountant.activities
accountant.activities.all
accountant.activities.all.first
accountant.activities.all.first.cancelled?
Actvities
FinanceXL::Activities
FinanceXL::Activity
FinanceXL::Activity.all
FinanceXL::Activity.table_name
quit
@original_activities
nullify_activities
@original_activities
nullify_activities
accountant
accountant.activities.reject(&:cancelled?)
nullify_activities
accountant.activities.reject(&:cancelled?)
accountant.activities.effective_after(start_date).each { |act| act.cancelled_date = Date.today }
accountant.activities.reject(&:cancelled?)
accountant.activities.effective_after(start_date).each { |act| act.cancelled_date = Date.today }
accountant.activities.effective_after(start_date)
accountant.activities.effective_after(start_date).each { |act| act.cancelled_date = Date.today }
accountant.activities.effective_after(start_date).each { |act| act.cancelled? }
accountant.activities.effective_after(start_date).each { |act| puts act.cancelled? }
accountant.activities.reject(&:cancelled?)
accountant.activities.all.reject(&:cancelled?)
accountant.activities.reject(&:cancelled?)
accountant.activities.effective_after(start_date).each { |act| puts act.cancelled? }
accountant.activities.effective_after(start_date).each { |act| act.cancelled_date = Date.today }
accountant.activities.effective_after(start_date).each { |act| puts act.cancelled? }
accountant.activities.reject(&:cancelled?)
accountant.activities.effective_after(start_date).each { |act| puts act.cancelled? }
accountant.activities.reject(&:cancelled?)
accountant.activities.effective_after(start_date).each { |act| puts act.cancelled? }
accountant.activities.reject(&:cancelled?)
accountant
accountant.activities
accountant.activities.all
accountant.activities.all.first.cancelled?
nullify_activities
accountant.activities.all.first.cancelled?
quit
accountant
quit
accountant
@original_activities
nullify_activities
accountant
accountant.activities
accountant.activities.all
accountant.activities.first
accountant.activities.first.cancelled?
nullify_activities
accountant.activities.first.cancelled?
accountant
quit
accountant
accountant.activities.first.cancelled?
nullify_activities
accountant.activities.first.cancelled?
accountant
quit
accountant
accountant.activities
accountant.activities.all
accountant.activities.reject(&:cancelled?)
quit
@original_activities
quit
@original_activities
@simulated_activities
@simulated_activities = simulator.activities.select { |act| act.effective?(time_period) }
quit
@original_activities
@simulated_activities = simulator.activities.select { |act| act.effective?(time_period) }
quit
accountant
accountant.activities.reject(&:cancelled?)
quit
accountant
accountant.activities.reject(&:cancelled?)
quit
accountant.activities
accountant.activities.reject(&:cancelled?)
quit
accountant.activities
quit
accountant
quit
accountant
accountant.activities.each
accountant.activities.each { |act| act.entries.each { |e| puts e.inspect }}
accountant.activities.reject(&:cancelled?).each { |act| act.entries.each { |e| puts e.inspect }}
quit
acts
acts = accountant.activities.effective_by(date)
quit
accountant
quit
accountant
accountant.activities.each { |act| act.entries.each { |e| puts e.inspect }}
quit
act
act.entries.each(&:destroy)
quit
act
act.entries.each(&:destroy)
quit
act
act.entries.each(&:destroy)
act.entries
act.entries.each(&:destroy!)
act
act.save!
act
act.reload
quit
loan.accountant
loan.accountant.activities
loan.accountant.activities.all
quit
loan.accountant
loan.accountant.accounts
loan.accountant.activities
loan.accountant.activities.reject(&:cancelled?)
loan.accountant.activities.reject(&:cancelled?).sorty_by(:effective_date)
loan.accountant.activities.reject(&:cancelled?).sort_by(:effective_date)
loan.accountant.activities.reject(&:cancelled?).sort_by(&:effective_date)
quit
loan
loan = Loan.find 20
loan.accountant
loan = Loan.find 21
loan.accountant
quit
loan = Loan.find 21
loan.accountant
quit
loan = Loan.find 21
loan.accountant
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities.all.reject(&:cancelled?)
loan.accountant.activities.all.reject(&:cancelled?).sort_by(&:effective_date)
quit
accountant.activities
accountant.activities.all
accountant.activities.activities.reject(&:cancelled?).select { |act| act.effective_date > start_date }
quit
additional_activities
quit
loan.accountant
loan = Loan.find 21
loan.accountant
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities.all.reject(&:cancelled?)
quit
accountant.activities.activities.reject(&:cancelled?).select { |act| act.effective_date > start_date }
accountant.activities.all
start_date
accountant.activities.activities.reject(&:cancelled?)
quit
additional_activities
quit
qquit
quit
accountant.schedule.after(start_date)
quit
qui
quit
@accountant
@accountant.activities
@accountant.activities.all
@accountant.accounts
@accountant.activities.first
@accountant.activities.first.reload
@accountant.activities.all
@accountant.activities.activities
@accountant.activities.activities.all
@accountant.activities
@accountant.activities.last
@accountant.activities.activities.last
@accountant.activities.activities.last.reload
quit
@accountant.activities.first
@accountant.activities.first.entries
@accountant.activities.first.entries.each(&:destroy!)
@accountant.activities.first.entries
@accountant.activities.first
@accountant.activities.first.entries.each(&:destroy!)
@accountant.activities.first
@accountant.activities.first.reload
@accountant.save!
@accountant.activities.first.entries.each(&:destroy!)
@accountant.activities.first.reload
quit
@accountant
@accountant.save!
@accountant.activities.first.entries.each(&:destroy!)
@accountant
@accountant.activities.first.reload
@accoutant
@accountant
@accountant.activities
@accountant.activities.reject(&:cancelled)
@accountant.activities.reject(&:cancelled?)
@accountant.accounts
@accountant.activities
@accountant.activities.all
@accountant.activities.all[2]
@accountant.activities.all1]
@accountant.activities.all[1]
@accountant.activities.all[1].entries
@accountant.activities.all[1].entries.each(&:destroy!)
@accountant.accounts
@accountant.activities.all[2].entries.each(&:destroy!)
@accountant.accounts
quit
@accountant.activities
@accountant.activities.first.reload
@accountant.save!
@accountant.activities.select(&:cancelled?)
quit
book
quit
loan
loan.accountant
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.calculate_account_balances
loan.accountant.calculate_account_values
loan.accountant.activities.reject(&:cancelled?)
loan.accountant.activities.reject(&:cancelled?)[3]
loan.accountant.activities.reject(&:cancelled?)[3].entries
quit
books
books.size
books.each do |book|
end
activity
activity.cancels?
quit
qui
quit
@accountant
@accountant.activities
@accountant.activities.all
;q
quit
e
e.destroy!
e.destroy
e.delete
e.delete!
e.delete
e
act
act.entries.delete_all
act.entries
quit
@accountant
@accountant.activities
@accountant.activities.all
@accountant.activities.all[2]
@accountant.activities.all[3]
@accountant.activities.all[3].entries
@accountant.calculate_account_values
quit
accountant
@accountant
@accountant.activities
@accountant.activities.entries
@accountant.activities.all.entries
@accountant.activities.first
@accountant.activities.first.entries
quit
@accountant
quit
@accountatn
@accountant
quit
@accountant
quit
@accountant
quit
@accountant
@accountant.calculate_account_values
sum(date)
quit
@accountant
@accountant.calculate_account_values
sum
accounts
sum(date).each { |account, amount| accounts[account] = amount }
accounts
sum
@accounts
quit
@accountant
@accountant.calculate_account_values
quit
@accountant
quit
initial_values
quit
initial_values
accounts
@initial_values
@initial_values = @accounts.dup
@initial_values
quit
accounts
quit
accounts
accounts[name]
accounts
quit
@accountant
quit
@accountant
@accountant.calculate_account_values
sum(date).each { |account, amount| accounts[account] = initial_values[account] + amount }
sum
initial_values
accounts
quit
@accountant
@accountant.activities
@accountant.activities.select{ |act| act.type == :interest }
@accountant.activities.select{ |act| act.type? == :interest }
@accountant.activities.select{ |act| act.activity_type
}
@accountant.activities.select{ |act| act.activity_type == :interest }
@accountant.activities.select{ |act| act.activity_type == "interest" }
ActivityType
FinanceXL::ActivityType
FinanceXL::ActivityType.all
@accountant.activities.select{ |act| act.activity_type == 1109 }
@accountant.activities.select{ |act| act.activity_type_id == 1109 }
quit
activity = activity_effective @accountant.activities, type, eff_date
activity.entries
quit
activity = activity_effective @accountant.activities, type, eff_date
activity.entries
quit
activities.size
activities
quit
activities
activities.size
activities.size.should == 1
activity = activities.first
activity.entries
accountant
@accountant
@accountant.activities
@accountant.activities.all
@accountant.activities.all.reject(&:cancelled)
@accountant.activities.all.reject(&:cancelled?)
quit
activity = activity_effective @accountant.activities, type, eff_date
activity.entries
quit
@accountant
@accountant.activities
@accountant.activities.all
@accountant.activities.all.reject(&:cancelled?)
@accountant.simulate do finish, 2012-10-05 end
@accountant.simulate do 
  finish, 2012-10-05
end
@accountant.simulate do :finish, 2012-10-05 end
@accountant.simulate do
  :finish, 2012-10-05
end
@accountant.simulate do
  :finish 2012-10-05
end
@accountant.simulate do
  :finish Date.parse(2012-10-05)
end
quit
@accountant.activities
@accountant.activities.reject(&:cancelled?)
quit
schedule
quit
date
quit
date
@accountant
@accountant.activities.reject(&:cancelled?)
date
quit
@date
quit
accountant
@accountant
self
quit
self
quit
self
quit
self
quit
self
quit
self
quit
self
quit
@accountant.activities
@accountant.activities.all
quit
@accountant.activities
@accountant.activities.all
@accountant
quit
self
quit
self
self.activities.all
calculate_account_values
self
quit
self
calculate_account_values
quit
@accountant
@accountant.calculate_account_values
quit
@accountant.activities
@accountant.activities.all
quit
principal_accounts
balance = principal_accounts.map { |a| accounts[a] }.sum
accrued = interest_accounts.map { |a| accounts[a] }.sum
accounts[:principal_account]
principal_accounts.map { |a| accounts[a] }
principal_accounts.map { |a| puts a }
accounts
accounts[:princiapl_current]
accounts[:principal_current]
quit
accounts[:principal_current]
quit
accounts
initial_values
quit
!accountant.activities
@accountant.activities
quit
issue_activity
issue_activity.entries
quit
loaded?
@activities
quit
@accountant
@accountant.activities
@accountant.activities.all
@accountant.calculate_account_values
quit
loaded?
activities
quit
loaded?
activities
copy @activities.select { |a| a.effective_date <= date }.reject(&:adjusted?)
date
quit
date
quit
activities
activities.reject!(&:cancelled?)
activities
quit
loan
loan.accountant
loan.accountant.calculate_account_values
loan.accountant.activities.all
quit
accountant
accountant.activities
accountant.activities.all
quit
accountant
accountant.activities
accountant.activities.all
adjusting_activity
nullify_activities
quit
accountant
accountant.activities.all
l = Loan.find 20
acc = l.accountant
acc = l.accountant.activities
acc = l.accountant.activities.all
quit
@simulator_schedule
quit
@simulator_schedule
quit
@simulator_schedule
quit
accountant
accountant.activities.all
quit
accountant.activities.all
@simulator_schedule
nullify_activities
quit
loan
loan.accountant
loan.accountant.activities.all
loan.accountant.calculate_account_values
quit
loan.accountant.activities.all
loan.accountant.accounts
loan.accountant.calculate_account_values
loan.accountant.accounts
quit
accountant
accountant.activities
accountant.activities.all
accountant.calculate_account_values
accountant
quit
accountant
accountant.calculate_account_values
quit
accountant
acc = loan.accountant
loan
acc = loan.accountant
quit
loan.accountant
loan.accountant.activities.all
quit
@activities
@activities.select { |a| a.effective_date <= date }
loaded?
activities
copy @activities.select { |a| a.effective_date <= date }
copy @activities.select { |a| a.effective_date <= date }.reject(&:adjusted?)
copy @activities.where('effective_date <= ? and adjusted_date is null', date)
quit
@activities
quit
@activities
quit
@activities
quit
accountant
acc = loan.accountant
quit
acc = loan.accountant
quit
loan.accountant.activities.effective_by
loan.accountant.activities.effective_by(nil)
quit
loan = Loan.find 20
loan.reload
loan.accountant
loan.reload
loan.accountant
loan.accountant.activities.effective_by(nil)
quit
loan.reload
loan.accountant
quit
loan_id
quit
loan.accountant
acc = Accountant.new(source_id: 16, schedule: AccountingSchedule.new(Loan.find(16)))
acc.calculate_account_values
acc.activities
acc.activities.all
accountant.schedule
acc.schedule
acc.schedule.relevant_activities
quit
@simulator_schedule
@remove_activities.each { |act|  @simulator_schedule.remove_activity(act) }
@simulator_schedule
@remove_activities
quit
activity
activity.cancels_activity_id
quit
self
quit
source_id
activity
activity.cancels_activity_id
quit
activity
quit
activity
quit
qui
quit
loan.accountant
loan.calculate_account_values
loan.accountant.calculate_account_values
loan.accountant.activities.all
quit
schedule
quit
accountant.schedule
accountant.schedule.after(start_date)
adjusting_activity
quit
@simulator_schedule ||= FinanceXL::Schedule.new(accountant.schedule.after(start_date)).tap do |schedule|
  @introduce_activities.each do |act|
    next if schedule.includes_activity?(act)
    schedule.schedule_activity(act)
  end
end
nullify_activities
@remove_activities.each do |act|
  @simulator_schedule.remove_activity(act)
end
@simulator_schedule
quit
schedule
quit
simulator
accountant
accountant.schedule
accountant.schedule.relevant_entries
accountant.schedule.relevant_events
@simulator_schedule
quit
accountant.schedule
accountant.schedule.after(start_date)
accountant.activities
accountant.activities.all
accountant.activities.all.first.cancels?
accountant.schedule.relevant_activities
accountant.schedule.relevant_events
quit
accountant.schedule
accountant.schedule.relevant_events
quit
qui
quit
accountant.activities
accountant.activities.all
accountant.activities.all[2]
accountant.activities.all[2].entries
quit
accountant.activities.all
loan.accountant.activities.all
quit
adjusted_activities
quit
activities.push activity unless (activity.retroactive?)
activity
quit
@current_activity
original_current_activity
quit
@current_activity = original_current_activity
quit
@current_activity = original_current_activity
quit
original_current_activity
@current_activity = original_current_activity
quit
@current_activity = original_current_activity
quit
@current_activity = original_current_activity
quit
@current_activity
activity
quit
activity
quit
activity
quit
activity
quit
activity
quit
activity
quit
activity
quit
accountant.activities
accountant
accountant.schedule
quit
task_cd
quit
adjusting_activity
quit
adjusting_activity
quit
adjusting_activity
quit
@simulator_schedule
quit
@simulator_schedule
quit
@simulator_schedule
accountant.schedule.after(start_date)
@introduce_activities
FinanceXL::Schedule.new(accountant.schedule.after(start_date))
accountant
start_date
accountant.schedule
@simulator_schedule
quit
@simulator_schedule
quit
@simulator_schedule
accountant.schedule.after(start_date)
schedule
quit
@simulator_schedule
@simulator_schedule ||= FinanceXL::Schedule.new(accountant.schedule.after(start_date)).tap do |schedule|
  @introduce_activities.each do |act|
    next if schedule.includes_activity?(act)
    schedule.schedule_activity(act)
  end
end
@introduce_activities
@simulator_schedule
FinanceXL::Schedule.new(accountant.schedule.after(start_date))
accountant.schedule.after(start_date)
accountant.relevant_activities
accountant.schedule.relevant_activities
accountant.activities.all
quit
@simulator_schedule
quit
accountant.schedule.after(start_date)
accountant.activities
accountant.activities.all
quit
adjusting_activity
quit
accountant
accountant.adjusting
adjusting_activity
quit
accountant.adjusting
adjusting_activity
quit
accountant
quit
accountant
quit
block_given?
@adjusting
accountant
self
quit
accountant.adjusting
quit
simulator
accountant
quit
accountant.adjusting
quit
accountant.adjusting
@adjusting
quit
accountant.adjusting
quit
@adjusting
quit
accountant
quit
loan.accountant
loan.accountant.calculate_account_values
loan.accountant.activities.all
quit
loan.accountant.activities.all
quit
loan.accountant.activities.all
loan.accountant.activities.all[1].retroactive?
quit
adjusted_activities
accountant
accountant.activities
accountant.activities.all
quit
accountant.activities
adjusted_activities
quit
accountant.activities
accountant.activities.all
quit
@simulator_schedule
quit
adjusted_activities
quit
@simulator_schedule
quit
@simulator_schedule
accountant.activities
adjusting_activity
;q
quit
args
quit
args
quit
args
quit
@simulator_schedule
quit
@simulator_schedule
quit
adjusted_activities
quit
@simulator_schedule
quit
adjusted_activities
@simulator.activites
@simulator.activities
start_date
@simulator.schedule
@simulator.adjusting
end_date
@simulator.activities
quit
@simulator_schedule
quit
adjusted_activities
quit
@simulator_schedule
quit
@simulator_schedule
quit
activity
quit
adjusted_activities
quit
@simulator_schedule
quit
activity
quit
activity
quit
activity
quit
adjusted_activities
quit
activities
activities.all
activity
quit
activity
quit
adjusted_activities
quit
adjusted_activities
quit
loan.activities
loan.accountant.activities
loan.accountant.activities.all
loan.accountant
loan.accountant.calculate_account_values
quit
loan.accountant
loan.accountant.calculate_account_values
loan.accountant.activities.all
loan.accountant.calculate_account_values
quit
loan.accountant
loan.accountant.calculate_account_values
loan.accountant.activities
loan.accountant.activities.effective_by
loan.accountant.activities.effective_by nil
loan.accountant.activities
loan.accountant.activities.effective_by nil
loan.accountant.activities.
all
loan.accountant.activities.effective_by nil
loan.accountant.calculate_account_values
quit
loan.accountant.calculate_account_values
loan.accountant.activities.effective_by nil
loan.accountant.calculate_account_values
quit
loan
loan.accountant
loan.accountant.activities
loan.accountant.activities.activities
loan.accountant.activities.activities.reject(&:adjusted?)
loan.accountant.calculate_account_values
loan.accountant.activities.all.reject(&:adjusted?)
loan.accountant.calculate_account_values
quit
accounts
accounts.empty?
books.any? { |book| book.accounts.empty? }
self.accounts
calculate_account_values(@start_date) if books.any? { |book| book.accounts.empty? }
self.accounts
self
quit
self
quit
accountant
quit
accountant
quit
accountant
quit
accountant
quit
loan.accountant
loan.accountant.activities
loan.accountant.start_date
quit
calculate_account_values(@start_date,pry)
books
books.first.sum!
books.first
books.first.sum
books[:financial]
books[1]
books[0]
books.
a
books[0]
books[0].sum!
books[0].sum! nil
books.each { |book| book.sum! date }
books.each { |book| book.sum! nil }
quit
books[0]
self.activities.effective_by nil
self
calculate_account_activities
calculate_account_values
quit
calculate_account_values
self.activities.effective_by nil, true
all.reject(&:adjusted?) if date.nil?
loaded?
quit
books[0].sum
books[0].sum nil, pry
books[0].sum nil, true
quit
loan
today
loan
quit
Date
Date.today
Date.current
today
accountant
Time
Time.now
Date(Time.now)
Date.parse(Time.now)
Date.parse(Time.now.strftime('%Y/%m/%d'))
Date.now
Date.today
Date.current
effective_date
eff_date
accountant.activity :issue, Date.current, loan.amount, eff_date, payment.id
quit
Date.current
loan.next_available_disbursement_date
quit
eff_date
quit
eff_date
Date.current
quit
eff_date
Date.current
quit
Date.current
eff_date
quit
status
employment_verification = params[:employment_verification] || {}
employment_verification = employment_verification.each_with_object({}) do |(key, value), memo| memo[key.to_sym] = value end
transition_loan_application status, employment_verification
find_loan_application_by_loan_number
Region.lookup
cd Region.lookup
ls -l 
ls -v
show-source clear
clear
exit
Region.lookup
whereami
exit
whereami
wheraemi
whereami
Region.lookup.reload
whereami
employment_verification = params[:employment_verification] || {}
employment_verification = employment_verification.each_with_object({}) do |(key, value), memo| memo[key.to_sym] = value end
transition_loan_application status, employment_verification
find_loan_application_by_loan_number
@loan_application.send to_status, args
to_status
args
show-source @loan_application.decline
@loan_application.loan_application_status
Region.lookup
Pry.editor = 'vim'
PreapprovedLoanOffer
edit-method PreapprovedLoanOffer.find_valid_offer
edit PreapprovedLoanOffer.find_valid_offer
wherami
whereami
@loan_application.send to_status, args
caller
exit
Region.all
quit
Region.all
quit
account_attrs
Region['DE']
Region.all
whereami
Region.cache
Region['VA']
quit
Region.all
quit
Region.all
quit
Region.all
exit
Region.all
uit
quit
Region.all
quit
Region.all
quit
Region.all
uit
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
uit
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
uit
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
Region
FinanceXL::Region
FinanceXL
FinanceXL::Region
quit
Region.all
quit
Region.all
Region['VA']
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
quit
Region.all
whereami
account.address.regoin
account.address.region
@example.metadata
@example.metadata.keys
db - cache
cache - db
quit
data
account
create_for account, data
@vehicle
ls @vehicle
account.with_vehicle @vehicle
account.id
create_for account, data
described_class.new(account, data)
described_class.new(account, data).call
data
lien_status_id: LienStatus[''].id
LienStatus[''].id
LienStatus.all
LienStatus['']
require 'lien_status'
require 'LienStatus'
require 'lien_status'
require 'models/lien_status'
require 'app/models/lien_status'
require 'lien_status.rb'
quit
product
product_name
products
Product.lookup
Product.lookup.reload
whereami
ls -v
ls -v --grep after
ls -v --grep end
quit
data
CreateLoanApplication.new(@account, data).call
@account
whereami
CreateLoanApplication.new(@account, data).call
Product
Product.all
Product.lookup
Product.lookup.reload
whereami
@account
@account.underwriter
Product.all.map { |product| underwriter product }
cd CreateLoanApplication
Product.all.map { |product| underwriter product }
Product.all
quit
Product.all
quit
print-accounting loan
quit
print-accounting simulator
@original_activities
@simulated_activities
@additional_activities
@adjustment_entries
quit
print-accounting simulator
print-accounting accounting
print-accounting accountant
adjusting_activity
quit
additional_activities
additional_activities.entries
additional_activities.first.entries
additional_activities.first.entries.first
additional_activities.first.entries.first.ledger
quit
print-accounting accountant
adjusting_activity
@simulated_activities
@additional_activities
@adjustment_entries
print-accounting @simulator
quit
additional_activities
print-accounting simulator
print-accounting accountant
quit
print-accounting accountant
qui
quit
print-accounting loan
quit
print-accounting loan
loan.accounting.interest_rate
loan.accounting
loan.accounting.accountant
loan.accounting { interest_rate
}
loan.interest_rate
quit
print-accounting
print-accounting loan
quit
print-accounting loan
balances
loan.accounting.balances
loan.accounting { |acc| acc.balances }
quit
print-accounting accountant
adjusting_activity
print-accounting simulator
@simulator_schedule
accountant.schedule.between(start_date, end_date)
accountant.schedule
start_date
end_date
today
Date.today
print-accounting accountant
print-accounting simulator
accountant.schedule.between(start_date, end_date)
quit
print-accounting loan
ls
whereami
@loan
metadata
loan
self
self.loan
type
print-accounting
whereami
assert_balances outstanding: '104.35', past_due: '69.80'
$its_pry_time = true
assert_balances outstanding: '104.35', past_due: '69.80'
$its_pry_time
show-source assert_balances
edit assert_balances
pry.editor =vim
pry.editor = vim
edit assert_balances
Pry.editor = 'vim'
edit assert_balances
assert_balances outstanding: '104.35', past_due: '69.80'
metadata[:age_until]
expected_balances
whereami
edit assert_balances
assert_balances outstanding: '104.35', past_due: '69.80'
loan
$its_pry_time
quit
whereami
quit
whereami
quit
whereami
assert_balances outstanding: '104.35', past_due: '69.80'
loan
quit
whereami
edit assert_predicted_balances
assert_balances outstanding: '104.35', past_due: '69.80'
edit assert_predicted_balances
show-source assert_predicted_balances
quit
edit assert_predicted_balances
whereami
assert_balances outstanding: '104.35', past_due: '69.80'
loan
expected_balances
specify "has a#{predicted} #{name} balance of $#{balance.to_s}#{on_date}" { loan.balances_on(date)[name].should == balance }
specify "has a#{predicted} #{name} balance of $#{balance.to_s}#{on_date}" do loan.balances_on(date)[name].should == balance end
edit assert_predicted_balances
whereami
exit
whereami
edit
quit
exit
ququit
exit
quit
print-accounting loan
name
loan.balances_on(date)[name]
balance
loan.balances_on(date)[name].should == balance
quit
loan.balances_on(date)[name]
balance
loan.balances_on(date)[name].should == balance
quit
loan.balances_on(date)[name].should == balance
quit
loan.balances_on(date)[name].should == balance
print-accounting loan
quit
print-accounting accountant
adjusting_activity
print-accounting simulator
whereami
additional_activities
adjustment_entries
exit
quit
@date
schedule
quit
canceled
activity
quit
@date
quit
produced
quit
@date
quit
produced
quit
print-accountant accountant
print-accounting accountant
print-accounting @accountant
@date
@accountant.accounts
quit
produced
quit
@accountant.accounts
print-accounting @accountant
quit
print-accounting @accountant
quit
print-accounting @accountant
quit
produced
quit
print-accounting @accountant
quit
produced
print-accounting @accountant
quit
@accountant
print-accounting @accountant
quit
produced
print-accounting @accountant
quit
@accountant.calculate_account_values
quit
print-accounting simulator
simulator.balances
quit
accountant.accounts
simulator.accounts
quit
simulator.accounts
accountant.accounts
print-accounting simulator
print-accounting accountant
print-accounting -h
print-accounting accountant -b
accountant.push adjusting_activity
accountant.activities.push adjusting_activity
print-accounting accountant -b
print-accounting simulator -b
print-accounting accountant -b
print-accounting accountant -b -l fin
print-accounting -h
print-accounting simulator -a def
print-accounting simulator -a def -b
print-accounting accountant -b -l fin
adjustment_entries
@original_activities
@simulated_activities
adjusting_activities
adjusting_activity
adjusting_activity.entries.to_a
adjusting_activity.entries.to_a.size
print-accounting accountant -b -l fin
@original_activities
exit
quit
@original_activities
@simulated_activities
print-accounting accountant -b -l fin
accountant.activities.push adjusting_activity
print-accounting accountant -b -l fin
simulator.accounts
@original_activities
quit
@original_activities
quit
@original_activities
print-accounting accountant -b -l fin
quit
print-accounting accountant -b -l fin
accountant.activities.push adjusting_activity
print-accounting accountant -b -l fin
simulator.accounts
quit
original_activities
@original_activities
accountant.activities.all
quit
@original_activities
accountant.activities.all
quit
@original_activities
@adjustment_entries
print-accounting accountant -b -l fin
accountant.activities.push adjusting_activity
print-accounting accountant -b -l fin
simulator.accounts
simulator.activities
simulator.activities.all
additional_activities
accountant.activities.reject { |act| addtional_activities.include? act }
accountant.activities.reject { |act| additional_activities.include? act }
accountant.activities.all
accountant.calculate_account_value
accountant.calculate_account_values
accountant.accounts
accountant.activities.all
quit
additional_activities
@original_activities
print-accounting accountant -b -l fin
accountant.activities.push adjusting_activity
print-accounting accountant -b -l fin
quit
@accountant
table_to_balances(table)
@accountant.activities
@accountant.calculate_account_values
@accountant.activities.first
@accountant.activities.first.entries
quit
@accountant.calculate_account_values
sum(date)
current_balances
current_balances[:cash] = 9
current_balances
quit
exit
@accountant
@accountant.calculate_account_values
quit
accountant.balances
quit
accountant.balances
quit
assert_balances outstanding: '104.35', past_due: '69.80'
quit
loan.balances
loan.balances_on
loan.balances_on(date)
loan.accounting { |acc| acc.calculate_account_values }
loan.balances_on(date)
loan.accounting { |acc| acc.balances }
loan.balances_on(date)
loan.accounting { |acc| acc.activities }
loan.accounting { |acc| acc.activities.all }
loan.accounting { |acc| print-accounting acc }
loan.accounting { print-accounting acc }
print-accounting loan.accounting { |acc| }
print-accounting loan.accounting { |acc| acc }
quit
simulator.activities
print-accounting simulator
adjusting_activity
end_date
adjusting_activity.cancels
adjusting_activity.cancels_activity_id
@simulator_schedule
@simulator_schedule.schedules
@simulator_schedule.scheduled
exit
quit
print-accounting simulator
quit
print-accounting simulator
@simulator_activities
accountant.activities.reject { |act| act.effective_date >= start_date || remove?(act) || act.cancelled? || introduced?(act.activity_type.name)
}
start_date
quit
print-accounting simulator
simulator.balances
whereami
quit
print-accounting simulator
simulator.balances
accountant.balances
accountant.activities.push adjusting_activity
accountant.balances
accountant.calculate_account_values
accountant.balances
additional_activities
print-accounting accountant
print-accounting accountant -b
print-accounting accountant -h
print-accounting accountant -b
accountant.balances
quit
accountant.activities
accountant.activities.all
simulator.activities.all
adjustment_entries
accountant.balances
accountant.balances :financial
accountant.balances :operational
exit
quit
@original_activities
@simulated_activities
simulator.balances
@simulated_activities.last
@simulated_activities.last.entries
adjusting_activity
adjusting_activity.entries
simulator.balances :financial
simulator.balances :operational
whereami
diff.simulated
diff.instance_variable_get :simulated
diff.instance_variable_get @simulated
diff.instance_variable_get :simulated
print-accounting accountant -b
print-accounting simulator -b
print-accounting simulator 
simulator.balances
print-accounting accountant
additional_activities
additional_activities.entries
quit
print-accounting accountant
accountant.balances
accountant.accounts
additional_activities
adjustment_entries
additional_activities
adjustment_entries
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting loan
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting simulator -b
print-accounting accountant -b
additional_activities
quit
print-accounting accountant -b
@simulator_schedule
exit
additional_activities
adjustment_entries
print-accounting accountant -b
print-accounting simulator -b
quit
print-accounting simulator -b
quit
accountant.activities
accountant.activities.all
quit
accountant.activities.all
accountant.activities.dup.tap { |acts| acts.push adjusting_activity }
accountant.activities.all
quit
accountant.activities.all
print-accounting simulator -b
print-accounting accountant -b
quit
print-accounting accountant -b
quit
accountant.activities
accountant.activities.dup.tap { |acts| acts.push adjusting_activity }
quit
accountant.activities
quit
print-accounting accountant -b
quit
print-accounting loan.accountant -b
quit
simulator.activities
simulator.balances
quit
auit
quit
print-accounting simulator
print-accounting simulator -b
simulator.balances
simulator.balances :operational
simulator.simulate do finish Date.parse(2012-02-04) end
simulator.simulate do finish Date.parse('2012-02-04') end
simulator.balances :operational
simulator.simulate do finish Date.parse('2012-02-08') end
simulator.balances :operational
print-accounting simulator
adjusting_activity
simulator_scheudule
@simulator_scheudule
@simulator_schedule
print-accounting accountant
print-accounting accountant -b
adjusting_activity
additional_activities
whereami
print-accounting simulator
print-accounting simulator -b
simulator.balances
accountant.calculate_account_values
simulator.balances
simulator.calculate_account_values
simulator.balances
accountant.balances
accountant.activity.push adjusting_activity
accountant.activities.push adjusting_activity
accountant.balances
accountant.calculate_account_values
accountant.balances
print-accounting accountant -b
accountant.simulate do finish Date.parse('2012-02-08') end
print-accounting accountant -b
@simulator.schedule
@simulator_schedule
exit
quit
simulator.accounts
simulator.simulate do finish Date.parse('2012-02-08') end
simulator.accounts
quit
simulator.accounts
simulator.simulate do finish Date.parse('2012-02-08') end
simulator.accounts
quit
print-accounting accountant -b
print-accounting simulator -b
print-accounting simulator 
quit
adjusting_activity
print-accounting simulator
simulator.simulate do finish Date.parse('2012-02-07') end
print-accounting simulator
simulator.simulate do finish Date.parse('2012-02-08') end
print-accounting simulator
simulator.balances
simulator.calculate_account_values
simulator.balances
quit
print-accounting simulator
quit
activity.entries
quit
event.id
event.whereami
whereami
event.accounting_date
quit
actual
actual.all
quit
print-accounting @accountant
quit
exit
print-accounting @accountant
print-accounting @accountant -b
exit
print-accounting @accountant -b
quit
activity
type
quit
type
activity
n
print-accounting @accountant -b
quit
activity
activity.entries
quit
print-accounting @accountant
quit
print-accounting @accountant -b
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
adjusting_activity
quit
adjusting_activity
quit
adjusting_activity
quit
adjusting_activity
print-accounting simulator -b
@simulator_schedule
accountant.schedule.between(start_date, end_date)
end_date
accountant.schedule
accountant.activities
accountant.activities.first
accountant.activities.first.effective_date
accountant.schedule.relevant_activities
quit
loan.accountant
loan.accountant.schedule
quit
act
act.entries
act.entries.delete_if { false }
act.entries
act
act.entries
act.entries.delete_if { false }
act.entries
print-accounting @accountant
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
daily_interest
balances
quit
daily_interest
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
start_date
self.start_date
methods
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
quit
print-accounting @accountant -b
adjusting_activity
print-accounting simulator -b
@simulator_schedule
accountant.activities
accountant.activities.all
quir
quit
adjusting_activity
@simulator_schedule
quir
quit
adjusting_activity
@simulator_schedule
print-accounting simulator -b
quit
print-accounting simulator -b
print-accounting accountant -b
print-accounting simulator -b
quit
adjusting_activity
quit
adjusting_activity
quit
adjusting_activity
print-accounting simulator -b
quit
print-accounting simulator -b
start_date
accountant.activities.reject { |act| remove?(act) || act.cancelled? || act.cancels? || introduced?(act.activity_type.name) }
quit
accountant.activities.reject { |act| remove?(act) || act.cancelled? || act.cancels? || introduced?(act.activity_type.name) }
accountant.actvities.all
accountant.activities.all
quit
accountant.activities.reject { |act| remove?(act) || act.cancelled? || act.cancels? || introduced?(act.activity_type.name) }
accountant.activities.all
accountant.activities.all.last
act = _
introduced?(act.activity_type.name)
act.activity_type
act.activity_type.name
accountant.adjustment_options[:introduces]
quit
edit adjust
quit
edit
edit steps.rb
edit cucumber/steps.rb
edit lib/finance_xl/cucumber/steps.r
edit lib/finance_xl/cucumber/steps.rb
exit
quit
print-accounting @accountant
quit
adjusting_activity
print-accounting simulator
quit
print-accounting @accountant
print-accounting @accountant -b
quit
print-accounting simulator 
quit
print-accounting simulator
start_date
quit
accountant.activities.select(&:cancelled)
accountant.activities.select(&:cancelled?)
quit
accountant.activities.select(&:cancelled?)
accountant.activities.select(&:cancelled?).cancelee
accountant.activities.select(&:cancels?).cancel
accountant.activities.select(&:cancels?)
quit
accountant.activities.select(&:cancels?)
accountant.activities.select(&:cancels?).first
accountant.activities.select(&:cancels?).first.cancelled_activity
accountant.activities.select(&:cancels?).first.canceled_activity
accountant.activities.select(&:cancels?).first.cancels_activity
accountant.save
accountant.save!
accountant.source_id = 1
accountant.save!
accountant.activities.select(&:cancels?)
accountant.activities.select { |act| act.cancelled_date > start_date }
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > start_date }
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > start_date }.map(&:cancelled_date)
quit
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > start_date }.map(&:cancelled_date)
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > start_date }.map(&:cancelled_date).min
quit
date
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > date }.map(&:cancelled_date).min
quit
print-accounting simulator
start_date
adjust_start_date start_date
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > date }.map(&:cancelled_date).min || date
accountant.activities.select { |act| act.cancelled? && act.cancelled_date > start_date }.map(&:cancelled_date).min || date
start_date
quit
qui
quit
start_date
print-accounting simulator
print-accounting simulator -b
quit
adjusting_activity
print-accounting simulator
print-accounting simulator -b
start_date
quit
print-accounting simulator -b
quit
print-accounting simulator -b
qut
quit
accountant.push adjusting_activity
accountant.activities.push adjusting_activity
print-accounting accountant -b
quit
accountant.activities.push adjusting_activity
print-accounting accountant -b
quit
accountant.activities.push adjusting_activity
print-accounting accountant -b
accountant.simulate do finish Date.parse('2012-10-08') end
print-accounting accountant -b
quit
print-accounting accountant -b
print-accounting simulator -b
quit
print-accounting simulator -b
print-accounting accountant -b
print-accounting simulator -b
print-accounting accountant -b
quit
print-accounting accountant -b
quit
print-accounting accountant -b
quit
print-accounting accountant -b
accountant.activities.push adjusting_activity
print-accounting accountant -b
quit
print-accounting simulator -b
quit
print-accounting accountant -b
quit
print-accounting accountant -b
accountant.activities.push adjusting_activity
print-accounting accountant -b
quit
segment(loan, Time.now)
quit
Day.new(self, date).instance_exec(&block)
quit
Day.new(self, date).instance_exec(&block)
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
block
quit
loan
segment(loan, Time.now).account_status.should == account_statuses[:past_due_60_to_89]
quit
@evening = @group.evening_of(@date, opts, &block)
@evening.instance_exec(&block)
quit
world.loan_under_test
world.loan_under_test = sim.create_loan if world.loan_under_test.nil?
Loan.any_instance.stub(account: Identity::Mock::Account.new(login: 'foo@example.com')
  quit
world.loan_under_test = sim.create_loan if world.loan_under_test.nil?
quit
start_date
loan
aged_until_date
quit
start_date
aged_until_date
quit
aged_until_date
target_date
edit age_until
whereami
quit
start_date
aged_until_date
target_date
quit
aged_until_date
target_date
quit
aged_until_date
target_date
quit
aged_until_date
target_date
quit
aged_until_date
target_date
quit
quitquit
quit
date
life
quit
date
quit
date
tomorrow = date + 1
scope = loan.scheduled_payments.without_payment.on(tomorrow).where('scheduled_payments.amount > 0')
scope = scope.noncontractual if life.event_on?(tomorrow, :miss_payment)
loan.scheduled_payments
loan.scheduled_payments.all
date
quit
payment
date
payment.date
cd ..
date
life
payment.date
quit
date
quit
loan
loan.scheduled_payments
loan.scheduled_payments.all
quit
payment_dates
date
quit
payment_dates
quit
tomorrow = date + 1
scope = loan.scheduled_payments.without_payment.on(tomorrow).where('scheduled_payments.amount > 0')
scope = scope.noncontractual if life.event_on?(tomorrow, :miss_payment)
life
quit
date
payment_dates
tomorrow
loan.scheduled_payments
loan.scheduled_payments.all
loan.scheduled_payments.all.size
quit
puts "Total time elapsed #{(beginning_time - total_beginning)*1000} milliseconds"
beginning_time
Time.current
exit
quit
amount
cap ? [amount, cap - accrued.abs].min : amount
quit
print-accounting @accountant
quit
print-accounting @accountant
quit
print-accounting @accountant
quit
print-accounting @accountant
quit
@date
quit
@date
quit
@date
quit
@date
quit
loan.accounting { |acc| acc }
print-accounting loan.accounting { |acc| acc }
quit
print-accounting loan.accounting { |acc| acc }
target_date
quit
print-accounting loan.accounting { |acc| acc }
quit
print-accounting accountant
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
date
@date
quit
caller
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
target_date
$target_date
print-accounting self
quit
print-accounting loan.accounting { |acc| acc }
loan.reload
print-accounting loan.accounting { |acc| acc }
quit
print-accounting loan.accounting { |acc| acc }
print-accounting loan.reload.accounting { |acc| acc }
print-accounting loan.reload.accounting { |acc| acc.date }
print-accounting loan.reload.accounting { |acc| acc.start_date }
print-accounting loan.reload.accounting { |acc| }
print-accounting loan.reload.accounting { |acc| acc }
quit
accountant
print-accounting accountant
quit
loan.is_open?
quit
@date
quit
@date
quit
@date
quit
@date
whereami
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
print-accounting self
quit
$target_date
print-accounting loan.accounting { |ac| ac }
quit
accountant
print-accounting loan.accounting { |ac| ac }
print-accounting _
quit
loan.perform_daily_accounting
loan.perform_daily_accounting!
accountant
print-accounting _
quit
date
quit
date
quit
date
quit
date
quit
$target_date
quit
LoanStatusReconciler.new(self).reconcile!
self.state
exit
quit
print-accounting _
exit
print-accounting _
quit
print-accounting loan.accounting { |ac| ac }
exit
quit
complete
quit
print-accounting loan.accounting { |ac| ac }
quit
@schedule
print-accounting accountant
date
@date
Date.current
quit
@schedule
loan.accounting { |ac| ac }
self.accounting { |ac| ac }
print-accounting self.accounting { |ac| ac }
quit
print-accounting accountant
quit
print-accounting self.accounting { |ac| ac }
print-accounting @unsaved_accountant { |ac| ac }
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
quit
@unsaved_accountant
print-accounting @unsaved_accountant
quit
caller
save
quit
save_accountant
quit
@unsaved_accountant
print-accounting @unsaved_accountant
quit
save_accountant
quit
save_accountant
accountant
quit
caller
accountant
accounting do { |ac| ac }
accounting { |ac| ac }
whereami
quit
Date.current
quit
Date.current
quit
Date.current
quit
qut
quit
print-accounting loan.accountanting { |ac| ac }
print-accounting loan.accounting { |ac| ac }
quit
replayer.perform!
current_accountant
print-accounting current_accountant
quit
replayer.perform!
simulator
simulator.schedule
whereami
quit
replayer.perform!
exit
self
print-accounting self
scheduled_activities @date
quit
print-accounting self
print-accounting self -b
quit
self
self.accounts
scheduled_activities date
self.calculate_account_values
self.accounts
exit
quit
self.accounts
schedule_activities @date
scheduled_activities @date
print-accounting self
@date
exit
quit
print-accounting self
edit fast_forward_to
quit
print-accounting self
quit
entry_types
quit
name
self.name
entry_types
quit
@date
quit
name
current_balances
quit
@date
print-accounting self
print-accounting self -b
self.accounts
exit
@date
self.accounts
self.calculate_account_values
self.accounts
print-accounting self -b
self.schedule
quit
print-accounting loan.accounting { |ac| ac }
loan.accounting { |ac| ac }
quit
@unsaved_accountant
print-accounting @unsaved_accountant
Date.current
quit
Date.current
quit
Date.current
@unsaved_accountant
print-accounting @unsaved_accountant
save
Date.current
quit
save
print-accounting @unsaved_accountant
print-accounting @usaved_accountant
print-accounting @saved_accountant
save
quit
print-accounting @usaved_accountant
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
print-accounting @saved_accountant
quit
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
quit
print-accounting @unsaved_accountant
print-accounting @saved_accountant
quit
print-accounting @saved_accountant
exit
quit
exit
print-accounting loan.accounting { |ac| ac }
loan.accounting { |ac| ac }
print-accounting loan.accounting { |ac| ac }
exit
quit
Date.current
aged_until
@aged_until
quit
Date.current
quit
life
quit
life
print-accounting loan.accounting { |ac| ac }
loan
loan.scheduled_payments
loan.scheduled_payments.all
loan.payments
loan.payments.all
print-accounting loan.accounting { |ac| ac }
quit
date
quit
date
time_of_day
print-accounting loan
loan.balances
loan.balances_on date
loan.accounting do |ac| ac.calculate_account_values end
loan.balances_on date
print-accounting loan
print-accounting loan -b
quit
print-accounting simulator
print-accounting simulator -b
simulator.balances
additional_activities
end_daet
end_date
simulator.simulate do finish end_date + 1 end
simulator.simulate do finish (end_date + 1) end
end_date + 1
quit
print-accounting simulator
print-accounting simulator -b
print-accounting accountant -b
accountant.activities.push adjusting_activity
print-accounting accountant -b
quit
acitivities
activities
activities.all
activities.reject(&:cancelled?).find { |activity| activity.accounting_date == accounting_date && activity.type?(type) }
quit
activities.reject(&:cancelled?).find { |activity| activity.accounting_date == accounting_date && activity.type?(type) }
quit
cancelee_or_id
quit
cancelee_or_id
quit
activities.reject(&:cancelled?).find { |activity| activity.accounting_date == accounting_date && activity.type?(type) }
quit
cancelee_or_id
cancelee_or_id.is_a?(Activity) ? cancelee_or_id : accountant.find_activity_by_id(cancelee_or_id)
cancelee = cancelee_or_id.is_a?(Activity) ? cancelee_or_id : accountant.find_activity_by_id(cancelee_or_id)
raise Error::NoSuchActivity.new(cancelee_or_id) if cancelee.nil?
canceler.cancel(cancelee, self, cancelled_date)
quit
table
table_to_accounting_schedule table
quit
event
quit
activity activity_name, accounting_date, amounts[activity_name], effective_date
quit
print-accounting @accountant
quit
print-accounting @accountant
quit
amount
quit
event
quit
event
quit
args
quit
task_options
book.name
quit
book.name
all_activities + task[:activities].inject([]) do |activities, activity| activities << activity end
all_activities
task
task = task_options[book.name][type]
book.name
all_activities + task[:activities].inject([]) do |activities, activity| activities << activity end
_.uniq
exit
print-accounting @accountant
exit
print-accounting @accountant
quit
tmp.activity :issue, Date.current, '100.00'
tmp.save!
exit
type
exit
quit
exit
type
exit
quit
disbursment_account
Loaner::CONFIG
Loaner::CONFIG.cso_disbursment_accounts
Loaner::CONFIG.cso_disbursement_accounts
Loaner::CONFIG.cso_disbursments_accounts
Loaner::CONFIG.cso_disbursments_accounts.accounts
Loaner::CONFIG.cso_disbursments_accounts.accounts['TX']
Loaner::CONFIG.cso_disbursments_accounts.accounts['TX'].type?
Loaner::CONFIG.cso_disbursments_accounts.accounts['TX']
exit
ls
interest_rate
source
source.disbursment_account
exit
l = Loan.find gem 'pry-rails', :group => :development
l = Loan.find 4683
exit
quit
Country
quit
@primary_key
quit
klass
quit
klass
@primary_key
klass
klass.columns_hash
\q
quit
Region.all
Region.where(region: region, abbr: abbr, country: Country['US'])
Region.where(region: region, abbr: abbr, country: Country['US']).first
Country['US']
Country.all
Country.lookup.reload
Country.all
quit
loan
loan.region
loan.save
loan.save!
loan.should_no be_valid
loan.should_not be_valid
loan.valid?
loan.methods
quit
l  = Loan.new (country: "US", region: "VA", loan_type: "cso")
l  = Loan.new ({country: "US", region: "VA", loan_type: "cso"})
l  = Loan.new ({country: Country["US"], region: "VA"})
l  = Loan.new ({country: Country["US"], region: Region["VA"]})
l.save
l.save!
l  = Loan.new ({country: Country["US"], loan_type: "cso"})
l.save!
quit
Region["AL"]
quit
whereami
quit
Loan.find task["loan_id"]
Loan.exists? task["loan_id']
FactoryGirl.build(:loan, id: task["loan_id"], loan_type: loan_type).tap { |fact| fact.save! unless Loan.exists? fact }
Loan.all
quit
activity_to_cancel
activity :cancel, activity_to_cancel.accounting_date, activity_to_cancel.activity_amount,
;
activity :cancel, activity_to_cancel.accounting_date, activity_to_cancel.activity_amount,activity_to_cancel.effective_date, nil, activity_to_cancel.activity_id
quit
cancel_activity current_activity, current_activity.cancels_activity_id, today
quit
obligations
amount_due = 0
obligations.create! loan_id: id, amount: amount_due, due_date: due_date
due_date = Date.today
obligations.create! loan_id: id, amount: amount_due, due_date: due_date
quit
amount_due = 0
due_date = Date.today
obligations.create! loan_id: id, amount: amount_due, due_date: due_date
obligations.first
obligations.first.amount
D(obligations.first.amount)
obligations.first.amount = D(obligations.first.amount)
obligations.first.amount
obligations.first.amount = D(obligations.first.amount)
obligations.first
quit
dc
dc.default_amount
dc.default_amount_on(Date.today)
print-accounting accountant
quit
dc
quit
amount
date
amount.default_amount_on(date)
quit
print-accounting self
date
quit
amount
quit
task task_name, accounting_date, amounts, effective_date
quit
task task_name, accounting_date, amounts, effective_date
quit
task task_name, accounting_date, amounts, effective_date
quit
print-accounting loan
scenario
quit
include JSONOutputter
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
o.indent_size
o.indentation_level
o.indentation_level += o.indent_size
exit
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
@current_tasks
quit
@json_string
@File.open("#{Rails.root}/pending}, "w+") { |f| f << json_string }
}
"
@File.open("#{Rails.root}/pending}", "w+") { |f| f << json_string }
File.open("#{Rails.root}/pending}", "w+") { |f| f << json_string }
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
input_task_representation
s = _
s % @current_task.values
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
File.open("#{Rails.root}/pending", "w+") { |f| f << json_string }
exit
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
quit
File.open("#{Rails.root}/pending", "w+") { |f| f << json_string }
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
quit
File.open("#{Rails.root}/pending", "w+") { |f| f << json_string }
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
@current_task
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
File.open("#{Rails.root}/pending", "w+") { |f| f << o.json_string }
\q
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
File.open("#{Rails.root}/pending", "w+") { |f| f << o.json_string }
exit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
@current_task["task_to_cancel"] ? "\"task_to_cancel\": \"%s\", \"cancellation_date: \"%s\"": "\"date\": \"%s\","
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
base << (@current_task["task_to_cancel"].nil? ? "\"date\": \"%s\"," : "\"task_to_cancel\": \"%s\", \"cancellation_date: \"%s\"")
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
@json_string << input_task_representation % @current_task.values
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
input_task_representation % @current_task.values
quit
o = JSONOutputter.new(loan_tasks, nil)
o.create_json
File.open("#{Rails.root}/pending", "w+") { |f| f << o.json_string }
exit
print-accounting loan
loan.activities.map(&:effective_date).max
loan.accountant.activities.map(&:effective_date).max
loan.accountant.activities.map(&:effective_date).tap.{|c| c } 
loan.accountant.activities.map(&:effective_date).tap.{|c|  }
loan.accountant.activities.map(&:effective_date).tap{|c| c }
exit
quit
print-accounting loan
quit
Underwriter
::Underwriter
quit
whereami
Tier
Tier.lookup
Tier["Tier 1"]
quit
loan_agreement
loan_agreement.loan_amount
presenter
presenter.loan_amount
quit
number_to_currency(number, :unit => "&pound;")
number_to_currency(number)
number_to_currency(number, :unit => "&pound;")
edit number_to_currency
number_to_currency(number, :unit => "&pound;")
value
format.gsub(/%n/, ERB::Util.html_escape(value)).gsub(/%u/, ERB::Util.html_escape(unit)).html_safe
format.gsub(/%n/, ERB::Util.html_escape(value)).gsub(/%u/, ERB::Util.html_escape(unit))
format.gsub(/%n/, ERB::Util.html_escape(value))
format.gsub(/%n/, ERB::Util.html_escape(value)).gsub(/%u/, ERB::Util.html_escape(unit))
unit
format.gsub(/%n/, ERB::Util.html_escape(value)).gsub(/%u/, ERB::Util.html_escape(unit))
require 'CGI'
CGI.unescapeHTML(format.gsub(/%n/, ERB::Util.html_escape(value)).gsub(/%u/, ERB::Util.html_escape(unit)))
exit
edit number_to_uk_currency
quit
edit
edit number_to_currency
exit
event
quit
events
quit
events
quit
events
events.push event
edit events
ls
whereami
name
date
name
AppConfig.loan_sim[name]
self
events
self.events
events
self.events
Sim::LifeCycle
Sim::LifeCycle.events
@events
quit
s
s.events
quit
name
quit
name
quit
name
quit
edit from_template
quit
events
quit
template
t = template
t[events]
t[events] = []
t
events
t[:events] = []
quit
events
quit
template
template[:events] = []
template
template.each(&:inspect)
template.each(&:puts)
template.each(&:inspect)
template.each { |e| puts e }
quit
template
quit
print-accounting loan
print-accounting self
ls
edit assert_balances
whereami
assert_balances outstanding: '105.25'
assert_predicted_balances metadata[:age_until].to_date, expected_balances, &block
quit
whereami
assert_balances outstanding: '105.25'
quit
assert_balances outstanding: '105.25'
quit
assert_balances outstanding: '105.25'
quit
edit assert_balances
exit
loan.balances_on(date)[name]
balance
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
quit
end_date
funding_payments_between(start_date, end_date)
incoming_payments_between(start_date, end_date)
predicted_payments(start_date, end_date)
activities(start_date, end_date)
quit
end_date
funding_payments_between(start_date, end_date)
activities(start_date, end_date)
predicted_payments(start_date, end_date)
incoming_payments_between(start_date, end_date)
quit
edit load
quit
end_date
funding_payments_between(start_date, end_date)
incoming_payments_between(start_date, end_date)
predicted_payments(start_date, end_date)
incoming_payments_between(start_date, end_date)
accountant.schedule
whereami
quit
accountant.schedule.payments
accountant.schedule.get_instance_variable :@payments
accountant.schedule.instance_variable_get :@payments
accountant.schedule.instance_variable_get(:@payments).first
accountant.schedule.instance_variable_get(:@payments).first.cancelled
accountant.schedule.instance_variable_get(:@payments).first.cancelled?
accountant.schedule.instance_variable_get(:@payments).first.canceled?
accountant.schedule.instance_variable_get(:@payments).last.canceled?
simulator_schedules
simulator_scheduled
simulator_schedule
accountant.schedule.instance_variable_get(:@payments).last
accountant.schedule.instance_variable_get(:@payments).last.canceled?
loan
accountant
print-accounting accountant
accountant.schedule.instance_variable_get(:@payments).last
accountant.schedule.instance_variable_get(:@payments).last.id
Payments.find 7229
Payment.find 7229
Payment.find 930
Payment.find(930).canceled?
Payment.find(930).payment_status
whereami
exit
quit
uit
quit
accountant.schedule
simulator_schedule
exit
simulator_schedule
quit
loan.balances_on(date)[name].should == balance
quit
exit
transition :new => :issued, :if => lambda { |loan| loan.would_disburse_on_acceptable_date? }
quit
self.loan      = create :issued_loan,        account_id: account.id, loan_number: loan_agreement.loan_number, loan_agreement: loan_agreement, product: Product['netcredit_secured']
edit has_secured_loan
edit has_secured_loan!
quit
loan.would_disburse_on_acceptable_date?
transition :new => :issued, :if => lambda { |loan| loan.would_disburse_on_acceptable_date? }
quit
edit after_transition
transition :new => :issued, :if => lambda { |loan| loan.would_disburse_on_acceptable_date? }
payment  = LoanFundingPaymentCreator.new(loan, eff_date).create!
eff_date = loan.disbursement_date || loan.next_available_disbursement_date
payment  = LoanFundingPaymentCreator.new(loan, eff_date).create!
quit
payment  = LoanFundingPaymentCreator.new(loan, eff_date).create!
quit
exit
quit
print-accounting loan
quit
date
print-accounting
quit
print-accounting
quit
print-accounting
quit
print-accounting accountant
accountant.simulate { finish task_args[:date]
}
print-accounting accountant
quit
print-accounting accountant
accountant.simulate { finish task_args[:date] }
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting accountant
task_name
accountant
accountant.simulate { finish task_args[:date] }
quit
accountant.start_date
task_args[:date]
quit
task_args[:date]
accountant.simulate { finish task_args[:date] }
print-accounting accountant
accountant.perform_task(task_name, task_args[:date], task_args[:amounts])
print-accounting accountant
quit
print-accounting loan
loan.id
quit
print-accounting loan
balnce["account"]
balance["account"]
expected_amount
quit
print-accounting loan
quit
print-accounting @accountant
@accountant.balances
@accountant.calculate_account_values
@accountant.balances
@accountant.accounts
print-accounting @accountant
exit
print-accounting @accountant
@start_date
print-accounting simulator
quit
print-accounting @accountant
print-accounting simulator
adjusting_activity
start_date
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting @accountant
print-accounting @accountant -b
exit
print-accounting @accountant
print-accounting @accountant -b
exit
quit
print-accounting @accountant
quit
simulator_activities
simulator_schedule
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
exit
simulator_activities
print-accounting simulator
start_date
quit
simulator_schedule
quit
simulator_activities
simulator_schedule
simulator_activities
simulator
simulator_activities
exit
schedule
quit
caller
quit
schedule
caller
as_of
schedule
quit
row
exit
quit
accountant.schedule.between(start_date, end_date, true)
schedule
quit
simulator_schedule
print-accounting simulator
quit
simulator_schedule
schedule
adjusting_activity
adjusting_activity.cancels_activity_id
remove_activities
@remove_activities
quit
whereami
quit
simulator_schedule
quit
@scheduled
quit
schedule
accountant.activities.each { |act| schedule.remove_activity(act) if (act.cancelled? || act.cancels?) }
schedule
whereami
edit simulator_schedule
quit
simulator_schedule
edit simulator_schedule
quit
edit remove_activity
@scheduled
quit
simulator_schedule
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
exit
quit
print-accounting simulator
quit
activities
activities.none? { |act| act.effective_date == today }
activities.all
quit
activities.all
print-accounting self
quit
print-accounting self
print-accounting simulator
quit
activities.all
print-accounting self
quit
print-accounting simulator
quit
activities
activities.all
quit
print-accounting simulator
quit
simulator
simulator_schedule
quit
print-accounting simulator
quit
edit simulate
quit
act.cancelled? || act.cancels? || (introduced?(act.activity_type.name) && act.effective_date > start_date)
quit
act.cancelled? || act.cancels? || (introduced?(act.activity_type.name) && act.effective_date > start_date)
quit
@accountant.accounts
print-accounting @accountatns
print-accounting @accountant
print-accounting @accountant -b
print-accounting @accountant
quit
print-accounting @accountant
print-accounting @accountant -b
print-accounting @accountant
print-accounting @accountant -b
print-accounting @accountant
exit
print-accounting simulator
quit
print-accounting simulator
adjusting_activity
exit
quit
print-accounting simulator
simulator_schedule
quit
start_date
quit
print-accounting simulator
exit
quit
print-accounting simulator
simulator_schedule
quit
print-accounting simulator
quit
$its_pry_time = true
simulator_schedule
quit
schedule
accountant.activities.reject { |act| (act.retroactive? && act.effective_date > start_date) }
quit
schedule
edit simulator_schedule
whereami
quit
print-accounting @accountant
print-accounting @accountant -b
exit
print-accounting simulator
start_date
quit
exit
quit
adjusting_activity
simulatro_schedule
simulator_schedule
quit
print-accounting simulator
end_date
quit
simulator_schedule
schedule
quit
simulator_schedule
schedule
quit
schedule
accountant.activities.reject { |act| (act.retroactive? && act.effective_date > start_date) }quit
quit
whereami
quit
print-accounting simulator
quit
print-accounting simulator
end_date
quit
simulator_schedule
start_date
end_date
quit
print-accounting simulator
quit
print-accounting simulator
simulator_schedule
quit
end_dte
end_date
adjusting_activity
quit
row
quit
row
quit
row
quit
row
quit
event
quit
exit
print-accounting loan
quit
print-accounting simulator
adjusting_activity
quit
print-accounting simulator
end_date
accountant.schedule
whereami
loan.incoming_payments
accountant.source.incoming_payments
print-accounting simulaotr
print-accounting simulator
quit
print-accounting simulator
quit
simulator_schedule
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
simulator_schedule
quit
print-accounting simulator
end_date
adjusting_activity
quit
start_date
adjusting_activity
start_date
quit
dates
quit
print-accounting simulator
quit
start_date
quit
dates
quit
start_date
quit
dates
quit
start_date
quit
qui
quit
date
quit
print-accounting simulator
adjusting_activity
quit
dates
date
quit
print-accounting simulator
adjusting_activity
quit
dates
date
quit
print-accounting simulator
simulator_schedule
quit
print-accounting simulator
quit
print-accounting @accountant
quit
dates
date
quit
print-accounting simulator
adjusting_activity
quit
print-accounting simulator
quit
print-accounting simulator
simulator_schedule
print-accounting simulator
quit
print-accounting simulator
print-accounting accountant
print-accounting accountant -b
quit
print-accounting @accountant -b
quit
template
presenter
presenter.loan_agreement
presenter.loan_agreement.start_date
presenter.loan_agreement
quit
presenter.apply_to template
vim /Users/cmwesigwa/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/bundler/gems/martini_at_zoo-e39580109575/lib/martini_at_zoo/tila.rb
presenter.apply_to template
exit
presenter.apply_to template
dates
amounts
start_date
validate!
quit
files
@configuration.support_to_load
$LOAD_PATH
exit
@loan
@loan.accountant
meets
scheduled_payments[:past_due].count >= @loan.rulebook.min_right_to_cure_past_due_payments
qui
quit
@__wait_to_rollback__
quit
SCOPES
args
quit
args
quit
args
quit
args
caller
quit
args
quit
caller
quit
args
quit
args
SCOPES.include?(args.first)
exit
print-accounting loan
loan.accountant.activities.map { |a| (a.activity_type.try(:name) || no_name).to_s.size }.max
print-accounting loan
quit
loan
print-accounting loan
quit
print-accounting loan
loan
print-accounting loan
quit
print-accounting loan
loan
quit
(balance[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_down
(balancse[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_down
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_down
DecNum.methods
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_down
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date))[2]
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round(2)
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_up(2)
DecNum(0.54)
DecNum('0.54')
DecNum('0.54').round
DecNum('0.54').round(1)
DecNum('0.55').round(1)
DecNum('0.55').floor(1)
DecNum('0.55').floor
DecNum('0.55').floor(2)
exit
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round_down
DecNum('0.55').round
DecNum('0.55').round(1_
)
DecNum('0.55').round(1)
DecNum('0.55').round(1, rounding: :down)
DecNum('0.55').round({places: 1, rounding: :down})
exit
(balances[:interest_accruing] * interest_rate.daily * (due_date - start_date)).round({places: 1, rounding: :down})
interest_rate
quit
qut
quit
region
quit
region
quit
region
quit
task["region"]
Region[task["region"]]
factory.region = Region[task["region"]] if task["region"]
factory
quit
regino
region
quit
region
quit
task
quit
task
quit
task
quit
print-accounting loan
loan.accountant.most_recent_effective_date
quit
start_date
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
args
exit
loan.id
loan.accountant.interest_rate
quit
task["task_name"]
loan.id
quit
Loan.find 12
exit
Loan.find 12
quit
printloan.accountant.finish(Date.parse(balance["date"])) if balance["date"]
loan.accountant.finish(Date.parse(balance["date"])) if balance["date"]
print-accountant loan
print-accounting loan
quit
D('.556')
D('.556').floor(2)
D('.556').floor(places: 2)
D('.556').floor(2)
D('.556').floor(places: 2)
exit
a
a.activity_type
quit
exit
quit
obligations
quit
last_payment_date
source.next_due_date(effective_date-1)
calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date)
quit
effective_date-1
last_payment_date
quit
effective_date-1)
effective_date-1
last_payment_date
quit
exit
print-accounting loan
quit
print-accounting loan
start_date
loan.accountant.daily_interest
print-accounting loan -b
whereami
quit
print-accounting loan
exit
quit
print-accounting loan
print-accounting loan -b
exit
source
calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date)
interest_rate.daily
last_payment_date
print-accounting
calculate_account_values(last_payment_date)
balance[:interest_accruing]
balances[:interest_accruing]
(balances[:interest_accruing] * interest_rate.daily * (
  )
)
source.next_due_date(effective_date-1)
(balances[:interest_accruing] * interest_rate.daily * ((source.next_due_date(effective_date-1) - last_payment_date))
)
(balances[:interest_accruing] * interest_rate.daily * ((source.next_due_date(effective_date-1) - last_payment_date)))
whereami
effective_date
print-accounting loan
print-accounting
calculate_account_values(today)
calculate_account_values(effective_date)
due_date = source.next_due_date
whereami
due_date = source.next_due_date(effective_date-1)
eff_date = effective_date
(balances[:interest_accruing] * interest_rate.daily * (due_date - eff_date)).round(places: 2)
(balances[:interest_accruing] * interest_rate.daily * ((source.next_due_date(effective_date-1) - last_payment_date)))
cnu_interest = calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date) -
calculate_interest_credit(source.next_due_date(effective_date-1), effective_date)
exit
print-accounting
quit
exit
quit
print-accounting
quit
effective_date
print-accounting loan
print-accounting
whereami
calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date)
cnu_interest = calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date) - calculate_interest_credit(source.next_due_date(effective_date-1), effective_date)
accounts[:lender_interest_income]
effective_date
last_payment_date
calculate_account_values last_payment_date
balances[:interest_accruing]
(balances[:interest_accruing] * interest_rate.daily * source.next_due_date(effective_date-1)
)
(balances[:interest_accruing] * interest_rate.daily * source.next_due_date(effective_date-1)-last_payment_date)
(balances[:interest_accruing] * interest_rate.daily * (source.next_due_date(effective_date-1)-last_payment_date))
source.next_due_date(effective_date-1)-last_payment_date
(source.next_due_date(effective_date-1)-last_payment_date ) * 1
(source.next_due_date(effective_date-1)-last_payment_date ) * 2
(source.next_due_date(effective_date-1)-last_payment_date ) * 1
(source.next_due_date(effective_date-1)-last_payment_date )  - 1
(source.next_due_date(effective_date-1)-last_payment_date ).type
source.next_due_date(effective_date-1)-last_payment_date
source.next_due_date(effective_date-1)-effective_date
(balances[:interest_accruing] * interest_rate.daily * (source.next_due_date(effective_date-1)-effective_date)
)
0.04 * 20
0.04 * 30
exit
calculate_account_values(start_date).accounts
calculate_account_values(start_date)
calculate_account_values(start_date).first
calculate_account_values(start_date).first.accounts
quit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
quit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
quit
(@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income])
quit
(@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income])
quit
exit
@start_balances
@start_balances[:lender_interest_income]
quit
@start_balances[:lender_interest_income]
start_date
print-accounting
calculate_account_values(start_date)
acts = accountant.activities.effective_by(date)
acts = activities.effective_by(start_date)
exit
$its_pry_time = true
@start_balances = calculate_account_values(start_date).first.accounts
start_date
exit
date
quit
date
acts = accountant.activities.effective_by(date)
quit
$its_pry_time = true
quit
date
quit
date
sum(date)
current_accounts
quit
current_accounts
date
quit
current_accounts
quit
caller
quit
current_accounts
date
quit
@start_balances
quit
@start_balances
quit
@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income]
quit
@start_balances
quit
@current_balances[:lender_interest_income]
@current_balances
exit
print-accounting loan
exit
@start_balances
accounts
quit
current_accounts
quit
current_accounts
quit
$its_pry_time = true
quit
@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income]
quit
effective_date
@start_balances[:lender_interest_income]
@current_balances[:lender_interest_income]
exit
@start_balances
quit
@start_balances
quit
@start_balances
quit
@start_balances
quit
@current_balances
quit
@start_balances
quit
@current_balances
quit
exit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
quit
@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income]
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
last_payment_date
@start_balances = calculate_account_values(last_payment_date).first.accounts.dup
effective_date
@current_balances = calculate_account_values(effective_date).first.accounts.dup
exit
@start_balances[:lender_interest_income]
@current_balances[:lender_interest_income]
quit
$its_pry_time = true
quit
$its_pry_time = true
$its_pry_time = false
quit
$its_pry_time = true
quit
$its_pry_time = true
quit
sums
date
quit
date
sums
current_accounts
quit
sums
quit
caller
quit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
quit
@start_balances[:lender_interest_income]
@current_balances[:lender_interest_income]
quit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income
]
cnu_interest
quit
@current_balances[:lender_interest_income]
@start_balances[:lender_interest_income]
@current_balances[:lender_interest_income] - @start_balances[:lender_interest_income]
cnu_interest
quit
calculate_amount_due(source.next_due_date(effective_date-1)
)
calculate_amount_due(source.next_due_date(effective_date-1), last_payment_date)
quit
balance_outstanding = 100
pre_booked = 100 * 1 * 20
pre_booked = 100 * 1 * 20/1000
pre_booked = 100 * 1 * 20/100
cso_credit = 50 * 1 * 15/100
interest_paid = pre_booked - cso_interest
interest_paid = pre_booked - cso_credit
balance_outstanding = 100 - (50 - interest_paid)
total_payment = balance_outstanding + 50
balance_outstanding = 100
pre_booked = 100 * 1 * 20/100
cso_credit = 100 * 1 * 15/100
interest_paid = pre_booked - cso_interest
interest_paid = pre_booked - cso_credit
balance_outstanding = 100 - (50 - interest_paid)
pre_booked = balance_outstanding * 1 * 15
pre_booked = balance_outstanding * 1 * 15/100
pre_booked = balance_outstanding * 1 * Float(15/100)
15/100
15.0/100
pre_booked = balance_outstanding * 1 * 15.0/100
50 * 1 * 15
50 * 1 * 15.0
50 * 1 * 15.0/100
exit
payoff_amount
base_amount
balances
base_amount = payoff_amount ? payoff_amount - prebooked_interest : balances[:interes_accruing]
base_amount = payoff_amount ? (payoff_amount - prebooked_interest) : balances[:interes_accruing]
base_amount = payoff_amount.nil? ? (payoff_amount - prebooked_interest) : balances[:interes_accruing]
base_amount = payoff_amount ? (payoff_amount - prebooked_interest) : balances[:interest_accruing]
exit
payments.reject { |act| [:issue, :extend_principal].include act.activity_type }
payments.reject { |act| [:issue, :extend_principal].include? act.activity_type }
payments.reject { |act| [:issue, :extend_principal].include? binding.pry act.activity_type }
;
}
payments.reject { |act| binding.pry [:issue, :extend_principal].include? act.activity_type }
payments.reject { |act| binding.pry; [:issue, :extend_principal].include? act.activity_type }
exit
pre_booked_interest
interest_credit
(pre_booked_interest - interest_credit)
calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
edit calculate_interest_credit
calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
base_amount
payoff_amount
exit
pre_booked_interest = calculate_amount_due(next_due_date, last_payment_date)
interest_credit = calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
(pre_booked_interest - interest_credit) + accounts[:lender_interest_income]
quit
pre_booked_interest
interest_credit
(pre_booked_interest - interest_credit)
effective_date
payoff_amount
edit calculate_interest_credit
payoff_amount interest_credit = calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
base_amount
(base_amount * interest_rate.daily * (due_date - eff_date)).round(places: 2)
(base_amount * interest_rate.daily * (due_date - eff_date + 1)).round(places: 2)
exit
wherami
whereami
interest_credit = calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
exit
(pre_booked_interest - interest_credit)
accounts[:lender_interest_income]
exit
print-accounting loan
print-accounting loan -b
balance
whereami
print-accounting loan
print-accounting loan -b
exit
quit
source.id
exit
pre_booked_interest = calculate_amount_due(next_due_date, last_payment_date)
interest_credit = calculate_interest_credit(next_due_date, effective_date, payoff_amount, pre_booked_interest)
exit
quit
exit
quit
print-accounting loan
exit
quit
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.accountant.entries
loan.accountant
loan.accountant.entries
loan.accountant.activities
loan.accountant.activities.entries
entries = []
loan.accountant.activities.each { |act| entries << act.entries }
entries
source
whereami
loan
entries
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
print-accounting loan -b
exit
loan
exit
eexit
exit
quit
task
task_name
tasks_to_ignore.include?(task[:parent_loan_task_cd])
edit task_label
exit
task
exit
(task_name == 'return_task' || task_name == 'cancel_task') && tasks_to_ignore.include?(task[:parent_loan_task_cd])
quit
(task_name == 'return_task' || task_name == 'cancel_task') && tasks_to_ignore.include?(task[:parent_loan_task_cd])
quit
print-accounting loan
exit
daily_interest
print-accounting
@accountant.has_valid_payment?
activity :interest, today, daily_interest
quit
print-accounting
quit
print-accounting
exit
options
quit
options
quit
interest_rate
source
exit
daily_interest
quit
id
amount_due
quit
print-accounting loan
exit
loan
print-accounting loan
expected
actual
balance
quit
exit
quit
exit
quit
exit
print-accounting loan
exit
quit
exit
quit
past_due_obligations
@past_due_obligations
past_due_obligations = pay_down_past_due_obligations(past_due_obligations, applicable_payments)
obligations
exit
quit
default_calculator_as_of(as_of).past_due_obligations
edit past_due_obligations
ls
edit lib/default_calculator.rb
whereami
default_calculator_as_of(as_of)
default_calculator_as_of(as_of).build_default_history
default_calculator_as_of(as_of).default_history
@default_history
d = default_calculator_as_of(as_of)
quit
d = default_calculator_as_of(as_of)
d.default_histroy
d.default_history
quit
d = default_calculator_as_of(as_of)
d.default_history
d
exit
quit
loan.id
source.id
edit should_charge_off?
obligation
today - obligation.due_date
whereami
quit
print-accounting loan
balance
loan.accountant.start_date = Date.parse('2014-01-02')
loan.accountant.simulate { finish Date.parse('2014-02-13')
}
obligation
today - obligation.due_date
obligation.due_date
source.obligatinos
source.obligations
exit
task_name.nil? || tasks_to_ignore.include?(task_name)
(task_name == 'return_task' || task_name == 'cancel_task') && tasks_to_ignore.include?(task[:parent_loan_task_cd])
quit
task
quit
print-accounting loan
loan
exit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
print-accounting simulator
quit
exit
print-accounting loan
loan
exit
print-accounting loan
quit
print-accounting loan
expected
actual
quit
print-accounting loan
loan
exit
print-accounting loan
loan
exit
print-accounting loan
loan
quit
print-accounting loan
loan
print-accounting loan
exit
print-accounting loan
loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
quit
loan
quit
loan
quit
loan
quit
loan
quit
loan
exit
loan
print-accounting loan
exit
LOANS_WITH_INTEREST.include? balance["loan_id"].to_i
LOANS_WITH_INTEREST.delete balance["loan_id"].to_i
LOANS_WITH_INTEREST.include? balance["loan_id"].to_i
quit
amount
quit
today
edit daily
edit app/accountants/payday_accountant
edit app/accountants/payday_accountant.rb
exit
today
amount
print-accounting
exit
quit
loan
loan.accountant
print=accounting loan
print-accounting loan
loan.reload
print-accounting loan
loan.accountant.activities.all
loan.accountant.activities.reload.all
loan.accountant.activities
loan.accountant.activities.all
whereami
loan.accountant.most_recent_effective_date || args[:date]
args[:date]
edit map_task
print-accounting loan
loan
print-accounting loan
quit
print-accounting loan
loan
loan.obligations
loan.due_date
exit
current_activity
quit
current_activity
quit
current_activity
quit
ls
@current_activity
loan
source
exit
current_activity
adjusting_activity
@adjusting_activity
current_activity
@current_activity
whereami
caller
exit
source
fee_amount
print-accounting loan
print-accounting
whereami
edit cancel_task
exit
print-accounting loan
print-accounting
fee_amount
quit
print-accounting
quit
print-accounting
quit
print-accounting 
fee_amount
balances[:defaultable_fees]
balances[defaultable_fees]
balances[:defaultable_fees]
accounts
quit
print-accounting loan
balance
quit
balance
quit
balance
print-accounting loan
expected
actual
loan
quit
loan
quit
loan
quit
loan
print-accounting _
print-accounting loan -b
loan
exit
loan
quit
print-accounting lona
print-accounting loan
loan
balance
quit
loan
quit
print-accounting loan
loan
quit
print-accounting loan
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting accountant
quit
print-accounting simulator
accountant.source_id
exit
print-accounting loan
loan
balance
quit
loan
print-accounting loan
exit
loan
print-accounting loan
loan
exit
print-accounting loan
loan
exit
print-accounting loan
exit
loan
exit
loan
print-accounting loan
balance
exit
loan
balance
print-accounting loan
quit
loan
quit
loan
quit
loan
quit
obligations
obligations.first
obligations.first.update! amount 20
obligations.first.update! amount: 20
obligations.first
obligations.first.update! amount: obligation_amount(params)
obligations.first
print-accounting accountant
exit
print-accounting accountant
exit
print-accounting loan
loan.obligations
balance
actual
print-accounting loan -b
loan
quit
task
quit
balance
print-accounting loan
actual
print-accounting loan -b
loan
exit
loan
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan
actual
balance
exit
loan
print-accounting loan
loan
balance
actual
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
exit
loan
exit
print-accounting loan
loan
exit
loan
exit
loan
exit
loan
print-accounting loan
blance
balance
actual
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
laon
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
print-accounting loan
exit
loan
exit
loan
print-accounting -b
print-accounting loan-b
print-accounting loan -b
balance
exit
edit check_balance
exit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
quit
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
actual
exit
print-accounting loan
balance
actual
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
actual
loan.accountant.balance
loan.accountant.balances
loan.accountant.accounts
exit
loan
exit
loan
print-accounting loan
loan
exit
loan
print-accounting loan
balance
actual
loan.accountant.balances
loan.accountant.accounts
exit
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
balance
print-accounting loan -b
loan
exit
loan
print-accounting loan
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
actual
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
lona
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
print-accounting loan
loan
print-accounting loan -b
balance
actual
exit
loan
print-accounting loan
balance
expected
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
print-accounting loan -b
loan
exit
loan
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
loan
exit
loan
print-accounting loan
balance
print-accounting loan
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
exit
loan
print-accounting loan
print-accounting loan -b
loan
balance
actual
exit
loan
print-accounting loan
exit
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
print-accounting loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
balance
print-accounting loan -b
loan
exit
loan
print-accounting loan
exit
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting -b
print-accounting loan -b
print-accounting laon
print-accounting loan 
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
exit
loan
print-accounting loan
loan
exit
loan
exit
loan
exit
loan
exit
lona
loan
exit
lona
loan
exit
loan
exit
loan
exit
loan
exit
lona
loan
exit
laon
loan
print-accounting loan
balance
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
edit check_balance
loan.id
exit
loan
[36228112, 36226228, 36229496].include?(loan.id)
[36228112, 36226228, 36229496].any?(loan.id)
edit check_balance
exit
loan.id
actual == expected && ![36228112, 36226228, 36229496].include?(loan.id)
actual == expected || ![36228112, 36226228, 36229496].include?(loan.id)
edit check_balance
exit
loan.id
print-accounting loan
balance
actual
edit check_balance
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
print-accounting loan
print-accounting loan -b
loan
edit check_balance
exit
balance
DecNum(balance["amount"])
expected = DecNum(balance["amount"])
exit
edit check_balance
exit
balance["amount"]
balance
exit
print-accounting loan
loan
quit
loan
exit
loan
print-accounting loan
loan
exit
loan
print-accounting loan
exit
loan
exit
loan
exit
loan
exit
loan
exit
laon
loan
exit
loan
exit
loan
exit
print-accounting loans
print-accounting loan
loan.obligations
loan.issued
loan.issued?
exit
params
exit
loan.issued
loan.issued?
args[:task_name]
quit
loan
exit
loan
print-accounting loan
loan.obligations
balance
exit
loan
exit
print-accounting loan
print-accounting 
quit
options
options.empty?
edit accountant
exit
accountant(schedule: schedule)
options
exit
accountant(schedule: schedule)
print-accounting accountant(schedule: schedule)
exit
accountant(schedule: schedule)
exit
print-accounting accountant(schedule: schedule)
exit
schedule
accountant.simulated_accountant(schedule: schedule, start_date: schedule.min_start_date, activities:nil, end_date: Date.current)
accountant.simulating_accountant(schedule: schedule, start_date: schedule.min_start_date, activities:nil, end_date: Date.current)
accountant.simulating_accountant(schedule: schedule, start_date: schedule.min_start_date, activities:nil)
acc = accountant.simulating_accountant(schedule: schedule, start_date: schedule.min_start_date, activities:nil)
print-accounting acc
acc.date
acc.start_date
acc.finish Date.current
acc.date
print-accounting acc
exit
print-accounting acc
exit
print-accounting acc
exit
print-accounting loan
balance
obligations
loan.obligations
exit
loan
exit
loan
self
whereami
edit obligation_amount
exit
print-accounting
exit
print-accounting
acc.balances[:outstanding]
Date.current
today
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
loan.accountant.accounts
print-accounting loan -b
loan
exi
exit
loan
print-accounting loan
exit
loan
exit
loan
print-accounting loan
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
exit
loan
exit
loan
exit
balance
actual
print-accounting loan
loan
print-accounting loan -b
exit
print-accounting loan
balance
exit
loan
exit
loan
print-accounting loan
exit
laon
loan
exit
print-accounting
@date
date
exit
date
@date
exit
print-accounting
date
@date
@start_date
exit
acc
print-accounting acc
acc.schedule
acc.schedule.relevant_activities
exit
@date
end_date
exit
print-accounting loan
balance
actual
print-accounting loan -b
loan
quit
loan
print-accounting -b
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
laon
loan
print-accounting loan
loan
balance
actual
quit
loan
quit
loan
quit
print-accounting loan
balance
actual
print-accounting loan -b
loan
exitexit
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
balance
actual
exit
laon
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting balance
print-accounting loan -b 
exit
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
exit
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
print-accounting loan
balance
amount
actual
print-accounting loan -b
loan
exit
print-accounting oan
print-accounting loan
balance
actual
loan.accountant.accounts
print-accounting loan -b
exit
loan
print-accounting loan
loan.obligations
balance
actual
print-accounting loan -b
exit
loan
print-accounting loan
print-accounting loan -b
exit
loan
print-accounting loan
print-accounting loan -b
loan
balance
actual
exit
loan
balance
actual
print-accounting loan
balance
print-accounting loan -b
exit
lona
loan
balance
actual
print-accounting loan
print-accounting loan -b
exot
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
balance
actual
print-accounting loan
exit
loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
loan
exit
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
exit 
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
exit
loan
exit
loan
balance
actual
print-accounting loan
balance
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
balance
exit
loan
print-accounting loan
balance
print-accounting loan -b
exit
loan
print-accounting loan
balance
print-accounting loan -b
loans
loan
exit
loan
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
print-accounting loan -b
loan
exit
loan
balance
print-accounting loan -b
exit
loan
balance
actual
print-accounting loan 
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
print-accounting loan -b
loan
exit
loan
balance
actual
print-accounting loan -b
exit
loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
loan
balance
actual
print-accounting loan -b
loan
exit
loan
balance
actual
loan.accountant.accounts
exit
loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
loan
balance
actual
loan.accountant.accounts
exit
loan
balance
actual
loan.accountant.accounts
exit
loan
balance
actual
print-accounting loan 
print-accounting loan -b
loan
exit
loan
balance
actual
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
loan
balance
actual
print-accounting loan 
print-accounting loan -b
balance
exit
loan
balance
actual
loan.accountant.accounts
exit
loan
balance
actual
print-accounting loan
print-accounting loan -b
balance
exit
loan
balance
actual
print-accounting loan
print-accounting loan -b
balance
exit
failing = [36228427, 36226842, 36178479, 36178876, 36179531, 36178491, 36215093]
used_to_fail = [36173225, 36172252, 36178491, 36178479, 36178876, 36179531, 36234570, 36228339, 36215577,36215093,36220922,36226842,36228427
]
used_to_fail - failing
failing = [36228427, 36180318, 36222680, 36232790, 36226842, 36171165, 36124184, 36142602, 36165167, 36178479, 36176107, 36165621, 36178876, 36223559, 36217693, 36179531, 36233004, 36224613, 36170470, 36179715, 36226228, 36214981, 36178491, 36225785, 36179685, 36215093]
used_to_fail = [36170470,36171165,36176107,36180318,36176103,36179715,36179685,36222680,36232790,36233004,6231189,36224613,36223559,36217693,36214458,36227481,36225785,36214981,36225069,36227314,36216011,36226475,36226228,36124184,36165167,36142602,36165621,36228427,36226842, 36178479, 36178876,  36179531,36178491,36215093
]
used_to_fail - failing
Date.parse('2014-01-02') + 61
Date.parse('2014-01-16') + 61
Date.parse('2014-01-14') + 61
Date.parse('2014-01-13') + 61
used_to_fail = [36225713,36215098,36214824,36217791, 36219020,36232919,36225906,36233248,36222596,36211901,36173237,36172139,36220599,36228735,36202974]
failing = [36228735, 36220599, 36225713, 36214824, 36202974, 36172139]
used_to_fail - failing
Date.today
Date
Date.today.to_s
Date.today.to_inspec
Date.today.to_inspect
Date.today.inspect
print-accounting loan
loan
exit
print-accounting loan
loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
balance
actual
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
balance
actual
loan.accountant.accounts
loan.obligations
loan
exit
print-accounting loan
balance
actual
loan.accountant.balances
loan.accountant.accoutns
loan.accountant.accounts
exit
print-accounting loan
exit
print-accounting loan
balance
actual
loan.accountant.accounts
exit
print-accounting oan
print-accounting loan
exit
print-accounting loan
loan
exit
loan
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
balance
actual
exit
print-accounting loan
balance
exit
print-accounting loan
exit
print-accounting loan
loan.obligations
Date.parse('2014-01-10')
Date.parse('2014-01-10') + 61
balance
exit
loan
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
balance
actual
exit
print-accounting loan
exit
be rspec
exit
print-accounting loan
exit
print-accounting loan
balance
actual
exit
loan
exit
loan
print-accounting loan
balance
actual
loan.accountant.accounts
exit
loan
actual
balance
print-accounting loan
loan.accountant.accounts
exit
failing = [36132960, 36135215, 36166881, 36167398, 36169771, 35979881, 36143363, 36149532, 36172112, 36180313, 35978811, 36154711, 36178857, 36144992, 36165868, 36160631, 36168374, 36150740, 36045982, 36145519, 36155800, 36170034, 36140298, 36167169, 36120188, 36168114, 36132976, 36162123, 36172476, 36174472, 36062549, 36173206, 36158499, 36162373, 36175717, 36135991, 36176728, 36170098, 36020643, 36140743, 36125572, 36169899, 36161095, 36144476, 36170430, 36163076, 36162673, 36151561, 36176305, 36186117, 36156262, 36062834, 36180417, 36161515, 36178223, 36082136, 36176534, 36163713, 36168707, 36164165, 36144582, 36166152, 36173314, 36178592, 36124590, 36142971, 36152877, 36131366, 36170175, 36038991, 36061266, 36181261, 36116098, 36139757, 36180476, 36142696, 36168631, 36144765, 36111510, 36082870, 36169499, 36162700, 36177914, 36183410, 36156177, 36180777, 36144260, 36159573, 36177785, 36164596, 36025938, 36165168, 36012479, 36162748, 36163812, 36057091, 36078685, 36027143, 36176093, 36025550, 36172877, 36180230, 36166624, 36175784, 36142093, 36181954, 36170243, 36162998, 36161967, 36175456, 36178128, 36136195, 36147006, 36180786, 36168806, 36150244, 36155236, 36168885, 35970741, 36187168, 36163868, 36160692, 36169096, 36176022, 36068457, 36096866, 36157945, 36163837, 36120341, 36169560, 36171685]
used_to_fail = [36170175, 36172476, 36144765, 36168806, 36150244, 36120341, 36167398, 36124590, 36169771, 36149532, 36151561, 36116098, 36082870, 36180417, 36180777, 36162998, 36169899, 36025938, 36163812, 36160631, 36144992, 36162373, 36142971, 36142696, 36183410, 36136195, 36168885, 36169560, 36144476, 36166152, 36172877, 36068457, 36171685, 35979881, 36178857, 36045982, 36164165, 36139757, 36168631, 36157945, 36120188, 36168707, 36180917, 36180313, 36125572, 36163076, 36162673, 36111510, 36187168, 36172112, 36175717, 36180476, 36177785, 36144260, 36181954, 36155236, 36147006, 36155800, 36169096, 36144582, 36162700, 36132976, 36167169, 36170430, 36178592, 36096866, 36087314, 36140298, 36176534, 36132960, 36150740, 36131366, 36181261, 36012479, 36160692, 35978811, 36176728, 36156262, 36038991, 36177914, 36057091, 36159573, 35970741, 36152877, 36162748, 36140743, 36061266, 36169499, 36165168, 36158499, 36143363, 36170034, 36162123, 36163713, 36180786, 36154711, 36173314, 36078685, 36169155, 36161515, 36161967, 36176874, 36163837, 36166881, 36168114, 36174472, 36170098, 36176305, 36164596, 36170243, 36178128, 36062549, 36135991, 36062834, 36178223, 36176022, 36180230, 36135215, 36156177, 36027143, 36145519, 36082136, 36179893, 36176093, 36025550, 36165868, 36173206, 36161095, 36175784, 36142093, 36175456, 36163868, 36020643, 36186117, 36166624, 36168374]
used_to_fail - failing
exit
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  book = (base_amount * total_days * rate)
  cnu_credit = payoff_amount - book * rate * (total_days - days_between)
end
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  result = {
    book: (base_amount * total_days * rate,
cnu_credit:  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2),
interest_earned: (base_amount * total_days * rate * days_between.floor(places: 2),
cnu_interest: book - cnu_credit,
actual_interest: interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between),
}
result[:diff] =  result[:cnu_interest] - result[:actual_interest]
result
end
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  result = {
    book: (base_amount * total_days * rate,
cnu_credit:  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2),
interest_earned: (base_amount * total_days * rate * days_between.floor(places: 2),
cnu_interest: book - cnu_credit,
actual_interest: interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
}
result[:diff] =  result[:cnu_interest] - result[:actual_interest]
result
end
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  result = {
    book: (base_amount * total_days * rate,
cnu_credit:  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2),
interest_earned: (base_amount * total_days * rate * days_between.floor(places: 2),
cnu_interest: book - cnu_credit,
actual_interest: interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
}
result[:diff] =  result[:cnu_interest] - result[:actual_interest]
result
end
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  result = {
    book: (base_amount * total_days * rate),
    cnu_credit:  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2),
    interest_earned: (base_amount * total_days * rate) * days_between.floor(places: 2),
    cnu_interest: book - cnu_credit,
    actual_interest: interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
  }
  result[:diff] =  result[:cnu_interest] - result[:actual_interest]
  result
end
off_amount(1800, 450, 10, 30, 0.0002739726)
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  book= (base_amount * total_days * rate)
  cnu_credit:  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2)
  interest_earned: (base_amount * total_days * rate) * days_between.floor(places: 2)
  actual_interest: interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
  {
    book: book,
    cnu_credit: cnu_credit,
    cnu_interest: book - cnu_credit,
    interest_earned: interest_earned,
    actual_interest: actual_interest,
    diff: cnu_interest - actual_interest
  }
end
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  book= (base_amount * total_days * rate)
  cnu_credit=  (payoff_amount - book) * rate * (total_days - days_between).round(places: 2)
  interest_earned= (base_amount * total_days * rate) * days_between.floor(places: 2)
  actual_interest= interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
  {
    book: book,
    cnu_credit: cnu_credit,
    cnu_interest: book - cnu_credit,
    interest_earned: interest_earned,
    actual_interest: actual_interest,
    diff: cnu_interest - actual_interest
  }
end
off_amount(1800, 450, 10, 30, 0.0002739726)
def off_amount(base_amount, payoff_amount, total_days, days_between, rate)
  book= (base_amount * total_days * rate)
  cnu_credit=  ((payoff_amount - book) * rate * (total_days - days_between)).round(places: 2)
  interest_earned= (base_amount * total_days * rate) * days_between.floor(places: 2)
  actual_interest= interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between)
  {
    book: book,
    cnu_credit: cnu_credit,
    cnu_interest: book - cnu_credit,
    interest_earned: interest_earned,
    actual_interest: actual_interest,
    diff: cnu_interest - actual_interest
  }
end
off_amount(1800, 450, 10, 30, 0.0002739726)
edit off_amount
off_amount(1800, 450, 10, 30, 0.0002739726)
book
base_amount
base_amount * 31 * 0.1/365 * 31
base_amount * 31 * 0.1/365
total_days
days_between
bookcnu_credit=  ((payoff_amount - book) * rate * (total_days - days_between)).round(places: 2)
(payoff_amount - book) * rate * (total_days - days_between)
(payoff_amount - book) * rate * (total_days - days_between).round(places: 2)
include Flt
(payoff_amount - book) * rate * (total_days - days_between).round(places: 2)
(payoff_amount - book) * rate * (total_days - days_between).round(2)
D(payoff_amount - book) * rate * (total_days - days_between)
BigDecimal(payoff_amount - book) * rate * (total_days - days_between)
BigDecimal(payoff_amount - book) * rate * (total_days - days_between, 20)
BigDecimal(payoff_amount - book) * rate * (total_days - days_between), 20
edit off_amount
off_amount(1800, 450, 30, 10, 0.0002739726)
edit off_amount
off_amount(1800, 450, 30, 10, 0.0002739726)
edit off_amount
off_amount(1800, 450, 30, 10, 0.0002739726)
edit off_amount
off_amount(1800, 450, 30, 10, 0.0002739726)
off_amount(1800, 900, 30, 10, 0.0002739726)
off_amount(1800, 100, 30, 10, 0.0002739726)
off_amount(1800, 100, 60, 10, 0.0002739726)
off_amount(1800, 100, 60, 20, 0.0002739726)
off_amount(1800, 100, 60, 30, 0.0002739726)
off_amount(1800, 100, 60, 5, 0.0002739726)
Date.parse('2014-01-03') - Date.parse('2013-12-04')
off_amount(1800, 100, 30, 28, 0.0002739726)
off_amount(2160, 100, 30, 28, 0.0002739726)
edit off_amount
off_amount(2160, 100, 30, 28, 0.0002739726)
off_amount(2250, 100, 30, 28, 0.0002739726)
off_amount(2250, 100, 30, 10, 0.0002739726)
off_amount(2250, 100, 60, 10, 0.0002739726)
off_amount(2250, 90, 30, 28, 0.0002739726)
off_amount(2250, 2250, 30, 23, 0.0002739726)
off_amount(2250, 2250, 30, 23, 0.000273972602739726)
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
off_amount(2250, 2250, 31, 24, 0.000273972602739726)
off_amount(2250, 2250, 31, 22, 0.000273972602739726)
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
19.1 - 4.93
Date.parse('2014-01-31') - Date.parse('2014-01-23')
Date.parse('2014-01-23') - Date.parse('2013-12-31')
off_amount(2250, 2250, 30, 23, 0.000273972602739726)
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
edit off_amount
class Float
  def round_down n=0
    s = self.to_s
    l = s.index('.') + 1 + n
    s.length <= l ? self : s[0,l].to_f
  end
end
edit off_amount
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
class Float
  def round_down n=0
    s = self.to_s
    l = s.index('.') + 1 + n
    s.length <= l ? self : s[0,l].to_f
  end
end
edit off_amount
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
book
cnu_credit=  ((payoff_amount - book) * rate * (total_days - days_between)).round(2)
interest_earned= (base_amount * days_between * rate).round_down(2)
actual_interest= interest_earned + (base_amount - payoff_amount + interest_earned) * rate * (total_days - days_between).round_down(2)
exit
print-accounting
@date
@start_date
exit
print-accounting
@start_date
exit
print-accounting
@start_date
exit
print-accounting
@start_date
exit
print-accounting
exit
print-accounting
exit
source
exit
edit off_amount
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
edit off_amount
off_amount(2250, 2250, 31, 23, 0.000273972602739726)
off_amount(2250, 2250, 31, 10, 0.000273972602739726)
off_amount(2250, 2250, 31, 1, 0.000273972602739726)
off_amount(2250, 250, 31, 1, 0.000273972602739726)
off_amount(2250, 0, 31, 1, 0.000273972602739726)
off_amount(2250, 20, 31, 1, 0.000273972602739726)
off_amount(2250, 20, 1, 1, 0.000273972602739726)
off_amount(2250, 1, 31, 1, 0.000273972602739726)
quit
loan
source
print-accounting
print-accounting -b
source.defaults
exit
loan.obligations
source.obligations
default_activity
exit
source.obligations
default_activity
exit
default_activity
source.obligations
exit
loan
print-accounting
print-accounting loan
quit
print-accounting loan
loan
quit
loan
print-accounting loan
loan.defaults
exit
print-accounting loan
loan.defaults
exit
print-accounting loan
loan.defaults
exit
print-accounting loan
exit
print-accounting loan
edit check_balance
exit
loan.id
[36062549, 36087314, 36125572, 36147006, 36154711, 36168707, 36169155, 36170098, 36172476, 36175717, 36176874, 36178592, 36179893, 36180917].include?(36132960)
edit check_balance
exit
loan
[36062549, 36087314, 36125572, 36147006, 36154711, 36168707, 36169155, 36170098, 36172476, 36175717, 36176874, 36178592, 36179893, 36180917].include?(36154711)
print-accounting loan
print-accounting loan -b
exit
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
loan
print-accounting loan
exit
edit check_balance
print-accounting loan
loan
edit check_balance
exit
loan
print-accounting loan
edit check_balance
print-accounting loan
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loa
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
print-accounting loan
loan
loan.obligatoins
loan.obligations
exit
loan
print-accounting loan
edit check_balance
exit
print-accounting loan
loan
edit check_balance
exit
activity :issue, Date.today, 200
whereami
caller
self
:issue, Date.today, 200
send(:issue, Date.today, 200)
self
self.activities
exit
Loan.should_receive(:update_obligation)
loan.accountant.simulate do
  send :refinance, Date.today, 200
end
exit
return unless ["fee_discount", "refinance"].any? { |type| activity.type?(type) }
["fee_discount", "refinance"].any? { |type| activity.type?(type) }
quit
source.update_obligation
exit
source.update_obligation(eff_date: activity.effective_date)
quit
source.update_obligation(eff_date: activity.effective_date)
quit
source.update_obligation(eff_date: activity.effective_date)
persisted?
save! unless persisted?
exit
loan
loan.obligations
loan.id
loan
exit
source
source.obligations
source.past_due_obligations
Date.current
exit@
exit
loan.defaults.first.slice(:default_date,:start_date,:end_date).symbolize_keys.should eq results
exit
whereami
self
self.class
self.class._context
self.class.ancestors
ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }.try(:_context)
self.class.ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }.try(:_context)
self.class.ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self.class.ancestors[1..-1].
self.class.ancestors[1..-1]
self.class.ancestors[1..-1].find { |anc| anc.respond_to?(:context) }
context
example
example.context
_context
ancestors
exit
loan
exit
loan
loan.should be_issued
exit
context.loan
exit
context
exit
context
exit
edit loan_under_test
exit
loan
world
exit
loan_under_test
exit
quit
context
context.loan
exit
@group
@group.world
@group.world.procs
@group.world.methods
ancestors
@group.ancestors
@group.ancestors.find { |a| a.respond_to? :loan }
LoanExampleGroup
LoanExampleGroup.respond_to? :loan
loan
exit
@group
edit let
edit group.let
@group.let
edit @group.let
MemoizedHelpers
edit @group.let
@group.let(:me) { 1 }
whereami
MemoizedHelpers.module_for(self)
MemoizedHelpers.module_for(self).methods
whereami
__memoized
__memoized.fetch(name)
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(RSpec.current_example, &nil) } }
Rspec.current_example
super(RSpec.current_example, &nil)
MMemoizedHelpers.module_for(self)
self
MemoizedHelpers.module_for(self)
MemoizedHelpers.module_for(self)[name]
MemoizedHelpers.module_for(self).fetch(name)
edit define_method
edit MemoizedHelpers.module_for(self).define_method
edit RSpec::ExampleGroups::Accountant_2::LetDefinitions
edit LetDefinitions
exit
wherami
whereami
ls
ls @group
@group.LetDefinitions
@group.const_get(LetDefinitions)
@parent_groups
@super_class_metadata
@context
@examples
LetDefinitions
exit
caller
exit
caller
MemoizedHelpers.module_for(self)
exit
Memoized_helpers
cd .
edit module_for
edit MemoizedHelpers.module_for
MemoizedHelpers.module_for
self
MemoizedHelpers.module_for(self)
edit define_method
m = __send__(:define_method, name, &block)
name
m.world
m.methods
whereami
m
m = MemoizedHelpers.module_for(self)
m.__send__(:define_method, name, &block)
c = m.new
c = m.send(name)
m.methods
whereami
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(RSpec.current_example, &nil) } }
proc.call
block.arity
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }.call
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }
_.call
MemoizedHelpers.module_for(self).__send__(:define_method, name, &block)
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }.call
define_method(name) { __memoized.fetch(name) { |k| __memoized[k] = super(&nil) } }.methods
whereami
exit
caller
exit
caller
exit
edit let
exit
edit on
exit
loan
loan = 1
exit
loan
loan = 1
exit
lc.instance_exec(&block)
exit
lc.instance_exec(&block)
lc.loan
lc.instance_exec { @loan }
lc.instance_exec { default_dates }
lc.instance_exec { default_dates(2) }
exit
lc.instance_exec(&block)
lc.instance_exec { binding.pry}
whereami
exit
date
caller
whereami
date
Date.tomorrow + 14
exit
loan
print-accounting loan
loan.obligations
loan.defaults
quit
assert_loan_status :in_default
exit
date
it
exit
date
yield
exit
params[:defaults]
exit
match
defaults
exit
assert_loan_status :in_default
loan
loan.in_default?
loan
print-accounting loan
loan.obligations
loan.defaults
quit
exit
match
defaults
defaults.delete match
defaults.reject match
defaults -= match
defaults
defaults.to_a
defaults.delete match
defaults
match
defaults.to_a.delete match
defaults
defaults.to_a!
defaults = defaults.to_a
defaults.delete match
defaults
match
expect(match).to exist
expect(match).to be_truthey
expect(match).to be_truthy
expect(nil).to be_truthy
expect(match).not.to be_nil
expect(match).not_to be_nil
match
expect(match).not_to be_nil
match.nil?
expect(nil).not_to be_nil
expect(nil).not_to be_nil, "Expected default"
exit
print-accounting loan
cancel 1, cancellation_dat
cancel 1, cancellation_date
exit
accountant.persisted?
exit
source
source.persisted?
self.persisted?
source.save!
self.persisted?
exit
loan.persisted?
exit
print-accounting loan
loan.in_default?
exit
ls
ob
exit
loan.obligations
exit
date
Date
Date.today
Date.tomorrow
date
print-accounting loan
loan.obligations
date
exit
Date.today
Date.tomorrow
on "#{Date.tomorrow}" {}
on("#{Date.tomorrow}") {}
exit
on("#{Date.tomorrow}") {}
date
exit
date
exit
quit
exit
description
example
exit
described_class
exit
base_class
exit
Loan.find 36161095
print-accounting _
l = Loan.find 36161095
l.accountant.finish(Date.today)
print-accounting l
exit
e
exit
print-accounting loan
accountant.perform_task(task_name, task_args[:task_id], task_args[:date],loan.daily_fee, { due_date: loan.due_date, effective_date: loan.issue_date } )
loan.fee_amount
edit loan.obligation_amount
accountant.perform_task(task_name, task_args[:task_id], task_args[:date],loan.daily_fee, { due_date: loan.due_date, effective_date: loan.issue_date } )
exit
accountant.perform_task(task_name, task_args[:task_id], task_args[:date],loan.daily_fee, { due_date: loan.due_date, effective_date: loan.issue_date } )
print-accounting loan
loan.daily_fee
exit
edit map_task
exit
print-accounting
today
caller
exit
print-accounting
exit
print-accounting
exit
fee
print-accounting
today
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
calleer
caller
exit
print-accounting
exit
print-accounting loan
quit
activities
activities.on(date)
activities.on?(date)
activities.effective?(date)
activities.effective(date)
date
exit
print-accounting
exit
print-accounting
exit
print-accounting loan
exit
print-accounting
today
exit
today
print-accounting
exit
today
print-accounting 
exit
print-accounting loan
exit
print-accounting loan
exit
caller
exit
caller
print-accounting loan
whereami
print-accounting
today
exit
print-accounting
exit
print-accounting
print-accounting loan
exit
print-accounting loan
print-accounting
exit
print-accounting simulator
print-accounting simulator -b
exit
print-accounting
exit
print-accounting
exit
print-accounting
loan.fee_amount
source.fee_amount
print-accounting -b
exit
loan
source.due_date
exit
loan
exit
print-accounting lona
exit
print-accounting lona
date
exit
print-accounting loan
exit
print-accounting lona
print-accounting loan
loan.obligations
exit
assert_accounts fee_income: (loan.fee_amount / loan.due_date - loan.issue_date).floor(places: 2)
loan.due_date - loan.issue_date
loan.fee_amount / loan.due_date - loan.issue_date
loan.fee_amount
loan.fee_amount / D(loan.due_date - loan.issue_date)
exit
num_days
-num_days * (loan.fee_amount / D(loan.due_date - loan.issue_date)).floor(places: 2)
exit
used_to_fail = [36132960, 36135215, 36166881, 36167398, 36169771, 35979881, 36143363, 36149532, 36172112, 36180313, 35978811, 36154711, 36178857, 36144992, 36165868, 36160631, 36168374, 36150740, 36045982, 36145519, 36155800, 36170034, 36140298, 36167169, 36120188, 36168114, 36132976, 36162123, 36172476, 36174472, 36062549, 36173206, 36158499, 36162373, 36175717, 36135991, 36176728, 36170098, 36020643, 36140743, 36125572, 36169899, 36161095, 36144476, 36170430, 36163076, 36162673, 36151561, 36176305, 36186117, 36156262, 36062834, 36180417, 36161515, 36178223, 36082136, 36176534, 36163713, 36168707, 36164165, 36144582, 36166152, 36173314, 36178592, 36124590, 36142971, 36152877, 36131366, 36170175, 36038991, 36061266, 36181261, 36116098, 36139757, 36180476, 36142696, 36168631, 36144765, 36111510, 36082870, 36169499, 36162700, 36177914, 36183410, 36156177, 36180777, 36144260, 36159573, 36177785, 36164596, 36025938, 36165168, 36012479, 36162748, 36163812, 36057091, 36078685, 36027143, 36176093, 36025550, 36172877, 36180230, 36166624, 36175784, 36142093, 36181954, 36170243, 36162998, 36161967, 36175456, 36178128, 36136195, 36180786, 36168806, 36150244, 36155236, 36168885, 35970741, 36187168, 36163868, 36160692, 36169096, 36176022, 36068457, 36096866, 36157945, 36163837, 36120341, 36169560, 36171685]
failing = [36176534, 36132960, 36169560, 36135215, 36082136, 36178223, 36120341, 36157945, 36163837, 36166881, 36171685, 36167398, 36062834, 36180417, 36156262, 36169771, 36087314, 36176305, 36144582, 35979881, 36143363, 36068457, 36163713, 36096866, 36149532, 36172112, 36176022, 36169096, 36180313, 36160631, 36151561, 36176874, 35978811, 36168707, 36178857, 36160692, 36144992, 36165868, 36187168, 36168374, 36186117, 36150740, 36154711, 35970741, 36152877, 36163868, 36045982, 36145519, 36155800, 36170034, 36062549, 36140298, 36167169, 36180476, 36155236, 36120188, 36116098, 36139757, 36061266, 36181261, 36038991, 36168114, 36132976, 36162123, 36168885, 36162700, 36174472, 36173206, 36168806, 36172476, 36150244, 36082870, 36162373, 36111510, 36175717, 36180786, 36169155, 36144765, 36135991, 36142971, 36175456, 36170098, 36020643, 36161967, 36124590, 36140743, 36162998, 36136195, 36180917, 36178128, 36166152, 36179893, 36125572, 36170175, 36169899, 36131366, 36176728, 36161095, 36144476, 36181954, 36170243, 36170430, 36142093, 36163076, 36162673, 36166624, 36175784, 36172877, 36176093, 36025550, 36027143, 36180230, 36078685, 36161515, 36164165, 36162748, 36057091, 36173314, 36178592, 36012479, 36025938, 36177785, 36165168, 36144260, 36156177, 36180777, 36164596, 36142696, 36169499, 36168631, 36177914, 36147006, 36183410, 36159573, 36158499, 36163812]
failing - used_to_fail
quit
loan
exit
source.fee_amount
exit
e
task_name
exit
edit perform_task
exit
expected
actual
print-accounting loan
print-accounting loan -b
loan
whereami
balance
actual
exit
print-accounting loan
balance
loan
loan.fee_amount
loan.fee_amount.to_f
loan.accountant.finish(Date.parse('2014-01-03') + 2)
print-accounting loan
exit
print-accounting loan
balance
exit
balance
print-accounting loan
exit
balance
loan.accounts
loan.accountant.accounts
exit
balance
loan.accountant.accounts
edit check_balance
exit
print-accounting lona
print-accounting loan
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
loan.accountant.accounts
balance
exit
balance
loan.accountant.accounts
print-accounting loan
loan
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
actual
print-accounting loan
loan.accounts
loan.accountant.accounts
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan
exit
balance
loan.accountant.balances
loan.accountant.accounts
print-accounting loan
loan.fee_amount
26.76 + 49.69
loan
balance
print-accounting loan -b
balance
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
loan.accountant.accounts
balance
print-accounting loan
balance
print-accounting loan
loan.accountant.accounts
balance
exit
balance
loan.accountant.accounts
exit
loan
balance
print-accounting loan
loan
print-accounting loan -b
exit
balance
print-accounting loan -b
exit
balance
loan.accountant.accounts
exit
loan.accountant.accounts
balance
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
loan.accountant.accounts
print-accounting loan
loan
exit
balance
loan.accountant.accounts
print-accounting loan
balance
exit
balance
loan.accountant.accounts
print-accounting loan
loan
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
loan
balance
loan.accountant.balances
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
loan.accountant.accounts
loan
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
print-accounting loan -b
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
loan.accountant.accounts
balance
exit
balance
loan.accountant.accounts
exit
balance
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
balance
exit
balance
loan.accountant.accounts
print-accounting loan
balance
exit
balance
print-accounting loan
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
loan
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
exiit
exit
balance
loan.accountant.accountant
loan.accountant.accounts
print-accounting loan -b
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
loan.accountant.accounts
print-accounting loan
exit
balance
loan.accountant.accounts
exit
balance
loan.accountant.accounts
print-accounting loan
loan
exit
loan
balance
loan.accountant.accounts
exit
print-accounting 
exit
balance
print-accounting loan
exit
balance
print-accounting 
print-accounting loan
exit
balance
print-accounting loan
exit
print-accounting loan
exit
edit perform_task
exit
print-accounting loan
blance
balance
loan.accountant.balances
loan.accountant.accounts
loan
exit
balance
exit
factory_type
exit
edit build_loan
exit
params
FactoryGirl.build(factory_type, params)
exit
print-accounting loan
exit
print-accounting loan
exit
quit
exit
print-accounting loan
loan.due_date
quit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
loan.accountant.finish(loan.due_date)
print-accounting loan
exit
;wq
ls
client
exit
client
exit
client
exit
client
exit
client
exit
client
exit
client.loan_characteristics
client.loan_characteristics 33103712
client.unprocessed_loan_tasks
client.unprocessed_loan_tasks 33103712
exit
client.unprocessed_loan_tasks 33103712
exit
client.unprocessed_loan_tasks 33103712
transform_loan_tasks(client.unprocessed_loan_tasks(33103712))
client
client.unprocessed_loan_tasks 33103712
transform_loan_tasks(client.unprocessed_loan_tasks(33103712))
transform_tasks(client.unprocessed_loan_tasks(33103712))
client.unprocessed_loan_tasks 33103712
transform_tasks(client.unprocessed_loan_tasks(33103712)["loan_tasks'])
")
transform_tasks(client.unprocessed_loan_tasks(33103712)["loan_tasks"])
exit
print-accounting loan
exit
edit check_balance
exit
transform_tasks(client.unprocessed_loan_tasks(params[:id])["loan_tasks"])
loan = Loan.find transform_tasks(client.unprocessed_loan_tasks(params[:id])["loan_tasks"])
loan = Loan.find params[:id]
loan = Loan.where(id: params[:id]).first
client.loan_characteristics params[:id]
loan = Loan.new client.loan_characteristics params[:id]
exit
loan
loan.firs
loan.first
Loan.first(params[:id])
loan = Loan.first(id: params[:id])
Loan.where(id: params[:id]).first
exit
Region
Region.all
Region["CA"]
loan
loan = Loan.create loan_chars
loan
loan.persisted?
loan.region
loan.country
loan.product
exit
loan
transform_tasks(client.unprocessed_loan_tasks(loan.id)["loan_tasks"])
exit
transform_tasks(client.unprocessed_loan_tasks(loan.id)["loan_tasks"])
loan
exit
task_args[:amount]
accountant.perform_task(task_name, task_args[:task_id], task_args[:date], task_args[:amount])
Flt
Flt.CONTEXT
task_args[:amount]
D(task_args[:amount])
accountant.perform_task(task_name, task_args[:task_id], task_args[:date], D(task_args[:amount]))
e
D(task_args[:amount])
exit
accountant.perform_task(task_name, task_args[:task_id], task_args[:date], D(task_args[:amount]))
exit
D(task_args[:amount])
D(task_args[:amount]).to_big_decimal
require "flt_conversions"
accountant.perform_task(task_name, task_args[:task_id], task_args[:date], D(task_args[:amount]))
exit
edit map_task
exit
loan
Loan.find 33103712
exit
accountant.perform_task(task_name, task_args[:task_id], task_args[:date], task_args[:amount])
print-accounting loan
exit
amount
amount_name
task[amount_name]
task
exit
transformed_task[:amount]
exit
print-accounting loan
tasks
exit
loan
tasks = transform_tasks(client.unprocessed_loan_tasks(loan.id)["loan_tasks"])
tasks.each do |task|
  start_date = loan.accountant.most_recent_effective_date || task[:date]
  loan.accountant.save! if ["cancel", "return"].include?(task[:task_name])
  map_task(loan, task, start_date)
end
loan.accountant
exit
loan
loan.accountant
options = { source: self, schedule: AccountingSchedule.new(self) }
options[:interest_rate] = interest_rate.to_r if product == "cso"
options
exit
@accountant ||= klass.new(accountant_options)
klass
accountant_options
exit
options[:schedule] && start_date
@activities = ActivitySet.new(source_id, start_date, activities)
calculate_account_values(@start_date) if books.any? { |book| book.accounts.empty? }
exit
@accountant ||= klass.new(accountant_options)
loan.accountant
exit
edit show
exit
amount
task_name
exit
activities
activities.select { |act| act.task_id == task_id_to_cancel }
task_id_to_cancel
activities.select { |act| act.task_id == task_id_to_cancel.to_i }
exit
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
loan
source
source.simulated_accountant(source.issue_date, date)
print-accounting source.simulated_accountant(source.issue_date, date)
print-accounting source.simulated_accountant(source.issue_date, date-1)
print-accounting
print-accounting source.simulated_accountant(source.issue_date, date-1)
print-accounting source.simulated_accountant(date-1, date-1)
print-accounting source.simulated_accountant(date-2, date-1)
print-accounting source.simulated_accountant(date-1, date-1)
exit
accounts_before_cancel
date
print-accounting source.simulated_accountant(date-1, date-1).accounts
print-accounting source.simulated_accountant(date-1, date-1)
date
exit
source.simulated_accountant(activity_to_cancel.effective_date-1, activity_to_cancel.effective_date-1).accounts
print-accounting source.simulated_accountant(activity_to_cancel.effective_date-1, activity_to_cancel.effective_date-1)
print-accounting source.simulated_accountant(activity_to_cancel.effective_date-1, activity_to_cancel.effective_date)
exit
print-accounting loan
exit
print-accounting loan
exit
activity
activity.entries
activity.entries.each
activity.entries.first
ent = _
ent.debit_account
ent.entry_type
ent.entry_type.dr
ent.entry_type.dr.name
ent.amount
exit
rake "db:seed"
print-accounting
exit
print-accounting
source
print-accounting -b
activity
whereami
exit
activity
exit
print-accounting
whereami
context = ActivityContext.new(self, book, today, activity)
exit
original_current_activity
exit
original_current_activity
@current_activity
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
source
exit
processes = capture :ps, "-ef | grep puma | grep -v grep | awk '{print $2}'"
processes.empty?
execute :kill, "#{processes.gsub!("\r\n", " ")}" unless processes.empty?
processes = capture :ps, "-ef | grep ssh | grep -v grep | awk '{print $2}'"
processes="1373"
execute :kill, "#{processes.gsub!("\r\n", " ")}" unless processes.empty?
processes.gsub!("\r\n", " ")
processes
processes.gsub("\r\n", " ")
execute :kill, "#{processes.gsub("\r\n", " ")}" unless processes.empty?
processes = "1263"
execute :kill, "#{processes.gsub("\r\n", " ")}" unless processes.empty?
processes = "1813"
execute :kill, "#{processes.gsub("\r\n", " ")}" unless processes.empty?
exit
processes = "1842"
execute :kill, "#{processes.gsub("\r\n", " ")}" unless processes.empty?
exit
0..1.each do |a| puts a end
(0..1).each do |a| puts a end
exit
capture :god, "status"
capture :bundle, "exec god status"
ls
_dir_
within current_path do
  capture :bundle, "exec god status"
end
exit
(capture :bundle, "exec god status")
(exec :bundle, "exec god status")
(execute :bundle, "exec god status")
(capture :bundle, "exec god status")
exit
(capture :bundle, "exec god status >/dev/null 2>/dev/null ").include?("The server is not available")
edit god_is_down
exit
start_date
end_date
end_date == start_date
Date.parse(start_date)
Date.parse(start_date).strftime("%b"
)
Date.parse(start_date).strftime("%b")
Date.parse(start_date).strftime("%b_%-d")
Date.parse(start_date).strftime("%b_%-d") +=
output_file = Date.parse(start_date).strftime("%b_%-d")
output_file = "#{output_file}_#{Date.parse(end_date).strftime("%-d")}" unless start_date == end_date
output_file
output_file.lower
output_file.methods
output_file.downcase
exit
input_sql
exit
date
end
exit
date
exit
date
Rake::Task["loans:export_by_date"].invoke(date)
start_date
end_date
exit
parsed_input
`psql -h slavedb.cashnetusa.com cnuapp_prod -c \"\\copy (#{input_sql}) to stdout with csv header\"`
input_sql
date
exit
date
args
date.day
date.methods
exit
weekend?(date)
exit
weekend?(date)
exit
edit fetch_loan_tasks
exit
edit fetch_loan_tasks
exit
date
exit
date
exit
date
exit
date
exit
loan = Loan.find 36159643
loan.destroy_data
edit loan
edit app/models/loan.rb
vim app/accountants/accountant.rb
edit app/accountants/accountant.rb
exit
loan = Loan.find 36159643
loan.destroy_data
exit
loan = Loan.find 36159643
print-accounting loan
loan.destroy_data
exit
loan = Loan.find 36159643
loan.destroy_data
exit
loan = Loan.find 36159643
loan.destroy_data
activities
activities.sort_by(&:cancelled_date)
activities.sort_by {|act| act.cancelled_date || Date.today )
activities.sort_by {|act| act.cancelled_date || Date.today }
exit
loan = Loan.find 36076168
loan.destroy_data
loan.accountant.activities
edit app/accountants/accountant.rb
loan.destroy_data
activities.sort_by {|act| act.cancelled_date || Date.today }
activities.sort_by {|act| act.cancelled_date || 0 }
edit app/accountants/accountant.rb
exit
loan.destroy_data
exit
loan = Loan.find 36089053
loan.destroy_data
activities
activities.all
activities.sort_by {|act| act.cancelled_date || 0 }
exit
Date.new
edit app/accountants/accountant.rb
loan = Loan.find 36089053
loan.destroy_data
exit
loan = Loan.find 36108392
loan.destroy_data
loan = Loan.find 36121317
loan.destroy_data
exit
CustomerGroup.lookup.reload
exit
require 'sidekiq/api'
stats = Sidekiq::Stats.new
stats.failed
Sidekiq.Queue.new
Sidekiq::Queue.new
Sidekiq::Queue.new.clear
exit
client
exit
include 'cnuapp'
include Cnuapp
client
exit
Sidekiq::Queue['default']
Sidekiq::Queue['default'].paused?
Sidekiq::Queue['default'].paused
Sidekiq::Queue['default'].paused?
exit
parse_input
parsed_input
parsed_results
edit fetch_loan_tasks
exit
parsed_input = parsed_input.compact.flatten
parsed_results = parsed_results.compact.flatten
exit
print-accounting loan
print-accounting source
source.defaults
whereami
source
source.persisted?
exit
print-accounting source
whereaim
whereami
task_name
aging
exit
print-accounting loan
expect
expected
balance
exit
balance
exit
balance
exit
balance
exit
balance
exit
balance
exit
balance
exit
balance
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
balance
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
exit
tasks
tasks.size
whereami
LoanTaskProcessingWorker.perform_async(tasks.flatten)
Redis
Redis.methods
Redis.current
Redis.current.methods
Redis.current.connected?
Redis.current.ping
Redis.current.connected?
exit
edit min_start_date
exit
source
self
exit
self
print-accounting
print-accounting -b
exit
print-accounting
print-accounting -b
self
exit
print-accounting
print-accounting -b
exit
print-accounting -b
exit
print-accounting -b
exit
balance
actual
exit
balance
actual
print-accounting
print-accounting loan
loan
exit
balance
actual
print-accounting loan
source
loan
exit
print-accounting loan
print-accounting -b
print-accounting loan -b
exit
print-accounting
exit
print-accounting
source
edit finish
source
exit
source
exit
source
exit
source
exit
edit finish
source
exi
exit
source
exit
edit finish
exit
print-accounting 
aging
exit
print-accounting
exit
aging
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
whereami
exit
print-accounting
whereami
aging
exit
loan = Loan.find 35796870
print-accounting loan
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
whereami
exit
print-accounting
source.defaults
exit
loan
exit
loan
exit
loan
exit
loan
loan.defaults
exit
source
earliest_default_date = earliest_default(date)
print-accounting
exit
loan
exit
loan
exit
loan
exit
loan
loan.defaults
exit
client
require cnuapp
require "cnuapp"
require "cnuapp.rnb"
require "cnuapp.rb"
exit
client
client.ping
exit
client.ping
exit
accountant.cancel_task(task_args[:task_id], task_args[:task_id_to_cancel], task_args[:date])
simulator
print-accounting simulator
print-accounting simulator -b
exit
date
exit
date
exit
edit default_calculator_as_of
exit
date
exit
date
exit
date
print-accounting
loan.fee_amount
fee_amount
exit
date
print-accounting
incoming_payments
accountant.incoming_payments
exit
date
accountant.incoming_payments
exit
simulator
exit
date
print-accounting
accountant.incoming_payments
simulator.schedul
simulator.schedule
fee_amount.to_i
exit
date
print-accounting
fee_amount.to_f
date
exit
print-accounting simulator
exit
@payments
exit
exit 
exit
edit default_amount
exit
print-accounting
exit
$its_pry_time = true
exit
@contractual_obligations
exit
print-accounting simulator
exit
@loans
@loans["36186251"]
loan = @loans["36186251"]
print-accounting loan
exit
source
exit
source
exit
loan = @loans["36227667"]
print-accounting loan
print-accounting loan -b
exit
loan = @loans["36227667"]
print-accounting loan -b
print-accounting loan
exit
loans
@loans
@loans["36186251"]
loans = @loans["36186251"]
loan = @loans["36186251"]
print-accounting loan
loan.fee_accrued
loan.fee_accrued.to_f
exit
fee
exit
fee
exit
fee
fee_accrued
source.fee_accrued
source.fee_accrued.to_f
exit
source.fee_accrued.to_f
exit
source.fee_accrued.to_f
exit
source.fee_accrued.to_f
exit
source.fee_accrued.to_f
exit
source.fee_accrued.to_f
exit
print-accounting
source.fee_amount
source.fee_amount.to_f
exit
loan = @loans["36299109"]
print-accounting loan
loan = @loans["36469445"]
print-accounting loan
exit
edit /export/loaner/app/accountants/payday_accountant.rb
exit
loan = @loans["36368903"]
print-accounting loan
print-accounting loan -b
loan = @loans["36336592"]
print-accounting loan
loan = @loans["36186251"]
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit
print-accounting
simulator_schedule
finish_date = end_date
simulator.simulate do
  finish finish_date
  v
end
exit
print-accounting simulator
print-accounting simulator -b
whereami
@original_activities = accountant.activities.all.dup.tap { |acts| acts.push adjusting_activity }
@simulated_activities = simulator.activities
introduce_types = accountant.adjustment_options[:introduces] || []
diff = Diff.new(accountant.books, @original_activities, @simulated_activities, introduce_types)
whereami
@additional_activities = diff.additional_activities
@adjustment_entries    = diff.adjustment_entries
exit
print-accounting
print-accounting simulator
whereami
adjusting_activity
@adjustment_entries
print-accounting simulator
print-accounting
adjusting_activity.cancels_activity_id
exit
@simulator_activities
exit
print-accounting simulator
exit
@simulator_activities
exit
print-accounting simulator
whereami
@simulator_activities
exit
@simulator_activities
accountant.activities.reject do |act|
  remove?(act) || act.cancelled? || act.cancels? ||
  (act.retroactive? && act.effective_date > start_date)
  (introduced?(act.activity_type) && act.effective_date > start_date)
end
@simulator_activities
accountant.activities.reject do |act|
  remove?(act) || act.cancelled? || act.cancels? ||
  (act.retroactive? && act.effective_date > start_date)
  (introduced?(act.activity_type) && act.effective_date > start_date)
end
acts = _
acts[11]
acts[11].cancelled?
act = _
remove?(act) || act.cancelled? || act.cancels?
act = acts[11]
remove?(act) || act.cancelled? || act.cancels?
remove?(act) || act.cancelled? || act.cancels? ||  (act.retroactive? && act.effective_date > start_date)
remove?(act) || act.cancelled? || act.cancels? ||  (act.retroactive? && act.effective_date > start_date) || (introduced?(act.activity_type) && act.effective_date > start_date)
(introduced?(act.activity_type) && act.effective_date > start_date)
print-accounting
print-accounting simulator
exit
double
methods
quit
source.defaults
exit
print-accounting
source.defaults
exit
print-accounting 
source.defaults
source.reload.defaults
exit
source.defaults
exit
source.defaults.open.first
source.defaults
source.defaults.open.first.update_attributes(end_date: activity.effective_date)
source.defaults
source.reload.defaults
print-accounting
exit
print-accounting
exit
source.reload.defaults
print-accounting
exit
source.reload.defaults
print-accounting
print-accounting -b
source.reload.defaults
exit
aging
exit
print-accounting
exit
print-accounting
aging
exit
aging
print-accounting
exit
print-accounting
print-accounting -b
source.reload.defaults
aging
exit
print-accounting
aging
exit
exit 
exit
pexit
exit
Loan.first
exit
edit finish 
loan.accountant.start_date
loan = @loans["36200116"]
loan.accountant.start_date
loan.accountant.start_date=nil
Date.methods
loan.accountant.start_date=Date.new
loan.accountant.start_date=loan.accountant.most_recent_effective_date
print-accounting loan
loan.accountant.finish loan.due_date + 62
print-accounting loan
exit
loan = @loans.values.first
print-accounting loan
exit
print-accounting
exit
edit simulate
loan = @loans.values.first
print-accounting loan
print-accountign -b
print-accounting -b
print-accounting loan -b
print-accounting loan 
exit
loan = @loans.values.first
print-accounting loan 
print-accounting loan -b
exit
print-accounting @loans.values.first
print-accounting @loans.values.first -b
print-accounting @loans.values.last -b
print-accounting @loans.values.last
exit
print-accounting @loans.values.first
print-accounting @loans.values.last
exit
print-accounting @loans.values.last
exit
print-accounting
exit
print-accounting loan
print-accounting 
exit
edit simulatre
edit simulate
print-accounting loan
print-accounting 
print-accounting simulator
whereami
exit
print-accounting @accountant
exit
print-accounting loan
print-accounting @accountant
@accountant.activities.reject(&:cancelled?).select { |act| act.activity_type == 'payment' }.sum(&:activity_amount)
@accountant.activities.reject(&:cancelled?)
exit
payment_total
payment_total.to_f
print-accounting
current_activity
exit
payment_total.to_f
print-accounting
current_activity
activity :default, today, '50.00' if payment_total < 50
print-accounting loan
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting loan
print-accounting @accounting
print-accounting @accountant
exit
print-accounting
print-accounting simulator
start_date
exit
print-accounting
adjusting_activity
print-accounting simulator
start_date
print-accounting 
exit
start_date
print-accounting simulator
print-accounting 
exit
print-accounting @accountant
print-accounting @accountant -b
exit
edit simulate
exit
exi
exit
print-accounting simulator
start_date
exit
print-accounting 
print-accounting simulator
exit
print-accounting simulator
print-accounting
print-accounting simulator
start_date
exit
print-accounting
start_date
print-accounting simulator
exit
print-accounting @loan
print-accounting @accountant
print-accounting @accountant -b
exit
eit
print-accounting @accountant
exit
print-accounting @accountant
print-accounting @accountant -b
exit
edit /export/finance_xl/lib/finance_xl/cucumber/steps.rb
print-accounting
new_date
exit
print-accounting 
adjusting_activity
exit
new_date
exit
new_date
exit
new_date
exit
new_date
print-accounting 
whereami
end_date
exit
new_date
exit
print-accounting simulator -b
exit
@Loans
@loans
print-accounting @loans.values.last
@loans
exit
print-accounting @loans.values.first
print-accounting @loans.values.first -b
loan = @loans.values.first
loan.fee_amount
exit
loan = @loans.values.first
print-accounting loan
print-accounting loan -b
exit
loan = @loans.values.first
print-accounting loan
print-accounting loan -b
exit
loan = @loans.values.first
print-accounting loan
print-accounting loan -b
exit
loan = @loans.values.first
print-accounting loan -b
loan
print-accounting loan
exit
loan = @loans.values.first
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan
exit
print-accounting
amount
exit
amount
print-accounting
exit
amount
print-accounting
source.fee_amount
amount
exit
amount
print-accounting
exit
print-accounting
exit
print-accounting
exit
print-accounting
source.fee_amount
exit
source.fee_amount
loan.fee_amount
D(task_args[:amount])
loan.fee_amount + D(task_args[:amount])
exit
print-accounting
whereami
simulating?
exit
simulating?
print-accounting
exit
loan.fee_amount
exit
print-accounting loan
loan = @loans.values.last
print-accounting lo
print-accounting loan
loan.fee_amount
exit
Loaner::Reporting.ar_queries
Loaner::Reporting.ar_queries.ar_by_loan_id
quit
Loaner::Reporting
Loaner::Reporting.ar_queries
Loaner::Reporting.ar_queries.me
Loaner::Reporting
exit
Loaner::Reporting
Loaner::Reporting.methods
Date.parse('2014-04-15') - Date.parse('2014-03-15')
Date.parse('2014-04-15') - Date.parse('2014-03-15') + 1
whereami
sql = case
when Loaner::Reporting.ar_queries(sql_id)
else "Unknown query"
end
sql
exit
sql
exit
string
method
when Loaner::Reporting.ar_queries(sql_id)
Loaner::Reporting.ar_queries(sql_id)
Loaner::Reporting.ar_queries.send(sql_id)
sql_id
exit
Loaner::Reporting.ar_queries.send(sql_id)
exit
output = Sql.ar_by_loan_id(month_end+1,month_end+1, month_end, month_end, month_end)
exit
Sidekiq
Sidekiq::Queue
Sidekiq::Queue::new
Sidekiq::Queue::new.paused?
Sidekiq::Queue::new.methods
Sidekiq::Queue::new.unpause
quit
loan = Loan.first
print-accounting loan
exit
loan = Loan.first
print-accounting loan
exit
loan = Loan.first
print-accounting loan
exit
loan = Loan.first
print-accounting loan
exit
loan
loan.fee_amount
exit
loan.fee_amount
print-accounting loan
exit
print-accounting
print-accounting loan
loan.fee_amount
exit
loan.fee_amount
exit
daily_fee
daily_feedaily_fee = accountant.daily_fee(task_args[:date])
daily_fee = accountant.daily_fee(task_args[:date])
exit
xit
exit
date
print-accounting
exit
accountant.daily_fee(task_args[:date])
exit
date
exit
print-accounting
print-accounting loan
exit
print-accounting
print-accounting loan
whereami
daily_fee = accountant.daily_fee(task_args[:date])
exit
memo
activity.cancels?
activity.activity_type
debit_account
credit_account
lookup_memo(activity.activity_type, debit_account, credit_account)
Memo.all
whereami
edit set_memos
source
source.past_due_obligations(date)
whereami
print-accounting
due_date
cnuapp_forced_charge_off?
should_be_aging?
aging
backtrace
back_trace
wtf?
wtf?!
wtf?!?
wtf?!??
whereami
print-accounting loan
exit
loan
loan.issue_date
loan
loan.issue_date
print-accounting
print-accounting loan
loan.due_date
loan.accountant.finish(date)
print-accounting loan
loan.activities
loan.accountant.activities
loan.accountant.activities.map(&:task_id)
xit
whereami
exit
print-accounting loan
loan.issue_date
exit
type
amount
print-accounting loan
print-accounting 
wtf?
wtf?!
wtf?!?
wtf?!?!
source
current_activity
accounts[:fee_income]
recognize_full_fees
print-accounting 
exit
test_suite = JSON.parse(File.read('lib/test_suite_loans.json'))
test_suite = JSON.parse(File.read('lib/test_suite_loans'))
export = JSON.parse(File.read('lib/real_loans_to_test.json'))
edit
not_in_suite
edit
not_in_suite
export.size
test_suite.size
edit
not_in_suite
export.size
export.uniq.size
test_suite.size
export.uniq!
export.size
edit
not_in_export
export
export.size
test_suite.size
test_suite.uniq
test_suite.uniq.size
test_suite.group_by{ |i| i }
exit
loan
print-accounting loan
balance
print-accounting loan -b
balance
exit
balance
print-accounting loan
expected
actual
print-accounting loan -b
loan
exit
loan
print-accounting loan
balance
actual
exit
print-accounting loan
balance
actual
print-accounting loan -b
balance
exit
balance
actual
print-accounting loan
balance
exit
balance
loan.accountant.accounts
exit
balance
actual
loan.accountant.accounts
print-accounting loan
exit
actual
balance
loan.accountant.accounts
print-accounting loan
print-accounting loan -b
loan
exit
balance
exit
blance
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
balance
actual
loan.accountant.balances
loan.accountant.accounts
print-accounting loan
print-accounting loan -b
loan
exit
balance
exit
balance
actual
loan.accountant.balances
loan.accountant.accounts
exit
balance
actual
print-accounting loan
exit
balance
actual
loan.accountant.accounts
exit
blance
balance
actual
print-accounting loan
print-accounting loan -b
balance
print-accounting loan 
balance
exit
balance
actual
print-accounting loan
exit
balance
acutal
actual
print-accounting loan
balance
exit
balance
actual
print-accounting loan
balance
exit
balance
actual
exit
balance
exit
balance
exit
balance
actual
print-accounting loan
exit
balance
exit
balance
actual
loan.accountant.accounts
exit
balance
actual
print-accounting loan
balance
exit
balance
exit
balance
print-accounting loan
balance
actual
exit
balance
exit
print-accounting
print-accounting simulator
print-accounting simulator -b
exit
wtf?
wtf?!
caller
params
exit
params
params[:amount] = obligation_amount(params) unless params[:amount]
params
exit
print-accounting loan
print-accounting
print-accounting simulator
exit
print-accounting simulator
exit
print-accounting simulator
print-accounting
print-accounting -b
loan
FactoryGirl.build(factory_type, params)
loan.due_date = evaluator.due_dates.first
exit
loan
exit
loan.accountant.perform_task(:fee, nil, loan.issue_date, loan.accountant.daily_fee(loan.issue_date))
exit
loan
exit
!should_be_aging?(date) && aging
whereami
loan
exit
!should_be_aging?(date)
whereami
should_be_aging?(date)
whereami
in_default?(date)
source.simulated_accountant(schedule.min_start_date, date)
perform_aging && should_be_aging?(date) && !aging
exit
whereami
source.simulated_accountant(schedule.min_start_date, date).balances[:past_due]
perform_aging
exit
caller
exit
caller
print-accounting
caller
print-accounting
issued?(date) && !in_default?(date) && !charged_off?(date)
caller
exit
issued?(date)
in_default?(date)
exit
print-accounting
exit
print-accounting
task_name
should_be_aging?(date)
in_default?(date) || charged_off?(date)
in_default?(date)
charged_off?(date)
start_date = schedule.min_start_date ? schedule.min_start_date-1 : date - 1
end_date = date
source.simulated_accountant(start_date, end_date)
accountant.simulating_accountant(start_date: start_date, schedule: schedule)
simulating_accountant(start_date: start_date, schedule: schedule)
simulating_accountant(start_date: start_date, schedule: schedule).finish end_date,false
edit
edit simulating_accountant(start_date: start_date, schedule: schedule).finish
simulating_accountant(start_date: start_date, schedule: schedule).finish end_date,false
exit
simulate { finish date }
edit simulate
exit
edit simulate
edit finish
exit
in_default?(date)
start_date = schedule.min_start_date 
simulating_accountant(start_date: start_date, schedule: schedule)
simulating_accountant(start_date: start_date, schedule: schedule).finish date
simulating_accountant(start_date: start_date, schedule: schedule).forward date
edit simulating_accountant(start_date: start_date, schedule: schedule).forward
simulating_accountant(start_date: start_date, schedule: schedule).forward date
exit
perform_aging
exit
caller
wherami
whereami
exit
perform_aging
exit
loan
!should_be_aging?(date)
exit
perform_aging
exit
perform_aging
exit
should_be_aging?(date)
acc
acc.date
acc.start_date
end_date
acc.fast_forward_to end_date
edit acc.fast_forward_to
acc.fast_forward_to end_date
@date
end_date
daily
exit
edit fast_forward_to
exit
@date
scheduled_activities(@date)
exit
edit fast_forward_to
exit
loan
exit
edit fast_forward_to
exit
!should_be_aging?(date)
exit
should_be_aging?(date)
exit
loan
exit
loan
should_be_aging?(date)
exit
loan
exit
print-accounting loan
exit
loan
caller
exit
loan
exit
loan
exit
loan
exit
loan.accountant.forward(date)
exit
loan
exit
loan.accountant.forward(date)
exit
whereami
print-accounting loan
exit
loan
exit
loan
exit
loan
exit
@date
scheduled_activities(@date)
print-accounting
loan.fee_amount
source.fee_amount
exit
edit perform_task
loan
exit
loan
exit
loan.accountant.
schedule
schedule.min_start_date
loan.accountant.schedule.min_start_date
exit
edit check_balance
loan
exit
loan
$its_pry_time = true
assert_loan_status :in_default
acc=simulating_accountant(start_date: start_date, schedule: schedule)
print-accounting loan
print-accounting 
print-accounting acc
whereami
activities
edit simulating_accountant
acc=simulating_accountant(start_date: start_date, schedule: schedule)
activities
defaults[:activities]
acc=simulating_accountant(start_date: start_date)
exit
start_date
exit
wherami
whereami
acc=simulating_accountant(start_date: start_date)
exit
print-accounting start_date
print-accounting acc
acc=simulating_accountant(start_date: start_date)
defaults
edit initialize
acc=simulating_accountant(start_date: start_date)
activities
print-accounting
exit
v
loan
assert_loan_status :in_default
loan.in_default? date
$its_pry_time = true
loan.in_default? date
acc=simulating_accountant(start_date: start_date)
defaults[:activities]
exit
options[:schedule]
@activities = ActivitySet.new(source_id, start_date, activities, options[:schedule].between(start_date, Date.today))
Date.today
exit
whereami
acc=simulating_accountant(start_date: start_date, schedule: nil)
exit
options[:schedule]
@activities = ActivitySet.new(source_id, start_date, activities)
start_date
activities.map(&:effective_date).min
exit
assert_loan_status :in_default
exit
balance
actual
print-accounting loan
print-accounting loan -b
balance
exit
balance
loan.accountant.accounts
print-accounting loan -b
exit
print-accounting loan
balance
actual
exit
balance
exit
balance
loan.accountant.accounts
exit
print-accounting simulator
print-accounting
whereami
additional_activities
adjustment_entries
exit
print-accounting
exit
edit simulate
exit
edit check_balance
print-accounting loan
print-accounting loan - 
print-accounting loan -b
exit
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
task_name
exit
print-accounting loan
task_name
print-accounting loan
task_args[:date]
exit
print-accounting loan
exit
print-accounting loan
exit
edit fee_amount
exit
print-accounting
print-accounting loan
exit
print-accounting loan
accountant.forward(task_args[:date])
print-accounting loan
print-accounting loa
print-accounting loan -b
exit
balance
print-accounting loan
exit
balance
exit
balance
print-accounting loan
balance
exit
edit check_balance
be rspec
print-accounting
current_activity
print-accounting -b
source.fee_income
source.accountant.accounts[:fee_income]
whereami
exit
loan.fees_to_recognize(date)
loan.fees_to_recognize(date).to_f
print-accounting loan
exit
edit fee_assessed?
print-accounting loan
exit
loan.fee_amount
exit
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan.fee_amount.to_a
loan.fee_amount.to_f
exit
print-accounting
print-accounting loan
exit
print-accounting lona
print-accounting loan
exit
loan.obligations
loan.fee_amount
loan.fee_adjustment
exit
print-accounting loan
print-accounting loan -b
exit
print-accounting loan -b
exit
print-accounting loan
loan.fee_amount
print-accounting loan -b
exit
assert_defaults size: 1, defaults: [{default_date: date, start_date: date, end_date: nil}]
print-acoounting loan
print-accounting loan
loan.accountant.forward date +1
loan.accountant.forward date+1
print-accounting loan
whereami
exit
aging
should_be_aging?(date)
print-accounting
exit
print-accounting
aging
exit
print-accounting
should_be_aging?(date)
exit
source.defaults
exit
source.defaults
exit
print-accounting
exit
print-acocunting loan
print-accounting loan
loan.accountant.forward(date)
print-accounting loan
loan.due_date
loan.accountant.forward(date)
print-accounting loan
loan.accountant.forward(date+1)
exit
print-accounting loan
edit forward
exit
edit forward
exit
print-accounting loan
print-accounting loan -b
balance
exit
balance
print-accounting loan
print-accounting loan -b
balance
exit
print-accounting loan -b
balance
exit
balance
exit
balance
exit
balance
print-accounting
print-accounting loan
print-accounting loan -b
balance
exit
balance
print-accounting loan
print-accounting loan -b
balance
exit
balance
exit
balance
exit
balance
print-accounting loan -b
balance
exit
balance
print-accounting loan -b
exit
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
balance
print-accounting loan -b
exit
balance
print-accounting loan
print-accounting loan -b
balance
exit
balance
print-accounting loan
print-accounting loan -b
balance
exit
balance
exit
balance
exit
balance
print-accounting loan
balance
exit
balance
exit
balance
exit
balance
print-accounting loan -b
balance
exit
balance
exit
balance
exit
balance
exit
balance
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan -b
exit
balance
exit
balance
print-accounting loan -b
exit
balance
print-accounting loan -b
exit
edit check_balance
balance
print-accounting loan
exit
balance
print-accounting loan -b
balance
exit
print-accounting
loan.due_date
source.due_date
source
source.obligations
exit
activity
source.issued?(activity.effective_date)
print-accounting
exit
activity
source.issued?(activity.effective_date)
source.create_obligation(eff_date: activity.effective_date)
source.due_date
exit
activity
print-accounting
source.obligations
exit
activity
exit
activity
exit
activity
exit
activity
print-accounting loan
print-accounting 
source.obligations
exit
["issue", "fee", "extend_principal"].any? { |type| activity.type?(type) } && source.issued?(activity.effective_date)
activity
print-accounting
exit
["issue", "fee", "extend_principal"].any? { |type| activity.type?(type) }
activity
loan.issue_date
source.issue_date
source.issued?(activity.effective_date)
exit
daily_fee
exit
accountant.source.obligations
print-accounting simulator
end_date
simulator
simulator.simulate { finish end_date + 1 }
end_date
simulator.simulate { finish (end_date + 1) }
exit
print-accounting loan
print-accounting
exit
loan.obligatoins
loan.obligations
exit
loan.obligatoins
loan.obligations
exit
print-accounting simulato
print-accounting simulator
exit
loan.obligations
exit
edit map_task
print-accounting 
loan.obligations
source.obligations
exit
obligations
source.obligations
source.update_obligation(eff_date: (effective_date || activity.effective_date))
source.obligations
exit
activity
source.obligations
source.update_obligation(eff_date: (effective_date || activity.effective_date))
source.obligations
exit
loan
loan.due_date
exit
print-accounting loan
loan.obligations
exit
assert_obligations size: 1, obligations: [{amount: 210, due_date: date, target_date: date}]
assert_obligations size: 1, obligations: [{amount: 220, due_date: date, target_date: date}]
assert_obligations size: 1, obligations: [{amount: 220, due_date: date, target_date: date}]cancel 4, 3, date
cancel 4, 3, date
print-accounting loan
loan.obligations
exit
assert_obligations size: 1, obligations: [{amount: 220, due_date: date, target_date: date}]
exit
print-accounting 
exit
print-accounting 
activity
effective_date
exit
print-accounting
exit
loan.obligations
source.obligation_amount(effective_date)
accountant.as_of(source.issue_date)
accountant_as_of(source.issue_date)
accountant_as_of(source.issue_date).balances
exit
balance
print-accounting loan
print-accounting loan -b
balance
actual
exit
balance
actual
print-accounting loan
balance
print-accounting loan -b
exit
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan 
loan.obligatoins
loan.obligations
exit
balance
print-accounting loan
print-accounting loan -b
balance
exit
balance
exit
balance
exit
balance
print-accounting loan
print-accounting loan -b
loan.obligations
exit
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan -b
loan.obligations
balance
exit
balance
exit
balance
print-accounting lloan
print-accounting loan
print-accounting loan -b
exit
print-accounting 
v
source.update_obligation(eff_date: (effective_date || activity.effective_date))
loan.fee_amount
sourec.fee_amount
source.fee_amount
source.fee_amount - source.fee_adjustment
exit
print-accounting
source.obligations
activity
exit
print-accounting
source.obligations
whereami
activity
exit
print-accounting
activity
exit
print-accounting
source.create_obligation(eff_date: activity.effective_date)
source.obligations
exit
print-accounting
whereami
activity
source.update_obligation(eff_date: (effective_date || activity.effective_date))
print-accounting 
source.obligations
loan.issue_date
source.issue_date
exit
print-accounting
activity
whereami
source.update_obligation(eff_date: (effective_date || activity.effective_date))
source.obligations
exit
source.create_obligation(eff_date: activity.effective_date)
source.obligations
print-accounting 
whereami
exit
print-accounting
daily_fee = accountant.daily_fee(task_args[:date])
source.obligations
source.update_obligation(eff_date: (effective_date || activity.effective_date))
source.obligations
print-accounting loan
print-accounting
print-accounting 
source.obligations
whereami
source.create_obligation(eff_date: activity.effective_date)
daily_fee = accountant.daily_fee(task_args[:date])
loan.obligations
print-accounting loan
whereami
exit
edit check_balance
balance
print-accounting loan
loan.obligation
loan.obligations
balance
actual
exit
balance
print-accounting loan
exit
balance
exit
balance
print-accounting loan
balance
exit
memo
exit
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
print-accounting loan -b
quit
Sidekiq::Stats.new.reset
exit
Sidekiq::Stats.new.reset
exit
email = ReportMailer.monthly_report_email
email = ReportMailer.month_end_reporting
email.deliver
exit
email = ReportMailer.month_end_reporting
email.deliver
email = ReportMailer.month_end_reporting
exit
Date.today
Date.today.strftime("%m-%d-%Y")
Rake::Task["reporting:ar_by_loan"].invoke(Date.today.strftime("%m-%d-%Y"))
exit
dir = Dir[Rails.root.join('public', 'reports', "#{year}", "#{month}", '*.csv')]
year = 2014
month = 4
dir = Dir[Rails.root.join('public', 'reports', "#{year}", "#{month}", '*.csv')]
dir.first
dir.first.methods
dir.first.file_name
dir = Dir[Rails.root.join('public', 'reports', "#{year}", "#{month}", '*.csv')]
dir.each do |file|
  binding.pry
end
edit
dir
edit
whereami
exit
show_reports_path(Date.today.month, Date.today.year)
require URI
require Uri
require 'Uri'
URI.full_path(/reports/5/2014)
URI.full_path('/reports/5/2014')
URI('/reports/5/2014')
URI('/reports/5/2014').path
URI('/reports/5/2014').methods
URI('/reports/5/2014').host
exit
payment_method
task_name
edit perform_task
payment_method
PaymentMethod[payment_method] && payment_method
edit perform_task
payment_method
activity
source
exit
type
amount
exit
balance
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
loan
print-accounting loan
print-accounting loan -b
loan.forward loan.due_date + 62
loan.accountant.forward loan.due_date + 62
print-accounting loan -b
quit
exit
print-accounting loan
loan.fee_amount
loan.fee_adjustment
exit
print-accounting loan
loan.fee_amount
loan
exit
loan = Loan.find 36268854
print-accounting loan
exit
loan
print-accounting loan
task
exit
task
exit
task
loan
loan.fee_adjustment
exit
loan
print-accounting loan
13.5 + 31.5
exit
task
exit
loan
loan.persisted?
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan.fee_adjustment
whereami
loan.accountant
loan.obligations
exit
print-accounting 
amount
exit
print-accounting
amount
amount_to_recognize = amount + accounts[:fee_income]
accounts unrecognized_fee = recognize_full_fees(today)
unrecognized_fee = recognize_full_fees(today)
exit
print-accounting 
print-accounting -b
amount
whereami
unrecognized_fee
amount_to_recognize
amount >= unrecognized_fee
fees_left = unrecognized_fee - amount_to_recognize
daily_fee(today, fees_left)
daily_fee(today)
exit
print-accounting loan
print-accounting loan -b
loan.due_date
whereami
loan.due_date + 1 - date
10.to_f /11
;
 = 2
exit
print-accounting loan -b
exit
print-accounting loan
print-accounting loan -b
date
loan.due_date
whereami
loan.due_date + 1 - Date.today + 5
loan.accountant.forward(loan.due_date)
print-accounting loan
exit
print-accounting loan
print-accounting loan -b
loan.accountant.forward(Date.today+14)
print-accounting loan
print-accounting loan -b
whereami
fee_credit 10, 2, (Date.today+14)
print-accounting loan
print-accounting loan -b
loan.forward loan.due_date + 1
loan.accountant.forward loan.due_date + 1
print-accounting loan -b
exit
source.issued?(today) && (amount_to_recognize >= unrecognized_fee)
fee_assessed?(today)
fees_left = unrecognized_fee - amount_to_recognize
daily_fee(today, fees_left)
exit
xit
exit
loan
exit
loan = Loan.find 36299109
print-accounting loan
loan.fee_adjustment
loan.fee_adjustment.to_f
loan.fee_amount.to_f
loan
exit
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
print-accounting loan
loan
exit
loan
print-accounting loan
daily_fee
task_args[:date]
loan.issue_date
whereami
exit
print-accounting loan
exit
print-accounting loan
print-accounting source
exit
print-accounting 
exit
print-accounting loan
loan.forward loan.due_date
loan.accountant.forward loan.due_date
print-accounting loan
print-accounting loan -b
exit
edit check_balance
print-accounting loan
print-accounting loan -b
exit
print-accounting
print-accounting simulator
exit
print-accounting
print-accounting simulator
exit
print-accounting loan
exit
print-accounting loan
balance
loan.fee_amount
print-accounting loan -b
loan
exit
print-accounting loan
balance
print-accounting loan -b
balance
exit
balance
print-accounting loan
balance
print-accounting loan -b
balance
exit
balance
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan -b
balance
exit
balance
print-accounting loan
balance
actual
print-accounting loan -b
exit
balance
exit
balance
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan.fee_adjustment
loan
exit
balance
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan
loan
exit
balance
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan
exit
@loans
exit
edit check_balance
print-accounting loan
blance
balance
actual
print-accounting loan -b
balance
exit
balance
actual
edit check_balance
print-accounting loan
exit
print-accounting loan
balance
actual
exit
balance
actual
print-accounting loan
balance
exit
balance
actual
print-accounting loan
balance
print-accounting loan -b
exit
balance
actual
print-accounting loan
exit
loan = Loan.find 36336592
print-accounting loan
print-accounting loan -b
print-accounting loan
loan = Loan.find 36348430
print-accounting loan
loan.issue_date
loan = Loan.find 36433717
print-accounting loan
loan.due_date
loan = Loan.find 36368903
print-accounting loan
print-accounting loan -b
loan = Loan.find 36425672
print-accounting loan -b
print-accounting loan
loan = Loan.find 36451910
print-accounting loan
loan = Loan.find 36477983
print-accounting loan
select * from accounting.activities where source_id = 36477983;
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities.all.entries
loan.accountant.activities.all.entries.map(:dr)
loan.accountant.activities.all.entries.map(&:dr)
loan.accountant.activities.all.entries
loan.accountant.activities.all.map { |act| act.entries.map(&:dr) }
loan.accountant.activities.all.map { |act| act.entries.map(&:debit_accoount) }
loan.accountant.activities.all.map { |act| act.entries.map(&:debit_account) }
loan.accountant.activities.all.map { |act| act.entries.map(&:debit) }
loan.accountant.activities.all.map { |act| act.entries.map(&:entry_type) }
loan.accountant.activities.all.map { |act| act.id, act.entries.map(&:entry_type) }
loan.accountant.activities.all.map { |act| [act.id, act.entries.map(&:entry_type)] }
print-accounting loan
loan
edit /Users/cmwesigwa/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/bundler/gems/finance_xl-37f6e6d9b0fe/lib/finance_xl/pry_commands.rb
activities
activities.map(&:entries).flatten.map { |e| e.entry_type.dr.name.to_s.size }.max
activities.map(&:entries).flatten
activities.map(&:entries).flatten.all
activities.map(&:entries).flatten.to_a
activities
activities.map(&:entries)
activities.map(&:entries).first
activities.map(&:entries).all
activities.map(&:entries).flatten
activities.map(&:entries).flatten.flatten
activities.map(&:entries).flatten.compact
activities.map(&:entries).flatten
edit /Users/cmwesigwa/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/bundler/gems/finance_xl-37f6e6d9b0fe/lib/finance_xl/pry_commands.rb
exit
print-accounting loan
exit
loan = Loan.find 36477983
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
loan = Loan.find 36573810
print-accounting loan
loan = Loan.find 36602581
print-accounting loan
loan = Loan.find 36751216
print-accounting loan
print-accounting loan -b
loan = Loan.find 36752973
print-accounting loan
print-accounting loan -b
exit
balance
print-accounting loan
balance
edit check_balance
balance[:account]
balance["account"]
edit check_balance
balance
(expected == actual && balance["account"] != "fee_income")
balance["account"] != "fee_income"
edit check_balance
print-accounting loan
balance
edit check_balance
balance
print-accounting loan
balance
print-accounting loan -b
balance
print-accounting loan 
print-accounting loan -b
balance
print-accounting loan
print-accounting loan -d
print-accounting loan -b
balance
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan
blance
balance
print-accounting loan 
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan -b
print-accounting loan
balance
print-accounting loan
source
activity
amount
edit activity
edit /export/loaner/app/accountants/accountant.rb
exit
print-accounting loan
print-accounting loan -b
whereami
loan.accountant.forward(loan.due_date)
print-accounting loan
print-accounting loan -b
exit
source
edit activity
edit /export/loaner/app/accountants/accountant.rb
exit
activity
activity = 1
edit /export/loaner/spec/accountants/accountant_spec.rb
source
amount
exit
Country
Country.where(country: country, iso_code: iso_code)
exit
Country.where(country: country, iso_code: iso_code)
exit
Country.where(country: country, iso_code: iso_code)
Country.lookup.reload
exit
edit /export/loaner/db/seed_data/countries.rb
exit
print-accounting loa
print-accounting loan
loan.fee_amount
print-accounting loan -b
loan.issue_date
exit
print-accounting loan
loan.obligations
loan.reload.obligations
loan.activities
loan.accountant.activities
loan.accountant.activities[1]
loan.accountant.activities.to_a
loan.accountant.activities.to_a[1]
loan.accountant.activities.to_a[1].task_id
loan.accountant.activities.to_a[1].activity_id
loan.accountant.activities.to_a[0].task_id
loan.fee_amount
loan.issue_date
exit
print-accounting loan
loan.issue_date
exit
print-accounting 
activities_to_cancel
activities.reject(&:cancelled?)
exit
["36249657", "24737482", "24848663", "36336592", "35693804", "36451910", "36409381", "24974455", "36246889", "36040025", "36265638", "35640060", "36368903", "35684351", "36172990"]
failing = ["36249657", "24737482", "24848663", "36336592", "35693804", "36451910", "36409381", "24974455", "36246889", "36040025", "36265638", "35640060", "36368903", "35684351", "36172990"]
failing.map(&:to_i)
failing
failing.map!(&:to_i)
failing
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990]
known - failing
loan = Loan.find 35835758
print-accounting loan
381.56 + 127.19
exit
print-accounting lona
print-accounting loan
Payment.all
Payment.all.first.payment_method
exit
Payment.all.first.payment_method
Payment.all.last.payment_method
Payment.all
loan.payments
exit
loan = Loan.find 36132960
print-accounting loan
loan
loan = Loan.find 36150548
print-accounting loan
print-accounting loan -b
loan
loan = Loan.find 36124184
print-accounting loan
loan = Loan.find 36153764
print-accounting loan
print-accounting loan -b
502.5 - 85
loan
loan = Loan.find 36165167
print-accounting loan
loan = Loan.find 36177312
print-accounting loan
print-accounting loan -b
print-accounting loan
loan = Loan.find 36166061
print-accounting loan
loan = Loan.find 36165712
print-accounting lona
print-accounting loan
print-accounting loan =b
print-accounting loan -b
exit
loan
print-accounting loan
loan.payments
exit
loan.payments
loan.payments.first
loan.payments.first.cancelled_date
exit
loan.payments.first.cancelled_date
loan.payments.first.cancelled?
exit
Loan.first
_
Loan.all
quit
Loan.first
l = Loan.first
l.obligations.current
l = Loan.last
l.obligations.current
l = Loan.first
l.obligations.current
l = Loan.last
l.obligations.current
Loan.to_a.each { |l| l.obligations.current }
Loan.all.to_a.each { |l| l.obligations.current }
quit
exit
@current_obligation = obligations.current
exit
@current_obligation = obligations.current
exit
current_obligation(date)
exit
current_obligations
current_obligations.any?
exit
current_obligation(date).total_fees
exit
current_obligations
current_obligations.any?
exit
obligations
exit
obligations
exit
obligations
current_obligation
current_obligations
exit
current_obligations
obligations
exit
obligations
current_obligations
exit
@current_obligation = current_obligations.first if current_obligations.any?
exit
@current_obligation = current_obligations.first if current_obligations.any?
@current_obligation.total_fees
exit
assert_obligations size: 1, obligations: [{amount: 220, due_date: date, target_date: date}]
exit
assert_obligations size: 1, obligations: [{amount: 210, due_date: date, target_date: date}]
exit
assert_obligations size: 1, obligations: [{amount: 220, due_date: date, target_date: date}]
exit
print-accounting loan
print-accounting loan -b
loan.obligations
loan.obligations.current
loan.obligations.current.fees_accrued
loan.obligations.current.first.fees_accrued
loan.obligations.current.first.fees_accrued.to_f
loan.current_obligation
loan.current_obligation(date)
loan.current_obligation(date).fees_accrued
loan.current_obligation(date).fees_accrued.to_f
exit
loan.current_obligation(date).fees_accrued.to_f
wherami
whereami
assert_accounts fee_income: -0.90, fees_ar: 0.90, principal: 100
exit
print-accounting 
loan.current_obligation
loan.current_obligation.fees_accrued
source.current_obligation.fees_accrued
source.current_obligation.fees_accrued(today)
source.current_obligation(today).fees_accrued
exit
print-accounting simulator
exit
loan.obligations
exit
loan.obligations
exit
print-accounting loan
source
print-accounting
source.obligations
amount
ob = source.current_obligation(activity.effective_date)
ob.fee_adjustment
ob.fee_adjustment += amount
accounts[:fee_income]
ob.fee_amount
ob.amount
source.obligations
source.obligations.reload
source.reload.obligations
exit
source.obligations
exit
loan.current_obligation(date)
exit
caller
activity
print-accounting
source.obligations
activity.effective_date
source.current_obligation(activity.effective_date)
source.obligations.
current
exit
edit check_balance
exit
failing = [36249657, 24737482, 24848663, 36336592, 36291141, 35693804, 36326065, 36451910, 36409381, 24974455, 36246889, 36040025, 36265638, 35640060, 36368903, 35684351, 36172990]
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712]
failing - known
exit
accrued
exit
binding.pry
whereaim
whereami
exit
accrued
print-accounting 
exit
print-accounting
print-accounting loan
exit
edit check_balance
exit
lob
ob
print-accounting
source.obligation_amount({})
exit
print-accounting 
ob.amount
print-accounting
ob.fees_accrued
exit
print-accounting
ob.fee_adjustment
ob.total_fees
ob.amount = source.obligation_amount({})
ob
exit
print-accounting
ob
ob.save!
loan.obligations
source.obligations
source.obligations.reload
exit
ob
source.obligations
source.obligations.save!
source.obligations.save
source.obligations
ob
ob.update
ob.update!
ob.save!
exit
edit update_obligation_amounts
print-accounting 
exit
print-accounting
exit
cancel 3, 1, date
print-accounting
caller
exit
ob
exit
ob
exit
eexit
exit
print-accounting
ob
exit
print-accounting
exit
print-accounting
ob.amount
exit
print-accounting
source.current_obligation(activity.effective_date)
adjust
adjust_fees(activity, D(amount)) if adjust
exit
failing = [36249657, 24737482, 24848663, 36336592, 35693804, 36451910, 36409381, 24974455, 36246889, 36040025, 36265638, 35640060, 36368903, 35684351, 36172990]
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712]
failing - known
exit
adjustment = activities.select { |act| act.type?("ach_credit") }.map(&:amount).sum
activities.select { |act| act.type?("ach_credit") }
exit
adjustment
exit
adjustment
ob.fees_accrued = amount - adjustment
exit
edit set_fees_accrued
edit check_balance
failing = [36249657, 24737482, 24848663, 36336592, 35693804, 36451910, 36409381, 36252788, 24974455, 36246889, 36040025, 36265638, 35640060, 36368903, 35684351, 36172699, 36172990]
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 3612    4184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712]
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712]
failing - known
exit
date
print-accounting
edit current_obligation
date
due_date
@current_obligation && date > @current_obligation.due_date
@current_obligation.due_date
date
@current_obligation
@current_obligation && date > @current_obligation.due_date
date > @current_obligation.due_date
date
@current_obligation.due_date
print-accounting
print-accounting loan
loan.current_obligation(Date.parse('2014-03-17'))
known = [24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712]
failing = [36249657, 24737482, 24848663, 36336592, 35693804, 36451910, 36409381, 24974455, 36246889, 36040025, 36265638, 35640060, 36368903, 35684351, 36172990]
failing - known
exit
amount + adjustment
print-accounting 
edit set_fees_accrued
print-accounting loan
new = [36186251,36227667,36252788,36263378,36291141,36299109,36326065,36336592,36368903,36425672,36451910,36469445]
suite = [ 24737482, 24848663, 24974455, 36015585, 36241016, 36249519, 36249520, 36249521, 36249523, 36249524, 36249528, 36249529, 36249530, 36249534, 36249543, 36266337, 36266338, 36266343, 36266354, 36266363, 36266364, 36266366, 36266368, 36266371, 36266373, 36172699, 36227667, 36252788, 36263378, 36291141, 36326065, 36368903, 36451910, 36149903, 35781646, 36207004, 36118486, 36174555, 36090120, 35835758, 36174012, 35549733, 35957863, 36207167, 36265638, 36059198, 36040025, 36139856, 36089830, 36167498, 36143235, 36080355, 36108158, 36172990, 36107396, 36228450, 36207115, 35803539, 36036696, 35966238, 35684351, 35850841, 35693804, 35923573, 35809394, 36409381, 36251685, 35640060, 36199226, 36149423, 36612256, 36196457, 36199226, 36225050, 36226119, 36226411, 36227447, 36234441, 36236449, 36240385, 36242154, 36250820, 36253068, 36254656, 36259451, 36265310, 36278078, 36278784, 36281849, 36298164, 36305140, 36306558, 36309544, 36318586, 36319928, 36322956, 36326928, 36327228, 36336344, 36336592, 36337733, 36345221, 36348413, 36353623, 36353839, 36354542, 36367374, 36385918, 36389764, 36400539, 36409792, 36418599, 36425064, 36426253, 36460671, 36475983, 36484846, 36487077, 36488748, 36492018, 36502029, 36526700, 36531128, 36547638, 36246176, 36246889, 36249657, 36177368, 36177371, 36177374, 36177383, 36177384, 36177385, 36177391, 36177395, 36177403, 36177404, 36183127, 36183136, 36183137, 36183142, 36183144, 36183146, 36183150, 36183152, 36183162, 36183167, 36181829, 36181834, 36181835, 36181836, 36181843, 36181844, 36181847, 36181849, 36181850, 36181851, 36562043, 36562047, 36562050, 36562051, 36562052, 36562053, 36562056, 36562058, 36562062, 36562066, 36348411, 36348437, 36348439, 36348467, 36348479, 36348553, 36348572, 36348592, 36348663, 36348668, 36433717, 36348430, 36547466, 36751216, 36751330, 36751790, 36752177, 36752973, 36754813, 36758909, 36759519, 36759534, 36759567, 36299109]
new - suite
new = ["36165621", "36166117", "36162978", "36168689", "36169695", "36166527", "36167190", "36158499", "36177021", "36178941", "36168631", "36132976", "36125572", "36078685", "36176728", "36096866", "36174926", "36169899", "36174554", "36167798"]
new.map!(&to_i)
new.map(&to_i)
new.first
new.first.to_i
new.map(&:to_i)
new.map!(&:to_i)
new
suite
suite = [ 24737482, 24848663, 24974455, 36015585, 36241016, 36249519, 36249520, 36249521, 36249523, 36249524, 36249528, 36249529, 36249530, 36249534, 36249543, 36266337, 36266338, 36266343, 36266354, 36266363, 36266364, 36266366, 36266368, 36266371, 36266373, 36172699, 36227667, 36252788, 36263378, 36291141, 36326065, 36368903, 36451910, 36149903, 35781646, 36207004, 36118486, 36174555, 36090120, 35835758, 36174012, 35549733, 35957863, 36207167, 36265638, 36059198, 36040025, 36139856, 36089830, 36167498, 36143235, 36080355, 36108158, 36172990, 36107396, 36228450, 36207115, 35803539, 36036696, 35966238, 35684351, 35850841, 35693804, 35923573, 35809394, 36409381, 36251685, 35640060, 36199226, 36149423, 36612256, 36196457, 36199226, 36225050, 36226119, 36226411, 36227447, 36234441, 36236449, 36240385, 36242154, 36250820, 36253068, 36254656, 36259451, 36265310, 36278078, 36278784, 36281849, 36298164, 36305140, 36306558, 36309544, 36318586, 36319928, 36322956, 36326928, 36327228, 36336344, 36336592, 36337733, 36345221, 36348413, 36353623, 36353839, 36354542, 36367374, 36385918, 36389764, 36400539, 36409792, 36418599, 36425064, 36426253, 36460671, 36475983, 36484846, 36487077, 36488748, 36492018, 36502029, 36526700, 36531128, 36547638, 36246176, 36246889, 36249657, 36177368, 36177371, 36177374, 36177383, 36177384, 36177385, 36177391, 36177395, 36177403, 36177404, 36183127, 36183136, 36183137, 36183142, 36183144, 36183146, 36183150, 36183152, 36183162, 36183167, 36181829, 36181834, 36181835, 36181836, 36181843, 36181844, 36181847, 36181849, 36181850, 36181851, 36562043, 36562047, 36562050, 36562051, 36562052, 36562053, 36562056, 36562058, 36562062, 36562066, 36348411, 36348437, 36348439, 36348467, 36348479, 36348553, 36348572, 36348592, 36348663, 36348668, 36433717, 36348430, 36547466, 36751216, 36751330, 36751790, 36752177, 36752973, 36754813, 36758909, 36759519, 36759534, 36759567, 36299109, 36186251, 36425672, 36469445]
new
new - suite
exit
edit check_balance
print-accounting loan
[24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712].include? loan.id
edit check_balance
loan.id
[24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712].include? loan.id
print-accounting loan
balance
print-accounting loan
loan
balance
actual
print-accounting loan
balance
print-accounting loan -b
balance
actual
print-accounting loan
print-accounting loan -b
balance
print-accounting loan 
print-accounting loan -b
loan
balance
print-accounting lona
print-accounting loan
loan
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
balance
loan
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
loan
balance
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
balacne
balance
actual
print-accounting loan
loan
balance
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
balance
loan
print-accounting loan
print-accounting loan -b
loan.current_obligation(Date.parse('2014-03-17')
)
loan.current_obligation(Date.parse('2014-03-17'))
loan.current_obligation(Date.parse('2014-03-17')).fees_accrued
loan.current_obligation(Date.parse('2014-03-17')).total_fees'
loan.current_obligation(Date.parse('2014-03-17')).total_fees
loan
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan-b
print-accounting loan -b
balance
actual
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
loan
balance
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
balance
print-accounting loan
balance
print-accounting loan
balance
known = [[24737482, 35640060, 35693804, 36336592, 36409381, 24848663, 24974455, 35684351, 35835758, 36451910, 36368903, 36249657, 36246889, 36040025, 36265638, 36172990, 36150548, 36124184, 36153764, 36165167, 36177312, 36166061, 36169704, 36165712, 36176728, 36167798, 36169695, 36166527, 36168631, 36169899, 36178941, 36174554, 36425672, 36078685, 36166117, 36158499, 36096866, 36168689, 36167190, 36177021, 36132976, 36125572, 36174926, 36162978]
].flatten!
know
known
suite = [ 24737482, 24848663, 24974455, 36015585, 36241016, 36249519, 36249520, 36249521, 36249523, 36249524, 36249528, 36249529, 36249530, 36249534, 36249543, 36266337, 36266338, 36266343, 36266354, 36266363, 36266364, 36266366, 36266368, 36266371, 36266373, 36172699, 36227667, 36252788, 36263378, 36291141, 36326065, 36368903, 36451910, 36149903, 35781646, 36207004, 36118486, 36174555, 36090120, 35835758, 36174012, 35549733, 35957863, 36207167, 36265638, 36059198, 36040025, 36139856, 36089830, 36167498, 36143235, 36080355, 36108158, 36172990, 36107396, 36228450, 36207115, 35803539, 36036696, 35966238, 35684351, 35850841, 35693804, 35923573, 35809394, 36409381, 36251685, 35640060, 36199226, 36149423, 36612256, 36196457, 36199226, 36225050, 36226119, 36226411, 36227447, 36234441, 36236449, 36240385, 36242154, 36250820, 36253068, 36254656, 36259451, 36265310, 36278078, 36278784, 36281849, 36298164, 36305140, 36306558, 36309544, 36318586, 36319928, 36322956, 36326928, 36327228, 36336344, 36336592, 36337733, 36345221, 36348413, 36353623, 36353839, 36354542, 36367374, 36385918, 36389764, 36400539, 36409792, 36418599, 36425064, 36426253, 36460671, 36475983, 36484846, 36487077, 36488748, 36492018, 36502029, 36526700, 36531128, 36547638, 36246176, 36246889, 36249657, 36177368, 36177371, 36177374, 36177383, 36177384, 36177385, 36177391, 36177395, 36177403, 36177404, 36183127, 36183136, 36183137, 36183142, 36183144, 36183146, 36183150, 36183152, 36183162, 36183167, 36181829, 36181834, 36181835, 36181836, 36181843, 36181844, 36181847, 36181849, 36181850, 36181851, 36562043, 36562047, 36562050, 36562051, 36562052, 36562053, 36562056, 36562058, 36562062, 36562066, 36348411, 36348437, 36348439, 36348467, 36348479, 36348553, 36348572, 36348592, 36348663, 36348668, 36433717, 36348430, 36547466, 36751216, 36751330, 36751790, 36752177, 36752973, 36754813, 36758909, 36759519, 36759534, 36759567, 36299109, 36186251, 36425672, 36469445, 36165621, 36166117, 36162978, 36168689, 36169695, 36166527, 36167190, 36158499, 36177021, 36178941, 36168631, 36132976, 36125572, 36078685, 36176728, 36096866, 36174926, 36169899, 36174554, 36167798]
suite - known
new = suite - known
new.to_json
exit
Sidekiq::Stats.new
Sidekiq::Stats.new.reset
exit
Sidekiq::Stats.new.reset
exit
loan = Loan.find 36165621
print-accounting loan
loan.due_date
laon
loan
print-accounting loan -b
exit
loan = Loan.find 
loan = Loan.find 36365021
exit
print-accounting loan
print-accounting loan -b
loan = Loan.find 36405795
exit
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
exit
print-accounting loan
edit check_balance
tasks_to_transform
transformed_task
transformed_tasks
exit
print-accounting loan
print-accounting loan -
print-accounting loan -b
loan.fee_amount
loan.fee_amount.to_f
loan
print-accounting loan
loan.fee_amount
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan.issue_date
print-accounting loan -b
loan.fee_amount
loan.fee_amount.to_f
loan.due_date
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan.issue_date
print-accounting loan 
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.issue_date
print-accounting loan
print-accounting loan -b
loan
print-accounting loan 
print-accounting loan -b
print-accounting loan 
print-accounting loan
print-accounting 
exit
print-accounting
exit
print-accounting
exit
print-accounting loan
print-accounting
exit
print-accounting
fee_assessed?(today)
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
fee_assessed?(today)
fees_left = unrecognized_fee - amount_to_recognize
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan.fees_to_recognize(Date.parse('2014-02-04')
)
loan.fees_to_recognize(Date.parse('2014-02-04'))
loan.fees_to_recognize(Date.parse('2014-02-04')) /((loan.due_date - loan.issue_date) + 1)
loan.fees_to_recognize(Date.parse('2014-02-04')) -4.08/((loan.due_date - loan.issue_date) + 1)
loan.fees_to_recognize(Date.parse('2014-02-04')) -4.08/((loan.due_date - loan.issue_date))
loan.fee_amount
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting
print-accounting -b
fee
date
today
source.due_date
source.due_date - today
source.recognize_full_fees(today)
source.fees_to_recognize
source.fees_to_recognize(today)
source.fees_to_recognize(today)/(source.due_date + 1- today)
fee
print-accounting loan
print-accounting 
fee
taody
today
fee
print-accounting loan
loan.fees_to_recognize(Date.today)
loan.fees_to_recognize(loan.issue_date)
loan.fees_to_recognize(loan.issue_date) / (loan.due_date + 1 - loan.issue_date)
loan.fees_to_recognize(loan.issue_date) - 0.3 / ((loan.due_date + 1) - loan.issue_date)
loan.fees_to_recognize(loan.issue_date) - 0.3 / ((loan.due_date + 1) - loan.issue_date+1)
loan.fees_to_recognize(loan.issue_date) - 0.3 / ((loan.due_date + 1) - (loan.issue_date+1))
(loan.fees_to_recognize(loan.issue_date) - 0.3) / ((loan.due_date + 1) - (loan.issue_date+1))
exit
print-accounting
print-accounting -b
fee
print-accounting
whereami
fee
print-accounting 
print-accounting loan
print-accounting 
fee_amount
fee
print-accounting 
print-accounting
date
print-accounting 
print-accounting
print-accounting loan
$its_pry_time = true
date
amount
date
print-accounting
adjusting?
amount / (source.due_date+1 - date
)
amount
D(amount / (source.due_date+1 - date)).floor(places: 2)
print-accounting loan
print-accounting loan -b
$its_pry_time
$its_pry_time = true
print-accounting
$its_pry_time
print-accounting loan
print-accounting lona
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
print-accounting loan 
whereami
edit check_balance
@seen
print-accounting lona
print-accounting loan
@seen
print-accounting loan
@seen
print-accounting loan
print-accounting loan -b
print-accounting lona
print-accounting loa
print-accounting loan
print-accounting loan -b
print-accounting loan
@seen
@seen.size
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan 
@seen
@seen.size
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan 
loan
print-accounting loan 
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan
@seen
@seen.size
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting 
print-accounting loan
@seen.size
print-accounting loan
loan
print-accounting loan
@seen.size
print-accounting loan
@seen.uniq.size
@seen.uniq!.size
@seen.size
print-accounting loan
loan
print-accounting loan
@seen.uniq!
@seen.size
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
@seen.uniq!.size
print-accounting loan
@seen.uniq!.size
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan 
@uniq.size
@seen.size
@seen.uniq!.size
print-accounting loan 
loan
print-accounting loan 
@seen.uniq
@seen.uniq!
@seen.uniq!.size
@seen.uniq.size
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan 
print-accounting loan
print-accounting 
amount
accrued
date
accrued.to_f
edit build_loan
cluster
Rails.root.join('public', 'reporting', cluster, "#{year}", "#{month}")
cluster.id
exit
Sidekiq::Stats.new.reset
exit
Sidekiq::Queue.new.clear
exit
Date.business_days_ago(Date.today,2)
exit
Date.business_days_ago(Date.today,2)
exit
Date.business_days_ago(Date.today,2)
exit
Date.business_days_after(Date.today,2)
Date.business_days_after(Date.today,3)
Date.business_days_after(Date.today,4)
Date.business_days_after(Date.today,8)
Date.business_days_after(Date.today,0)
Date.business_days_after(Date.today,1)
Date.business_days_after(Date.today,2)
Date.business_days_after(Date.today,3)
Date.business_days_after(Date.today,4)
exit
output
Sql.nsf_in_transit(cluster.id,Date.business_days_ago(month_end, 2), month_end, month_end)
exit
print-accounting
print-accounting -b
print-accounting 
print-accounting -b
amount
print-accounting 
print-accounting -b
$its_pry_time = true
print-accounting
print-accounting -b
today
date
whereami
@current_activity
amount
activity
accountant.current_activity
entry dr, cr, amount
accountant.current_activity
print-accounting
accountant.current_activity
current_activity
current_activity.entries
edit check_balance
print-accounting 
loan.issue_date
source.issue_date
source
print-accounting loan
loan.due_date
loan.forward loan.due_date
loan.accountant.forward loan.due_date
print-accounting loan
print-accounting loan -b
print-accounting
print-accounting -b
print-accounting
print-accounting loan
loan.accountant.start_date
loan.accountant.start_date = loan.accountant.most_recent_effective_date
loan.accountant.forward loan.due_date + 1
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.due_date
loan.issue_date
print-accounting loan -b
loan.issue_date
loan.due_date
print-accounting loan
loan.due_date
print-accounting
print-accounting -b
caller
whereami
reconcile_amount
loan.id
print-accounting 
exit
print-accounting 
apply_customer_balance
print-accounting
print-accounting loan
print-accounting
print-accounting 
print-accounting
print-accounting 
print-accounting loan
print-accounting 
print-accounting
caller
print-accounting 
caller
print-accounting 
print-accounting -b
loan.due_date
source.due_date
exit
print-accounting loan
caller
print-accounting loan
print-accounting 
print-accounting
caller
print-accounting
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.due_date
print-accounting loan -b
print-accounting loan 
edit check_balance
print-accounting loan
loan.issue_date -1
loan.issue_date
exit
print-accounting loan
loan.fee_amount
loan.fee_amount.to_f
print-accounting loan -b
loan.due_date - loan.issue_date
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
Activity.find 647
FinanceXL::Activity.find 647
print-accounting loan
edit check_balance
@seen
@seen.uniq
@seen.uniq.size
@seen.size
edit check_balance
print-accounting lona
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
print-accounting
print-accounting 
print-accounting loan
print-accounting 
print-accounting -b
print-accounting 
whereami
print-accounting
print-accounting -b
print-accounting
whereami
print-accounting
print-accounting loan
loan
print-accounting loan
loan.accountant.activities.all
loan.accountant.activities.all.select { |act| act.activity_id == 118 }
loan.accountant.activities.all.select { |act| act.activity_id == 118 }.first.task_id
print-accounting loan
loan
edit check_balance
s = [:issue,
  :fee,
  :extend_principal,
  :refinance,
  :late_fee,
  :nsf_fee,
  :fee_discount,
  :fee_credit,
  :ach_credit,
  :default,
  :cancel,
  :payoff,
  :interest,
  :credit_interest,
  :settle_to_cso,
  :settle_to_lender,
  :charge_off,
  :call_due,
:reconcile]
s
s.sort
s = ['us',
  'gb',
  'jv',
'ca']
s.sort
s = [[:fees_ar, :fee_income],
  [:uncollected_principal, :internal_account],
  [:principal, :internal_account],
  [:fees_ar, :internal_account],
  [:nsf_fees_ar, :internal_account],
  [:late_fees_ar, :internal_account],
  [:uncollected_fees, :internal_account],
  [:uncollected_nsf_fees, :internal_account],
  [:uncollected_late_fees, :internal_account],
  [:late_fees_ar, :late_fee_income],
  [:nsf_fees_ar, :nsf_fee_income],
  [:disbursement_account, :co_late_fees],
  [:disbursement_account, :co_nsf_fees],
  [:disbursement_account, :uncollected_late_fees],
  [:disbursement_account, :uncollected_nsf_fees],
  [:disbursement_account, :late_fees_ar],
  [:disbursement_account, :nsf_fees_ar],
  [:disbursement_account, :co_fees],
  [:disbursement_account, :co_principal],
  [:disbursement_account, :uncollected_fees],
  [:disbursement_account, :uncollected_principal],
  [:disbursement_account, :fees_ar],
  [:disbursement_account, :principal],
  [:disbursement_account, :charge_off_recoveries],
  [:charge_off_recoveries, :co_late_fees],
  [:charge_off_recoveries, :co_nsf_fees],
  [:charge_off_recoveries, :uncollected_late [:charge_off_recoveries, :uncol,  [:charge_off_recoveries, :uncrg [:charge_off_recoveries, :uncolle [ [:charge_off_recoveries, :uncollecr] [:charge_off_recoveries, :uncollected_ [ [:charge_off_recoveries, :uncollected_latech [:charge_off_recoveries, :uncollected_late ch [:charge_off_recoveries, :uncolleprincipal],
                    [:charge_off_recoveries [:charge_off_recoveries [:charge_off_r:p [:charge_off_recoveries [:charge_off_
                            co                                               s,                                       s,                                      fe                                  :principal],
[:co_late_fees, :uncollected_ [:co_late_fees, :uncollected_ [:co_late_fens [:co_late_fees, :uncollected_ [:co_late_fees, :   [:co_late_fees, :uncollected_ [:cpr [:co_late_fees, :uncollected_ [:co_ct [:co_late_fees, :uncollected_ [:co_late_fees, :   [:co_late_fees, :uncollected_ [:co_late         ],
                        [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, ac [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_oriar [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orig_fees, :uncollected_o [:co_orist_ar],
                                                                        [:cso_disbursement_account, :lender_orig_fees_ar],
                                                                        [:cso_disbursement_account, :lender_fees_ar],
                                                                        [:cso_disbursement_account, :lender_principal],
                                                                        [:cso_disbursement_account, :lender_nsf_fees_ar],
                                                                        [:cso_disbursement_account, :lender_disbursement_account],
                                                                      ]
edit
s
s.sort
s =   ["fee_credit_ach",
  "co_fees",
  "co_late_fees",
  "co_nsf_fees",
  "co_principal",
  "co_uncollected_fees_pmt",
  "co_uncollected_late_fees",
  "co_uncollected_nsf_fees",
  "co_uncollected_principal",
  "fee_credits",
  "other_credit",
  "fee_discount",
  "default_fees",
  "default_late_fee",
  "default_nsf_fee",
  "default_principal",
  "late_fee",
  "new_loan",
  "new_loan_fee",
  "topup_principal_carryover",
  "new_loan_fee_top_up",
  "nsf_fee",
  "carryover_fees_pmt",
  "carryover_principal_pmt",
  "carryover_uncollected_principal_pmt",
  "carryover_uncollected_late_fees_pmt",
  "carryover_uncollected_nsf_fees_pmt",
  "carryover_uncollected_fees_pmt",
  "carryover_nsf_fees",
  "carryover_late_fees",
  "co_fees_pmt",
  "co_late_fees_pmt",
  "co_nsf_fees_pmt",
  "co_principal_pmt",
  "uncollected_fees_pmt",
  "uncollected_late_fees_pmt",
  "uncollected_nsf_fees_pmt",
  "uncollected_principal_pmt",
  "fee_pmt",
  "late_fee_pmt",
  "nsf_fee_pmt",
  "principal_pmt",
"reconcile_co_fee   "reconcilre   "reconcile_co_ee   "reconcile_conc   "reconcile_co_mt   "reconcile_co_fee   "recol_   "reconcile_co_fee   "reconed   "reconcile_co_fee   "recoco   "reconcile_co_fee   "reconec   "reconcile_coed   "reconcile_co_     "reconcile_co_ec   "reconcile_co_",   "reconcile_co_fee t"   "reconcile_co_fee_f   "reconcile_co_fee  _n   "reconcile   "reconcile_pri   "reconcile_co_overpayment"]
edit
s.sort
Sidekiq::Stats.new.reset
Sidekiq::Queue::clear
Sidekiq::Queue.new.clear
exit
Sidekiq::Stats.new.clear
Sidekiq::Stats.new.reset
Sidekiq.Queue.new.clear
Sidekiq::Queue.new.clear
Sidekiq::Stats.new.reset
Sidekiq::Queue.new.clear
exit
Sidekiq::Queue.new.clear
Sidekiq::Stats.new.reset
exit
Sidekiq::Stats.new.reset
Sidekiq::Queue.new.clear
exit
payment_method
print-accounting
payment_method = "debit_card"
payment_method="debit_card"
payment_method = "debit_card"
exit
payment_method
payment_method="debit_card"
payment_method
payment_method="debit_card"
print-accounting loan
balance
print-accounting loan -b
balance
actual
whereami
scenarios
print-accounting lona
print-accounting loan
loan
print-accounting loan -b
print-accounting loan
loan
balance
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan 
Loan.find_by_cnuapp_loan_id_and_cluster(35142731, Cluster["us"]_
Loan.find_by_cnuapp_loan_id_and_cluster(35142731, Cluster["us"])
Loan.find_by_cnuapp_loan_id_and_cluster_id(35142731, Cluster["us"])
exit
Loan.finder(35142731, "us")
exit
Loan.finder(35142731, "us")
Loan.finder(35142731, Cluster["us"])
Cluster[Cluster[Cluster["us']]]
Cluster[Cluster[Cluster["us"]]]
exit
Loan.finder(35142731, Cluster["us"])
print-accounting loan
loan = Loan.finder(35142731, Cluster["us"])
print-accounting loan
exit
cluster = "us"
loan = Loan.finder 34716689, cluster
print-accounting loan
print-accounting loan -b
loan = Loan.finder 35129162, cluster
print-accounting loan
print-accounting loan -b
loan = Loan.finder 35480157, cluster
print-accounting loan 
print-accounting loan -b
print-accounting loan 
loan.activities.select { |act| act.type?("charge_off") }.map(&:task_id)
loan.accountant.activities.select { |act| act.type?("charge_off") }.map(&:task_id)
exit
print-accounting loan
print-accounting loan -b
edit
loans = _
edit
loan
id
Loan.find_by_cnuapp_loan_id id
cluster = "us"
loan = Loan.finder 35927116, cluster
print-accounting loan
loan = Loan.finder 35211331, cluster
print-accounting loan
print-accounting loan -b
exit
amount_to_recognize
edit recognize_fees_early
print-accounting loan
edit check_balance
print-accounting loan
print-accounting loan -d
print-accounting loan -b
edit check_balance
Sidekiq::Queue
Sidekiq::Queue.all
Sidekiq::Queue.all.each(&:pause)
Sidekiq::Queue.all.each(&:unpause)
exit
Sidekiq::Queue.all.reject {|q| q.name == "cnuapp_api_status_check" }
exit
BackFillWorker.perform_async(2)
BackfillWorker.perform_async(2)
exit
BackfillWorker.perform_async(2)
BackfillWorker.perform_async(2, Cluster["us"])
exit
Rails.env
exit
BackfillWorker.perform_async(2, Cluster["us"])
BackfillWorker.perform_async(2, "us")
BackfillWorker.perform_async([2], "us")
exit
scenarios = JSON.parse("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"
)
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
edit
ids
edit
\e
edit
loan_tasks
loan_tasks = loan_tasks.first
loan_tasks
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
scenarios = JSON.parse("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"
)
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
loan_tasks.each { |task| task.symbolize_keys }
edit
loan_tasks
loan_tasks.each { |task| task.symbolize_keys }
edit
loan_tasks.each {|task| puts task[:cnuapp_loan_id] }
loan_tasks.each {|task| puts task["cnuapp_loan_id"] }
edit
loans_to_backfill
ids.size
ids
edit
loan_tasks
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
edit
ids
loan_tasks
loans_to_backfill
edit
ids
ids.size
loans_to_backfill
loans_to_backfill.size
edit
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
edit
loan_tasks
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks
edit
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == cnuapp_loan_id }
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] ==   temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == cnuapp_loan_id } }
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == 36759534 }
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == "36759534" }
tasks
loan_tasks
tasks = loan_tasks.dup
tasks
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == "36759534" }
temp_loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == 36759534 }
edit
ids
ids.size
loans_to_backfill
loans_to_backfill.size
edit
whereami
ids
edit
ids
loans_to_backfill
edit
loan_tasks
loan_tasks.size
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks.size
edit
whereami
cnuapp_loan_id
exit
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
edit
cnuapp_loan_id
proceed
temp_loan_tasks
temp_loan_tasks.any? { |task| acceptable_first_tasks.include?(task["task_name"]) }
exit
edit
proceed
loans_to_backfill
scenarios = JSON.parse(File.read("#{Rails.root}/spec/support/loan_tasks/real_loans/20140523130651.json"))
loan_tasks = scenarios["payday"]["input"]["real_scenario"]
edit
loans_to_backfill
ids
ids.size
temp_loan_tasks = tasks.select { |task| task["cnuapp_loan_id"] == "36752177" }
temp_loan_tasks = tasks.select { |task| task["cnuapp_loan_id"] == "36751790" }
loan_tasks
Loan.all
FinanceXL::Activity.all
ids
ids.to_json
ids.map(&:to_i).to_json
loan = Loan.finder 36751330, "us"
Loan.reload
exit
loan = Loan.finder 36751330, "us"
client(cluster).unprocessed_loan_tasks(id)
include Client
client(cluster).unprocessed_loan_tasks(id)
client("us").unprocessed_loan_tasks(id)
client("us").unprocessed_loan_tasks(36759534)
cluster = "us"
id = 36759534
loan_tasks = transform_tasks(client(cluster).unprocessed_loan_tasks(id), cluster)
include LoanTaskTransformer
loan_tasks = transform_tasks(client(cluster).unprocessed_loan_tasks(id), cluster)
loan_tasks = transform_tasks(client(cluster).unprocessed_loan_tasks(id)["loan_tasks"], cluster)
me = false
me ||= true
me
exit
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
exit
print-accounting
print-accounting simulator
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
exit
(start_date..end_date).each do |date|
  next if weekend?(date)
  file_name = output_file_name(cluster, date.strftime("%m-%d-%Y"))
end
exit
loan = Loan.finder 36469445, "us"
print-accounting loan
print-accounting loan -b
whereami
amount
whereami
amount
recognize_full_fees(date)
amount ||= recognize_full_fees(date)
D(amount / (source.due_date+1 - date)).floor(places: 2)
amount.to_f
source.due_date+1 - date
amount / (source.due_date+1 - date)
amount.to_f / (source.due_date+1 - date)
19 * 3.5
D('3.5')
DecNum.methods
DecNum.context
amount
amount / (source.due_date+1 - date)
D(3.5)
D('3.5')
D(amount / (source.due_date+1 - date))
D(D(amount) / (source.due_date+1 - date))
exit
@available
@available.size
@available.methods
@available.any_waiting?
@available.num_waiting
@available
@available.size
@available.methods
@available.num_waiting
@available.num_available
@available.available?
@available.mthods
@available.methods
@available.num_available
@available.methods
@available.num_waiting
Loan.first
exit
conn
conn = acquire_connection
conn = @available.poll
@connections.size < @size
checkout_new_connection
whereami
edit checkout
Loan.first
exit
@num_waiting
@connections.size < @size
checkout_new_connection
whereami
@num_waiting
c
whereami
c.in_use?
c.active?
c.activesafe?
c.active_threadsafe?
stale
whereami
c
c.stale
c.methods
c.methods.sort
c.pool
self
c.pool
self
whereami
c.methods.sort
c.last_use
c.reconnect!
c
c.verify!
c.active?
c
c.verify!
c.active?
c.active_thread_safe?
c.active_threadsafe?
c
c.pool
edit checkin
puts "Returning connection"
edit checkin
conn.id
conn.object_id
edit checkout_and_verify
nsf_fee 20,1,loan.due_date+4
super(type, accounting_date, amount, effective_date, payment_id, cancels_activity_id)
type
nsf_fee 20,1,loan.due_date+65
activity = super(type, accounting_date, amount, effective_date, payment_id, cancels_activity_id)
type
print-accounting loan
exit
print-accounting simulator
exit
edit simulate
print-accounting loan
exit
tasks
tasks.group_by { |t| t[:cnuapp_loan_id] }
exit
print-accounting loan
exit
print-accounting 
print-accounting simulator
print-accounting
print-accounting simulator
end_date
@start_date
simulator.source.current_obligation(end_date)
simulator.source.current_obligation(end_date).fees_accrued
simulator.start_date
$its_pry_time = true
accounts[:fee_income]
(accounts[:fee_income] - adjustment).abs
adjustment = activities.reject(&:cancelled?).select { |act| act.type?("ach_credit") }.map(&:entries).flatten.map(&:amount).sum
(accounts[:fee_income] - adjustment).abs
print-accounting
(accounts[:fee_income] - adjustment).abs
adjustment = activities.reject(&:cancelled?).select { |act| act.type?("ach_credit") }.map(&:entries).flatten.map(&:amount).sum
print-accounting
date
$its_pry_time = true
print-accounting
caller
whereami
accounts[:fee_income]
print-accounting
accrued = fees_accrued(date)
amount
accrued
caller
print-accounting 
print-accounting simulator
$its_pry_time
print-accounting
print-accounting simulator
print-accounting loan
edit simulate
print-accounting loan
print-accounting loan -b
edit check_balance
print-accounting loan
balance
actual
print-accounting loan
actual
expected
print-accounting loan
actual
expected
print-accounting loan
print-accounting loan -b
expected
actual
exit
print-accounting loan
actual
expected
print-accounting 
print-accounting loan
loan_args
@loans[cnuapp_loan_id] = FactoryGirl.build(:loan, loan_args)
loan_args
exit
loan_args
@loans[cnuapp_loan_id] = FactoryGirl.build(:loan, loan_args)
BigDecimal(65.46)
BigDecimal(65.46.to_s)
FactoryGirl.build(:loan, loan_args)
exit
loan = Loan.finder 35923573, "us"
print-accounting loan
print-accounting loan -b
loan
loan = Loan.finder 36266354, "us"
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
loan = Loan.finder 36469445, "us"
print-accounting loan
exit
loan = Loan.finder 36469445, "us"
print-accounting loan
print-accounting loan -b
loan
exit
loan = Loan.finder 36618443, "us"
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
loan = Loan.finder 36578776, "us"
print-accounting loan
exit
suite = JSON.parse(File.read('/export/loaner/test_suite_loans'))
suite = JSON.parse(File.read('/export/loaner/lib/test_suite_loans'))
suite
suite.sort.uniq!
suite
suite.sort
suite.uniq?
suite.uniq!
suite.sort!
suite.to_json
exit
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan = Loan.finder 36469445, "us"
print-accounting loan
print-accounting loan -b
exit
task
activity
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
load "lib/sql.rb"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
load "lib/sql.rb"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
app.reload!
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
String.parse("SELECT id FROM loan_tasks WHERE loan_task_cd LIKE \\'%default%\\' AND acct_date > \\'2014-01-01\\'::date AND processed_on IS NULL;
")
s = "SELECT id FROM loan_tasks WHERE loan_task_cd LIKE \\'%default%\\' AND acct_date > \\'2014-01-01\\'::date AND processed_on IS NULL;"
s = "SELECT id FROM loan_tasks WHERE loan_task_cd LIKE '\%default\%' AND acct_date > \\'2014-01-01\\'::date AND processed_on IS NULL;"
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
Sql.run_cnu_query(sql, Cluster["us"]
)
Cluster["us"]
Sql.run_cnu_query(sql, Cluster["us"])
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
Sql.run_cnu_query(sql, Cluster["us"])
db_name = Loaner::Config.cnuapp_databases[cluster][:name]
cluster
Loaner::Config.cnuapp_databases[cluster]
Loaner::Config.cnuapp_databases
cluster
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
Sql.run_cnu_query(sql, Cluster["us"])
exit
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
Sql.run_cnu_query(sql, Cluster["us"])
tasks = _
tasks.each_slice(1000)
tasks.map { |t| t[:id] }
ids = tasks.map { |t| t[:id] }
ids.each_slice(1000)
verify_handshaking
tasks.map { |t| t[:id] }
tasks
exit
MarkDefaultsProcessedWorker.perform_async("us")
exit
MarkDefaultsProcessedWorker.perform_async(Cluster["us"])
exit
Loaner::Config.cnuapp_databases[cluster.name][:name]
cluster
Loaner::Config.cnuapp_databases[cluster.name]
cluster.name
cluster
exit
MarkDefaultsProcessedWorker.perform_async("us")
require "lib/loan_task_processor"
require "lib/loan_task_processor.rb"
include LoanTaskProcessor
MarkDefaultsProcessedWorker.perform_async("us")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
cluster = "us"
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
exit
cluster = "us"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
exit
cluster = "us"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
task_ids.each_slice(1000)
task_ids.each_slice(1000).first
verify_handshaking(ids, reported_task_ids, cluster)
ids = task_ids.each_slice(1000).first
verify_handshaking(ids, reported_task_ids, cluster)
include Client
verify_handshaking(ids, reported_task_ids, cluster)
reported_task_ids = []
verify_handshaking(ids, reported_task_ids, cluster)
include Client
verify_handshaking(ids, reported_task_ids, cluster)
load Client
include Client
verify_handshaking(ids, reported_task_ids, cluster)
require Client
exit
cluster = "us"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
ids = task_ids.each_slice(1000).first
verify_handshaking(ids, reported_task_ids, cluster)
reported_task_ids = []
verify_handshaking(ids, reported_task_ids, cluster)
include Client
verify_handshaking(ids, reported_task_ids, cluster)
ids
ids.to_s
ids.compact.join(',')
exit
cluster = "us"
sql =  Sql.load_query("fetch_unprocessed_default_task_ids")
task_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
ids = task_ids.each_slice(1000)
ancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids.join(","))
ids = ids.to_a
ids = ids.compact
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids.join(","))
cancel_ids = Sql.run_cnu_query(sql, cluster).map { |t| t[:task_id] }
sql
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids.join(","))
cancel_ids = Sql.run_cnu_query(cancel_tasks, cluster).map { |t| t[:task_id] }
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids)
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", *ids)
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids)
exit
ids = ["1", "2"]
cancel_tasks = Sql.load_query("fetch_unprocessed_cancels_of_default_tasks", ids)
cancel_ids = Sql.run_cnu_query(cancel_tasks, cluster).map { |t| t[:task_id] }
cluster = "us"
cancel_ids = Sql.run_cnu_query(cancel_tasks, cluster).map { |t| t[:task_id] }
exit
parsed_input << Sql.run_cnu_query(query[:input], cluster)
exit
Sql.load_query("fetch_loan_tasks_by_funding_date", loan_type_condition, condition)
loan_type_condition
conditoin
condition
Sql.load_query("fetch_loan_tasks_by_funding_date", loan_type_condition, condition)
edit Sql.load_query
Sql.load_query("fetch_loan_tasks_by_funding_date", loan_type_condition, condition)
sql_string(method)
Loaner::Reporting.worker_queries.send(query_name)
whereami
Loaner::Reporting.worker_queries.send(query_name)
method
args
*args
exit
whereami
exit
caller
method
args
sql_string(method)
Loaner::Reporting.worker_queries
Loaner::Reporting.worker_queries.send(query_name)
Loaner::Reporting.worker_queries.
me
Loaner::Reporting.worker_queries
Loaner::Reporting.worker_queries.fetch_unprocessed_cancels_of_default_tasks
Loaner::Reporting.worker_queries.fetch_loan_tasks_by_funding_date
exit
whereami
Loaner::Reporting.worker_queries.fetch_loan_tasks_by_funding_date
exit
args
string = "SELECT loan_id, loan_type_cd, lt_id, lt_cd task_name, eff_date, parent_id, created_on, due_date, SUM(amount) amount, SUM(CASE WHEN pt_name IN ('new_loan', 'cso_new_loan', 'cso_refinance_loan') THEN amount ELSE 0 END) principal, SUM(CASE WHEN pt_name IN ('new_loan_fee', 'cso_new_loan_fee') THEN amount ELSE 0 END) fee, SUM(CASE WHEN pt_name = 'cso_settle_to_cso' THEN amount ELSE 0 END) cso_settle_to_cso, SUM(CASE WHEN pt_name = 'cso_settle_to_lender' THEN amount ELSE 0 END) cso_settle_to_lender, STRING_AGG((CASE WHEN pt_name = 'new_loan' THEN payment_method ELSE NULL END), '') new_loan_payment_method, (CASE WHEN lt_cd IN ('payoff_loan_task', 'payoff_loan_nsf_task', 'payoff_loan_no_nsf_task') THEN payment_method ELSE NULL END) payoff_payment_method FROM ( SELECT lt.loan_id, lt.id lt_id, lt.loan_task_cd lt_cd, pt.eff_date, lt.parent_id, pt.payment_transaction_name pt_name, pt.amount, pt.loan_task_id pt_lt_id, l.loan_type_cd loan_type_cd, l.cso_interest_rate cso_interest_rate, lt.created_on created_on, l.due_date_adjusted due_date, pt.payment_method_cd payment_method FROM payment_transactions pt JOIN loan_tasks lt ON lt.id = pt.loan_task_id JOIN loans l ON lt.loan_id = l.id WHERE l.loan_type_cd IN (?) AND pt.eff_date <= current_date AND ? ) t GROUP BY loan_id, lt_id, loan_type_cd, lt_cd, eff_date, parent_id, cso_interest_rate, created_on, due_date, payoff_payment_method ORDER BY loan_id, eff_date, lt_id, created_on"
string = "SELECT loan_id, loan_type_cd, lt_id, lt_cd task_name, eff_date, parent_id, created_on, due_date, SUM(amount) amount, SUM(CASE WHEN pt_name IN ('new_loan', 'cso_new_loan', 'cso_refinance_loan') THEN amount ELSE 0 END) principal, SUM(CASE WHEN pt_name IN ('new_loan_fee', 'cso_new_loan_fee') THEN amount ELSE 0 END) fee, SUM(CASE WHEN pt_name = 'cso_settle_to_cso' THEN amount ELSE 0 END) cso_settle_to_cso, SUM(CASE WHEN pt_name = 'cso_settle_to_lender' THEN amount ELSE 0 END) cso_settle_to_lender, STRING_AGG((CASE WHEN pt_name = 'new_loan' THEN payment_method ELSE NULL END), '') new_loan_payment_method, (CASE WHEN lt_cd IN ('payoff_loan_task', 'payoff_loan_nsf_task', 'payoff_loan_no_nsf_task') THEN payment_method ELSE NULL END) payoff_payment_method FROM ( SELECT lt.loan_id, lt.id lt_id, lt.loan_task_cd lt_cd, pt.eff_date, lt.parent_id, pt.payment_transaction_name pt_name, pt.amount, pt.loan_task_id pt_lt_id, l.loan_type_cd loan_type_cd, l.cso_interest_rate cso_interest_rate, lt.created_on created_on, l.due_date_adjusted due_date, pt.payment_method_cd payment_method FROM payment_transactions pt JOIN loan_tasks lt ON lt.id = pt.loan_task_id JOIN loans l ON lt.loan_id = l.id WHERE l.loan_type_cd IN (?) AND pt.eff_date <= current_date AND {?} ) t GROUP BY loan_id, lt_id, loan_type_cd, lt_cd, eff_date, parent_id, cso_interest_rate, created_on, due_date, payoff_payment_method ORDER BY loan_id, eff_date, lt_id, created_on"
string
args2 = [string "payday",
args2 = [string, "payday", "lt.loan_id IN (24737482)"]
ActiveRecord::Base.send(:sanitize_sql_array, args2)
args
ActiveRecord::Base.send(:sanitize_sql_array, args2)
ActiveRecord::Base.send(:sanitize_sql_array, args)
exit
args
args[2]
string = args[2]
string = "lt.loan_id IN (24737482)"
args2 = [args[0], args[1], string]
string = "(lt.loan_id IN (24737482))"
args[2]
args2 = [args[0], args[1], string]
args2
ActiveRecord::Base.send(:sanitize_sql_array, args)
ActiveRecord::Base.send(:sanitize_sql_array, args2)
exit
edit current_obligation
print-accounting
caller
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
CustomerFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
loaner_ids = CustomFileParser.new.fetch_loan_ids('loaner_nsf', 0)
diff = cnuapp_ids - loaner_ids
diff
diff.size
diff2 = loaner_ids - cnuapp_ids
diff
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
diff = cnuapp_ids - loaner_ids
diff.size
diff
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
diff = cnuapp_ids - loaner_ids
loaner_ids = CustomFileParser.new.fetch_loan_ids('loaner_nsf', 0)
diff = cnuapp_ids - loaner_ids
diff2 = loaner_ids - cnuapp_ids
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
require CustomFileParser
include CustomFileParser
load 'lib/custom_file_parser'
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
values
print-accounting loan
value
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
cnuapp_ids = CustomFileParser.new.fetch_values('loaner_nsf')
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
diff.size
load 'lib/custom_file_parser.rb'
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
diff.size
diff.include? 2731728
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
cnuapp_ids.keys - loaner_ids.keys
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
diff.include? 2734944
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
diff.include? 2734944
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
(74061.37 + 76765.73)
(76765.73 + 76765.73)
loaner_returned = _
loaner_returned
cnuapp_returned = 75611.30 + 59657.34
loaner_returned - cnuapp_returned
exit
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('loaner_nsf_1', 0)
diff = cnuapp_ids - loaner_ids
cnuapp_ids = CustomFileParser.new.fetch_loan_ids('cnuapp_nsf', 0)
loaner_ids = CustomFileParser.new.fetch_loan_ids('loaner_nsf_1', 0)
diff = cnuapp_ids - loaner_ids
loaner_ids = CustomFileParser.new.fetch_loan_ids('loaner_nsf_1', 0)
diff = cnuapp_ids - loaner_ids
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
cnuapp_ids = CustomFileParser.new.fetch_values('loaner_nsf_1')
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_1')
load 'lib/custom_file_parser.rb'
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf')
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
NEW MESSAGES
----- Today June 9th, 2014 -----
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
NEW MESSAGES
----- Today June 9th, 2014 -----
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
load 'lib/custom_file_parser.rb'
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
diff = (cnuapp_ids.keys & loaner_ids.keys).select { |id| cnuapp_ids[id] != loaner_ids[id] }
cnuapp_ids.keys - loaner_ids.keys
d = cnuapp_ids.keys - loaner_ids.keys
d.size
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp_ids = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
loaner_ids = CustomFileParser.new.fetch_values('loaner_nsf_jv')
loaner = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
NEW MESSAGES
----- Today June 9th, 2014 -----
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys & loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner_nsf_jv')
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys - loaner.keys
(cnuapp.keys - loaner.keys).size
loaner = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys.size
loaner.keys.size
loaner.keys - cnuapp.keys
cnuapp.keys - loaner.keys
cnuapp = CustomFileParser.new.fetch_values('cnuapp_nsf_jv')
cnuapp.keys - loaner.keys
loaner.keys - cnuapp.keys
loaner = CustomFileParser.new.fetch_values('loaner_nsf_jv')
cnuapp.keys - loaner.keys
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp[3155579]
bad_ones = CustomFileParser.new.fetch_ids('bad_loans', 0)
bad_ones = CustomFileParser.new.fetch_loan_ids('bad_loans', 0)
loaner = CustomFileParser.new.fetch_values('loaner_nsf_jv')
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys - loaner.keys
cnuapp[3273588]
loaner[3273588]
cnuapp[3273588] - loaner[3273588]
loaner.keys - cnuapp.keys
loaner = CustomFileParser.new.fetch_values('loaner_nsf_us')
cnuapp = CustomFileParser.new.fetch_values('cnuapp_nsf_us')
cnuapp.size
loaner = CustomFileParser.new.fetch_values('loaner_nsf_us')
loaner.size
cnuapp = CustomFileParser.new.fetch_values('cnuapp_nsf_us')
cnuapp.size
loaner.size
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys & loaner.keys
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
cnuapp.keys & loaner.keys
(cnuapp.keys & loaner.keys).size
cnuapp.keys - loaner.keys
(cnuapp.keys - loaner.keys).size
loaner = CustomFileParser.new.fetch_values('loaner_nsf_us')
cnuapp.keys - loaner.keys
(cnuapp.keys - loaner.keys).size
loaner = CustomFileParser.new.fetch_values('loaner_nsf_us')
loaner.size
(cnuapp.keys - loaner.keys).size
cnuapp.keys - loaner.keys
exit
loan = Loan.finder 3219447, "jv"
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
print-accounting loan
exit
print-accounting loan
print-accounting loan
loan
loaner = CustomFileParser.new.fetch_values('loaner_nsf_us')
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_jv.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_jv.csv')
renaol.keys - loaner.keys
loaner.keys -renaol.keys
loaner.keys - renaol.keys
diff = (cnuapp.keys & loaner.keys).select { |id| cnuapp[id] != loaner[id] }
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
id = 3246139
renaol[id] - loaner[id]
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
loaner.keys - renaol.keys
renaol.keys - loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_jv.csv')
renaol.keys - loaner.keys
loaner.keys - renaol.keys
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_jv.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_jv.csv')
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol[3220597] - loaner[3220597]
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_jv.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
loaner.keys - renaol.keys
renaol.keys - loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_jv.csv')
renaol.keys - loaner.keys
loaner.keys - renaol.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_jv.csv')
renaol.keys - loaner.keys
loaner.keys - renaol.keys
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
diff = loaner.keys - renaol.keys
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_ca.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_ca.csv')
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
big_diff.size
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
diff.size
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
diff
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol.keys - loaner.keys
loaner.keys - renaol.keys
(loaner.keys - renaol.keys).size
(renaol.keys - loaner.keys).size
renaol.keys - loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
renaol.keys - loaner.keys
(loaner.keys - renaol.keys).size
loaner.keys - renaol.keys
diff
(loaner.keys - renaol.keys).to_json
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
(loaner.keys - renaol.keys).to_json
renaol.keys - loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_ca.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
id = 2710028
renaol[id] != loaner[id]
renaol[id] - loaner[id]
id = 2715199
renaol[id] - loaner[id]
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol.keys - loaner.keys
loaner.keys - renaol.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_ca.csv')
renaol.keys - loaner.keys
loaner.keys - renaol.keys
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
diff
diff.to_json
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
diff.each { |id| puts "#{ renaol[id] - loaner[id] }" }
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
big_diff.size
big_diff
big_diff.map {|id| [id, renaol[id] - loaner[id]] }
loaner.keys - renaol.keys
renaol.keys - loaner.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
renaol.keys - loaner.keys
(renaol.keys - loaner.keys).size
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_us.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_us.csv')
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_us.csv')
loaner
renaol
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
big_diff.size
big_diff.map {|id| [id, renaol[id] - loaner[id]] }
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
big_diff.map {|id| [id, renaol[id] - loaner[id]] }
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
big_diff.map {|id| [id, renaol[id] - loaner[id]] }
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_us.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_us.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
diff.size
big_diff = diff.select { |id| (renaol[id] - loaner[id]).abs > 1 }
big_diff.map {|id| [id, renaol[id] - loaner[id]] }
big_diff.size
edit
loan = Loan.finder 28975726, "us"
exit
edit check_balance
expected == actual
loan
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
load 'lib/custom_file_parser.rb'
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_ca.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_us.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
id = 2732574
renaol[id] - loaner[id]
renaol.keys - loaner.keys
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_ca.csv')
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_ca.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol.keys - loaner.keys
loaner.keys - renaol.keys
exit
print-accounting
renaol = CustomFileParser.new.fetch_values('ar_by_loan_march_2014_jv.csv')
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_march_2014_jv.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol.keys - loaner.keys
renaol[3145213]
loaner.keys - renaol.keys
loaner = CustomFileParser.new.fetch_values('loaner/ar_by_loan_april_2014_jv.csv')
renaol = CustomFileParser.new.fetch_values('ar_by_loan_april_2014_jv.csv')
diff = (renaol.keys & loaner.keys).select { |id| renaol[id] != loaner[id] }
renaol.keys - loaner.keys
loaner.keys - renaol.keys
diff.map { |id| [id, renaol[id] - loaner[id]] }
exit
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
exit
loan.obligations.count
loan.obligaitions
loan.obligations
loan.obligations.to_a
loan.obligations.to_a.count
loan.obligations.each { |o| puts o.start_date }
loan.obligations.inspect
loan.obligations.each { |o| o.inspect }
loan.obligations.each { |o| puts o.start_date, o.end_date }
loan.obligations.each { |o| puts "#{o.start_date}, #{o.end_date} }
"
}
loan.obligations.each { |o| puts "#{o.start_date}, #{o.end_date}" }
loan.obligations.each { |o| puts "#{o.start_date}, #{o.due_date}" }
loan.obligations.each { |o| puts "#{o.start_date}, #{o.due_date}, #{o.target_date}" }
exit
activity
caller
print-accounting
exit
rules
hash = rules[:rules_hash]
hash = rules.first[:rules_hash]
hash = YAML.load(rules.first[:rules_hash])
YAML
hash = YAML.load(rules.first[:rules_hash])
hash = YAML.load("--- \ncap_increase: true")
hash = YAML.load(""--- \ncap_increase: true\nnew_base_loans_allowed: true\ndisable_ach_due_date_padding_for_cso: false\nlate_fee_min: 15\nnsf_loan_group_once: \nsend_oec_statement_ready_email: true\nnew_profitability_rate_adj: 0\npads_days: \nlate_fee_max_times: \nmin_installments: !map:CnuConfig::HashConfig \n  income_freq_type_cd: !map:CnuConfig::HashConfig \n    biweekly: \n    weekly: \n    monthly: \n    twice_monthly: \nrenewals_paydown_on_orig_amount: false\nlegacy_num_renewals_allowed: \nach_per_authorization: 3\noec_loan_term: 1095\nlate_fee_max_freq: 31\ncan_extend_with_no_payday: false\nmin_profitability_for_increase: 0\nproof_of_repayment_period: \nlender_orig_fee: 0\nincome_monthly_net: 2500\nexclude_nsf_from_late_fee_calc: false\nloan_amount_increment: 50\non_line_pay_stub_direct_to_new: \nnsf_only_ach_statuses: \noec_max_billing_fee: \n- - 0\n  - 199\n  - 0\n- - 200\n  - 299\n  - 40\n- - 300\n  - 399\n  - 60\n- - 400\n  - 499\n  - 80\n- - 500\n  - 749\n  - 100\n- - 750\n  - 999\n  - 150\n- - 1000\n  - 1249\n  - 175\n- - 1250\n  - 1499\n  - 225\n- - 1500\n  - 1749\n  - 250\n- - 1750\n  - 1999\n  - 275\neligibility: !map:CnuConfig::HashConfig \n  veritec: false\non_line_pay_stub_max_age_days: \nmax_days_between_loans_in_loan_chain: 5\ninstallment_approval_amount_multiplier: 1.5\nnsf_fee_days: \nbilling_period_offset: 15\nnsf_max_freq: \non_line_pay_stub_request_fax: \nloan_days_std: 14\non_line_pay_stub: \npreferred_cso_lender: \napproval_ignore_staleness: true\nx_loans_per_y_days__num_loans: \ngrace_period_probationary_days: 0\nminimum_draw_amount: 50\ninstallment_max_loan: \nmax_loan_pct_monthly_gross: \non_line_pay_stub_new_for_each_loan: \ngov_law: \nrenewals_num_allowed: 4\ndraw_early_payoff_cooloff: \ncollections_age_oec: 30\nmax_approval_override: 200\nmin_oec_billing_period: 8\npayoff_to_trustee: false\ntax_rate: \ngrace_period_days: 0\ncall_loan_due_minimum_default_installments: 3\npads_credits: \nprevious_loan_types: []\n\nloan_days_min: 8\nmax_instl_loan_length: \non_line_pay_stub_loan_monthly_gross_ratio_max: \nhistorical_products: \nend_of_loan_action_default: partial_payment\nfee_orig_splitout: \nnsf_fee_amount: \next_days_max: \npreferred_third_party_lender: \nrenewals_pct_paydown_start_date: \nlender_orig_sdf_fee: 0\nconditional_cso_lenders: \nalways_display_payment_plan_disclosure: false\nfee: 0\nmax_fee_group_pct: \nmax_amount_snapping_tolerance: 15\nreq_wait_after_days: \non_line_pay_stub_allow_nullable_money_fields: \nsplit_payments_forbidden: false\nperiod_minimum_payment: 100\ndate_rolling: true\nlate_fee_days: 15\non_line_pay_stub_limit_attempts: false\naggressive_offset: 2\nlate_fee_max: 15\nprofitability_rate_adj: 0\nreq_verify_empl_exp_days: \nreq_verify_empl: \npreferred_installment_term_within: 2\nperiod_percent_paydown: 25\nrenewals_pct_paydown: 0\nreq_wait_after_loans: \nloan_group_max: \ncall_loan_due_minimum_days_after_rtc: 0\nmax_loan: 1800\non_line_pay_stub_loan_monthly_gross_ratio_margin: 0.06\nmilitary_check: true\nmax_fee: \nimmediate_first_payment: false\ndraw_eligibility_offset: \nnsf_after_all_ach_attempts: \nmodel_amount_increase: true\nrescind_period: \ndaily_finance_rate: 0.000657534246575342\nlegacy_renewals_cutoff_date: \nend_of_loan_action_modifiable: true\nreq_wait_days: \nearly_payoff_days: \non_line_pay_stub_check_date_max_age_days: \non_line_pay_stub_validation: !map:CnuConfig::HashConfig {}\n\nmin_partial_payment_padding: 50\non_line_pay_stub_allow_customer_new_pay_stub: true\nx_loans_per_y_days__num_days: \nexclude_orig_fee_from_late_fee_calc: false\nach_due_date_padding: 0\ndraws_allowed: true\nlate_fee_pct: \nlate_fee_step_function: \nmilitary: \non_line_pay_stub_verifies_max_loan_amount: \nexisting_profitability_rate_adj: 0\nmin_fee: \npayday_max_limit: 1800\ninstallment_min_loan: \ninstallment_interest: \nbackdate_first_statement_start_date: true\nmin_instl_loan_length: \ntrustee: \nright_to_cure_email_required: false\nmin_loan: 200\nfee_orig: 0\ncontract_types: \n- oec\nloan_amount_array: \nmax_oec_billing_period: 40\nfee_refund_allowed: false\ninterest_rounding_benefits_customer: false\nmax_loan_pct_monthly_net: \next_combined_max: \nloan_types: \n- oec\nexclude_interest_from_fees: false\nexclude_all_discounts: \nplra_verification: false\nskip_instl_months: \nstatement_interest_rate: 0\nloan_days_ext_max: 35\nxpp_min_loan_chain_size: false\nexclude_organic: true\nincome_freq_type_cd: \nminimum_installments: \ncompliance: !map:CnuConfig::HashConfig \n  veritec: false\nloan_days_max: 35\nnsf_unextended_only: \nfee_interest_incl_orig: \ngrace_period_mandated: false\nveritec_trans_num_contract: \nmax_loan_count: 1\nmin_partial_payment_amount: 25\noec_min_billing_fee: \n- 0\n- 0.25\ncso_lender_by_loan_amount: \next_days_min: \ndraw_fee: \n- 0\n- 0.25\npads: \nmin_first_instl_period: \nallow_draws_past_end_date: true\n")
hash = YAML.load("--- \ncap_increase: true\nnew_base_loans_allowed: true\ndisable_ach_due_date_padding_for_cso: false\nlate_fee_min: 15\nnsf_loan_group_once: \nsend_oec_statement_ready_email: true\nnew_profitability_rate_adj: 0\npads_days: \nlate_fee_max_times: \nmin_installments: !map:CnuConfig::HashConfig \n  income_freq_type_cd: !map:CnuConfig::HashConfig \n    biweekly: \n    weekly: \n    monthly: \n    twice_monthly: \nrenewals_paydown_on_orig_amount: false\nlegacy_num_renewals_allowed: \nach_per_authorization: 3\noec_loan_term: 1095\nlate_fee_max_freq: 31\ncan_extend_with_no_payday: false\nmin_profitability_for_increase: 0\nproof_of_repayment_period: \nlender_orig_fee: 0\nincome_monthly_net: 2500\nexclude_nsf_from_late_fee_calc: false\nloan_amount_increment: 50\non_line_pay_stub_direct_to_new: \nnsf_only_ach_statuses: \noec_max_billing_fee: \n- - 0\n  - 199\n  - 0\n- - 200\n  - 299\n  - 40\n- - 300\n  - 399\n  - 60\n- - 400\n  - 499\n  - 80\n- - 500\n  - 749\n  - 100\n- - 750\n  - 999\n  - 150\n- - 1000\n  - 1249\n  - 175\n- - 1250\n  - 1499\n  - 225\n- - 1500\n  - 1749\n  - 250\n- - 1750\n  - 1999\n  - 275\neligibility: !map:CnuConfig::HashConfig \n  veritec: false\non_line_pay_stub_max_age_days: \nmax_days_between_loans_in_loan_chain: 5\ninstallment_approval_amount_multiplier: 1.5\nnsf_fee_days: \nbilling_period_offset: 15\nnsf_max_freq: \non_line_pay_stub_request_fax: \nloan_days_std: 14\non_line_pay_stub: \npreferred_cso_lender: \napproval_ignore_staleness: true\nx_loans_per_y_days__num_loans: \ngrace_period_probationary_days: 0\nminimum_draw_amount: 50\ninstallment_max_loan: \nmax_loan_pct_monthly_gross: \non_line_pay_stub_new_for_each_loan: \ngov_law: \nrenewals_num_allowed: 4\ndraw_early_payoff_cooloff: \ncollections_age_oec: 30\nmax_approval_override: 200\nmin_oec_billing_period: 8\npayoff_to_trustee: false\ntax_rate: \ngrace_period_days: 0\ncall_loan_due_minimum_default_installments: 3\npads_credits: \nprevious_loan_types: []\n\nloan_days_min: 8\nmax_instl_loan_length: \non_line_pay_stub_loan_monthly_gross_ratio_max: \nhistorical_products: \nend_of_loan_action_default: partial_payment\nfee_orig_splitout: \nnsf_fee_amount: \next_days_max: \npreferred_third_party_lender: \nrenewals_pct_paydown_start_date: \nlender_orig_sdf_fee: 0\nconditional_cso_lenders: \nalways_display_payment_plan_disclosure: false\nfee: 0\nmax_fee_group_pct: \nmax_amount_snapping_tolerance: 15\nreq_wait_after_days: \non_line_pay_stub_allow_nullable_money_fields: \nsplit_payments_forbidden: false\nperiod_minimum_payment: 100\ndate_rolling: true\nlate_fee_days: 15\non_line_pay_stub_limit_attempts: false\naggressive_offset: 2\nlate_fee_max: 15\nprofitability_rate_adj: 0\nreq_verify_empl_exp_days: \nreq_verify_empl: \npreferred_installment_term_within: 2\nperiod_percent_paydown: 25\nrenewals_pct_paydown: 0\nreq_wait_after_loans: \nloan_group_max: \ncall_loan_due_minimum_days_after_rtc: 0\nmax_loan: 1800\non_line_pay_stub_loan_monthly_gross_ratio_margin: 0.06\nmilitary_check: true\nmax_fee: \nimmediate_first_payment: false\ndraw_eligibility_offset: \nnsf_after_all_ach_attempts: \nmodel_amount_increase: true\nrescind_period: \ndaily_finance_rate: 0.000657534246575342\nlegacy_renewals_cutoff_date: \nend_of_loan_action_modifiable: true\nreq_wait_days: \nearly_payoff_days: \non_line_pay_stub_check_date_max_age_days: \non_line_pay_stub_validation: !map:CnuConfig::HashConfig {}\n\nmin_partial_payment_padding: 50\non_line_pay_stub_allow_customer_new_pay_stub: true\nx_loans_per_y_days__num_days: \nexclude_orig_fee_from_late_fee_calc: false\nach_due_date_padding: 0\ndraws_allowed: true\nlate_fee_pct: \nlate_fee_step_function: \nmilitary: \non_line_pay_stub_verifies_max_loan_amount: \nexisting_profitability_rate_adj: 0\nmin_fee: \npayday_max_limit: 1800\ninstallment_min_loan: \ninstallment_interest: \nbackdate_first_statement_start_date: true\nmin_instl_loan_length: \ntrustee: \nright_to_cure_email_required: false\nmin_loan: 200\nfee_orig: 0\ncontract_types: \n- oec\nloan_amount_array: \nmax_oec_billing_period: 40\nfee_refund_allowed: false\ninterest_rounding_benefits_customer: false\nmax_loan_pct_monthly_net: \next_combined_max: \nloan_types: \n- oec\nexclude_interest_from_fees: false\nexclude_all_discounts: \nplra_verification: false\nskip_instl_months: \nstatement_interest_rate: 0\nloan_days_ext_max: 35\nxpp_min_loan_chain_size: false\nexclude_organic: true\nincome_freq_type_cd: \nminimum_installments: \ncompliance: !map:CnuConfig::HashConfig \n  veritec: false\nloan_days_max: 35\nnsf_unextended_only: \nfee_interest_incl_orig: \ngrace_period_mandated: false\nveritec_trans_num_contract: \nmax_loan_count: 1\nmin_partial_payment_amount: 25\noec_min_billing_fee: \n- 0\n- 0.25\ncso_lender_by_loan_amount: \next_days_min: \ndraw_fee: \n- 0\n- 0.25\npads: \nmin_first_instl_period: \nallow_draws_past_end_date: true\n")
hash
hash_string = rules.first[:rules_hash]
hash_string.gsub('!map:CnuConfig::HashConfig','')
hash_string.gsub!('!map:CnuConfig::HashConfig','')
hash = YAML.load(hash_string)
simulating_accountant(start_date: end_date)
end_date
print-accounting
edit simulating_accounting
edit simulating_accountant
simulating_accountant(start_date: end_date)
self.class.new(defaults.merge(options))
defaults
source.interest_rate
self.class.new(defaults.merge(options))
edit simulating_accountant
whereami
activities = options.delete(:activities)
edit initialize
whereami
interest_accounts
whereami
options
defaults
edit
edit initialize
simulating_accountant(start_date: end_date)
edit accountant_as_of
interest_rate
interest_rate.as_percentage
interest_rate.daily
daily_interest
rules = YAML.load(rules.gsub("!map:CnuConfig::HashConfig", ""))
exit
@loans[cnuapp_loan_id]
rules[:daily_interest_rate
]
rules["daily_interest_rate"]
rules
rules["daily_finance_rate"]
whereami
@loans[cnuapp_loan_id].interest_rate = rules["daily_finance_rate"] * 365
rules
.clear
exit
accountant.destroy_data
print-accounting loan
exit
edit build_loan
loan.current_obligation(date).due_date
loan.current_obligation(date)
loan
@loans[cnuapp_loan_id].save!
@loans[cnuapp_loan_id].reload
@loans[cnuapp_loan_id].obligations
@loans[cnuapp_loan_id].obligations.to_a
ob = loan.current_obligation(activity.effective_date)
ob = loan.current_obligation(activity.effective_date).amount
ob.amount = loan.obligation_amount({}) if ob
ob.amount
ob
ob = loan.current_obligation(activity.effective_date)
ob.amount = loan.obligation_amount({}) if ob
accountant.balances[:upfront_obligations]
accountant.balances
fees_to_recognize(issue_date)
exit
accountant.balances[:upfront_obligations] + fees_to_recognize(issue_date)
print-accounting
accountant.balances[:upfront_obligations] + fees_to_recognize(issue_date)
print-accounting 
date
print-accounting loan
current_obligation(date)
loan.current_obligation(date)
loan.current_obligation(date).amount
loan.current_obligation(date).due_date
print-accounting loan
print-accounting
accountant.balances[:upfront_obligations] + fees_to_recognize(issue_date)
loan.current_obligation
current_obligation
current_obligation(params[:eff_date])
params
current_obligation(issue_date)
gs
whereami
.clear
print-accounting
print-accounting 
edit build_loan
print-accounting 
loan.current_obligation(Date.parse('2012-02-24')
)
current_obligation(Date.parse('2012-02-24'))
current_obligation(Date.parse('2012-02-24')).amount
current_obligation(Date.parse('2012-02-23')).amount
current_obligation(Date.parse('2012-02-23'))
accountant.balances[:upfront_obligations]
print-accounting -b
exit
print-accounting
activity
print-accounting
obligation
loan.obligation_amount({})
accountant.balances[:upfront_obligations]
print-accounting -b
today
date
whereami
today
date
current_activity
caller
.clear
whereami
print-accounting
print-accounting -b
whereami
loan.obligation_amount({})
accountant.balances[:upfront_obligations]
print-accounting accountant
print-accounting
obligation.amount
obligation.amount.to_f
exit
print-accounting
current_ob
print-accounting 
ob.amount
print-accounting
current_obligations = obligations.chronological.current(date)
@current_obligation = current_obligations.first
@current_obligation.due_date
current_obligations = obligations.current(date)
@current_obligation = current_obligations.first
@current_obligation = current_obligations.first.due_date
edit current_obligation
ob
print-accounting
o
ob
print-accounting
ob
print-accounting
ob
print-accounting loan
exit
print-accounting loan
exit
print-accounting
whereami
@contractual_obligations
@contractual_obligations.size
accountant.incoming_payments
print-accounting
whereami
$its_pry_time = true
payments
obligations
whereami
@payments
@obligations
@contractual_obligations
$its_pry_time = true
print-accounting loan
print-accounting
default_amount
default_amount.to_f
print-accounting
print-accounting 
default_amount
default_amount.to_f
print-accounting loan
default_amount.to_f
print-accounting loan
exit
entry_line
entry
issue_activity
print-accounting
exit!
print-accounting
amount
entry :principal_current, :cash, amount
print-accounting 
print-accounting
accountant
print-accounting accounting
print-accounting accountant
exit!
print-accounting accountant
exit!
issue_activity
exit!
issue_activity
issue_activity.id
issue_activity.amount
issue_activity.activity_amount
exit!
auditor
exit!
auditors
auditors.first.some_event(:foo)
auditor = FinanceXL::CompositeAuditor.new *auditors
auditor.some_event(:foo)
exit
auditors.first
expect(auditors.first).to receive(:some_event).with(:foo)
exit!
print-accounting
accountant.activities
exit!
$its_pry_time
$its_pry_time = true
accountant
print-accounting loan
print-accounting
exit!
$its_pry_time = true
print-accounting
act = Simulator.new(self).instance_eval(&block) if block_given?
act
print-accounting Simulator.new(self).instance_eval(&block) if block_given?
print-accounting Simulator.new(self).instance_eval(&block) 
print-accounting loan
caller
whereami
exit
print-accounting accountant
exit!
$its_pry_time = true
name
@accountant
@accountant.activity(name, *args)
accountant
print-accounting accountant
exit!
activity
activities.push activity
activities
debit_account
lookup_memo(activity.cancels_activity.activity_type, credit_account, debit_account)
lookup_memo(activity.cancels_activity.activity_type, debit_account, credit_account)
lookup_memo(activity.activity_type, debit_account, credit_account)
entry.memo_id = Memo[memo].id
Memo.all
Memo.lookup_cache
Memo.lookup_by
Memo.lookup
whereami
memo
memo = lookup_memo(activity.activity_type, debit_account, credit_account)
entry.memo_id = Memo[memo].id
disable-pry
edit set_memos
memo
debit_account
credit_account
activity
memo = lookup_memo(activity.activity_type, debit_account, credit_account)
print-accounting loan
num_days
total_fee
exit!
activity
source.current_obligation(activity.effective_date).target_date ||= activity.effective_date
activity.effective_date
source.current_obligation(activity.effective_date)
Obligation.all
exit!
activity_type
exit!
activity_type
edit create_or_update_obligation
edit enable_fee_accrual
exit!
print-accounting loan
print-accounting loan -b
loan.due_date
exit!
print-accounting loan
loan.accountant.forward(loan.due_date)
exit!
print-accounting
print-accounting loan
end_date
date
loan.due_date
simulate { finish end_date }
print-accounting
exit!
amount
print-accounting 
date
calc = loan.default_calculator_as_of(date)
loan.obligations
exit!
disable-pry
print-accounting loan
loan.accountant.forward(loan.due_date)
print-accounting loan
loan.obligations
exit!
print-accounting loan
$its_pry_time = true
loan.obligations
exit!
$its_pry_time = true
loan.obligations
exit
loan.obligations
exit!
loan.due_date
loan.obligations
loan.obligations.first
loan.obligations.first.target_date
issue 100, 4, Date.today + 4
loan.obligations.first.target_date
loan.obligations.first.due_date
loan.accountant.forward(loan.due_date)
loan.obligations
loan.obligations(true)
exit!
loan.obligations
loan.obligations(true)
exit!
memo
activity
exit!
memo
activity
entry
memo = "call_due_interest_due"
entry
memo
memo = "call_due_fees_due"
entry
memos
memo
memo = "call_due_principal_due"
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
print-accounting loan -b
loan.obligations
loan.obligations.first.fee_amount
loan.obligations.first.fees_accrued
exit!
exit!
print-accounting simulator
print-accounting
loan.obligation
loan.obligations
accountant.loan.obligations
accountant.loan.obligations.first.fees_accrued
exit!
print-accounting 
print-accounting
loan.obligations
accountant.loan.obligations
accountant.loan.obligations.first.fees_accrued
exit!
print-accounting
ob.fees_accrued
print-accounting
ob.fees_accrued
print-accounting
ob.fees_accrued
print-accounting
ob.fees_accrued
accounts[:fee_income]
print-accounting -b
accounts
whereami
caller
whereami
print-accounting
accounts
calculate_account_values
exit!
edit set_fees_accrued
print-accounting
$its_pry_time = true
accounts
print-accounting
exit!
print-accounting simulator
accountant.loan.current_obligation(today)
accountant.loan.current_obligation(Date.parse('2014-06-25'))
accountant.loan.current_obligation(Date.parse('2014-06-25')).fees_accrued
simulator.accounts
exit!
print-accounting
print-accounting simulator
print-accounting
!@last_obligation || date < @last_obligation.due_date
obligations
obligations.first
obligations.first.amount
obligations.first.fees_accrued
print-accounting
date
@current_obligation.start_date
print-accounting
!@last_obligation || date < @last_obligation.due_date
(@current_obligation && date > @current_obligation.due_date) ||
false
exit!
current_ob
loan.current_obligation(loan.issue_date)
loan.current_obligation(loan.issue_date+1)
exit!
edit enable_fee_accrual
edit current_obligation
loan
loan.obligations
whereami
print-accounting
loan.obligations.first
loan.obligations.first.start_date
loan.obligations.first.end_date
loan.obligations.first.due_date
loan
whereami
activity.effective_date-1
edit loan.current_obligation
ob = loan.current_obligation(activity.effective_date-1)
@current_obligation
!@last_obligation || (date <= @last_obligation.due_date && date >= @last_obligation.start_date
)
@last_obligation
date
@all_obligations ||= obligations.contractual.order(due_date: :desc)
@last_obligation ||= @all_obligations.first
@last_obligation.due_date
wherami
whereami
date <= @last_obligation.due_date
date >= @last_obligation.start_date
exit!
@first_obligation
@first_obligation.start_date
exit
disable-pry
print-accounting loan
loan
exit!
type
amount
exit!
memo
activity
exit!
amount
type
print-accounting
caller
exit!
print-accounting loan
caller
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan.current_obligation(Date.parse('2010-10-20'))
loan.current_obligation(Date.parse('2010-10-20')).start_date
loan.current_obligation(Date.parse('2010-10-20') - 1).start_date
loan.current_obligation(Date.parse('2010-10-20') - 1).
amount
loan.current_obligation(Date.parse('2010-10-20') - 1)
ob = loan.current_obligation(Date.parse('2010-10-20') - 1)
start_date = ob.start_date
end_date = ob.end_date
end_date = Date.parse('2010-10-20')
edit
whereami
edit
interest_amount
edit
interest_accrued
interest_accrued.to_f
exit!
current_interest_accrued
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
whereami
loan.save!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
whereami
edit default_amount
edit default_amount(today)
edit default_amount()
edit default_amount
edit self.default_amount
edit default_amount
ls
edit loan.accountant
edit app/accountants/oec_accountants.rb
edit app/accountants/oec_accountant.rb
whereami
default_amount = default_amount(today)
edit loan.default_calculator_as_of
default_amount = default_amount(today)
edit default_amount
edit app/accountants/oec_accountant.rb
exit!
edit default_calculator_as_of
exit!
$its_pry_time
$its_pry_time = true
edit lib/default_calculator.rb
payments
obligations
whereami
past_due_obligations
exit!
edit
edit app/accountants/oec_accountant.rb
$its_pry_time = true
payments
obligations
applicable_payments
obligation
applicable_payments
obligations
whereami
obligation
applicable_payments
obligation
payments
obligation
applicable_payments
payments
obligations
exit!
$its_pry_time
$its_pry_time = true
obligation
applicable_payments
payments
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
amount
exit!
amount_due
amount_overpaid
exit@
exit!
amount_overpaid
amount_due = amount - amount_overpaid
print-accounting loan
print-accounting loan -b
print-accounting loan
whereami
amount_overpaid
amount_overpaid.to_f
edit lib/default_calculator
edit lib/default_calculator.rb
loan.default_calculator_as_of(today).overpaid_amount_on(today)
obligations
whereami
edit lib/default_calculator.rb
print-accounting loan
print-accounting loan -b
exit!
interest_accrued
print-accounting loan
print-accounting loan -b
exit
exit!
print-accounting loan
source = double("loan")
require 'cucumber/rspec/doubles'
@accountant.stub(:source) { 1 }
whereami
exit!
clear
.clear
print-accounting accountant
print-accounting simulator
@start_date
print-accounting loan
print-accounting accountant
print-accounting accountant -b
print-accounting simulator
@start_date
edit pull_start_date_back
pull_start_date_back(@start_date)
exit
print-accounting accountant
earliest_retro_effective_date(start_date)
earliest_correction_start_date(start_date, end_date).try(:-, 1)
earliest_retro_effective_date(start_date)
print-accounting accountant
accountant.activities.select { |act| act.cancelled? && act.cancelled_date >= date  || act.retroactive? && act.accounting_date >= date }
date = start_date
accountant.activities.select { |act| act.cancelled? && act.cancelled_date >= date  || act.retroactive? && act.accounting_date >= date }
earliest_correction_start_date(start_date, end_date).try(:-, 1)
start_date
end_date
accountant.corrections.completed_between(min, max).minimum(:start_date)
accountant.corrections
accountant.corrections(true)
accountant.corrections
edit accountant.corrections
FinanceXL::Correction.with_source_id(accountant.source_id)
FinanceXL::Correction.with_source_id(accountant.source_id).completed_between(min, max).minimum(:start_date)
whereami
min = start_date.to_time.beginning_of_day.utc
max = end_date.to_time.end_of_day.utc
FinanceXL::Correction.with_source_id(accountant.source_id).completed_between(min, max).minimum(:start_date)
exit!
scope
scope.count
expect(scope.count).to eq(1)
expect(scope.first).to eq(@correction_activity)
scope.first
@correction_activity
exit!
print-accounting loan
exit!
.clear
interest_rate
@interest_rate
exit!
interest_rate
@interest_rate
exit!
interest_rate
@interest_rate
whereami
@interest_rate
whereami
loan.interest_rate
print-accounting loan
interest_rate
exit!
rate
accountant.interest_rate
edit accountant.interest_rate
edit daily_interest
self.interest_rate
@interest_rate
exit!
self.interest_rate
interest_rate
correct
exit!
print-accounting
type
amount
exit!
caller
type
amount
type
exit!
activity
activity.activity_type
exit!
exit!
activity
whereami
caller
print-accounting 
whereami
activity
whereami
exit!
exit!
activit
activity
type
amount
caller
exit!
activity
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
exit!
exit!
print-accounting 
whereami
loan.current_obligation(today-1)
loan.current_obligation(today-1).start_date
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accountign
print-accounting
print-accounting -b
whereami
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
print-accounting 
print-accounting simulator
exit!
$its_pry_time = true
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
whereami
exit!
interest_reversal_activity
interest_reversal_activity.activity_amount
interest_reversal_activity.entries.map(:amount).sum
interest_reversal_activity.entries
interest_reversal_activity.entries.map(:amount)
exit!
print-accounting
print-accounting loan
whereami
interest_reversal_activity
interest_reversal_activity -b
print-accounting loan
whereami
caller
print-accounting
exit!
whereami
print-accounting
exit!
print-accounting loan
whereami
print-accounting loan
exit!
$its_pry_time = true
print-accounting loan
exit!
print-accounting
$its_pry_time = true
whereami
print-accounting loan
exit!
$its_pry_time = true
print-accounting
caller
whereami
caller
print-accounting 
print-accounting simulator
print-accounting
print-accounting -b
print-accounting 
print-accounting -b
whereami
exit!
print-accounting loan
print-accounting loan -b
whereami
@date
whereami
print-accounting
whereami
caller
print-accounting
print-accounting loan
print-accounting
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting 
exit!
print-accounting
caller
wherami
.clear
$its_pry_time = true
print-accounting
print-accounting simulator
exit!
whereami
print-accountign
print-accounting
whereami
print-accounting
adjusting?
@adjusting
adjusting
whereami
start_date
print-accounting
interest_reversal_activity
print-accounting 
print-accounting -b
whereami
exit!
$its_pry_time = true
print-accounting simulator
@start_date
exit!
$its_pry_time = true
start_date
print-accounting
whereami
earliest_correction_start_date(start_date, end_date).try(:-, 1)
@start_date
print-accounting
whereami
exit!
print-accounting
whereami
exit!
print-accounting loan
whereami
print-accounting loan
$its_pry_time = true
@start_date
pull_start_date_back(start_date, end_date)
print-accounting
whereami
start_date
caller
whereami
earliest_retro_effective_date(start_date)
earliest_correction_start_date(start_date, end_date).try(:-, 1)
edit earliest_retro_effective_date
.clear
whereami
print-accounting simulator
@start_date
whereami
print-accounting
whereami
print-accounting simulator
print-accounting
whereami
print-accounting loan
exit!
FinanceXL::Correction.new(activity_type: FinanceXL::ActivityType[:reverse_interest],start_date:    start_date,memo:          "reverse_statement_interest")
print-accounting loan
print-accounting
$its_pry_time
$its_pry_time = true
adjusting
print-accounting
@start_date
print-accounting
whereami
self.interest_rate
exit!
print-accounting
$its_pry_time = true
print-accounting 
whereami
simulator
@start_date
print-accounting
self.interest_rate
print-accounting
exit!
edit reverse_interest
print-accounting
exit!
print-accounting
whereami
start_date
$its_pry_time = true
edit pull_start_date_back
@start_date
print-accounting
exit!
$its_pry_time = true
@start_date
end_date
print-accountign
print-accounting
accountant.corrections
exit!
$its_pry_time = true
min
max
accountant.corrections
exit!
new_date = [ earliest_retro_effective_date(start_date),
  earliest_correction_start_date(start_date, end_date).try(:-, 1)
].compact.min
new_date == start_date
exit!
$its_pry_time = true
print-accounting 
whereami
@start_date
print-accounting simulator
exit!
$its_pry_time = true
accountant.corrections.completed_between(min, max).minimum(:start_date)
accountant.corrections
min
max
accountant.corrections
accountant.corrections.first
print-accounting
exit!
$its_pry_time = true
print-accounting loan
print-accounting
whereami
accountant.corrections.completed_between(min, max).minimum(:start_date)
accountant.corrections
min
max
min
max
accountant.corrections
FinanceXL::Correction.with_source_id(source_id)
FinanceXL::Correction.with_source_id(accountant.source_id)
accountant.corrections.where('accounting.activities' => { effective_date: min..max })
accountant.corrections
accountant.corrections.activities
accountant.corrections.methods
.clear
whereami
accountant.corrections.map(:activites)
accountant.corrections.map(&:activites)
accountant.corrections.map(&:activities)
print-accounting
.clear
exit!
$its_pry_time = true
accountant.corrections
accountant.correction_activities
accountant.corrections
accountant.corrections.where('accounting.activities' => { effective_date: min..max })
min
max
min1 = today
min1 = Date.today
max1 = Date.tomorrow
accountant.corrections.where('accounting.activities' => { effective_date: min1..max1 })
exit!
$its_pry_time = true
accountant.corrections.completed_between(min,max)
accountant.corrections.completed_between(min,max).minimum(:start_date)
print-accounting 
@start_date
print-accounting
print-accounting simulator
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting
$its_pry_time = true
ob
ob.billing_fee_assessed
print-accounting
$its_pry_time = false
print-accounting
print-accounting loan
exit
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
$its_pry_time
exit!
$its_pry_time = true
@start_date
print-accounting loan
print-accounting 
print-accounting simulator
ob.billing_fee_assessed
print-accounting
print-accounting loan
print-accounting simulator
print-accounting
print-accounting @accountant
exit!
daily_run_time
self.daily_run_time
daily_run_time
print-accounting @accountant
exit!
daily_run_time
print-accounting loan
print-accounting 
print-accounting @accountant
exit!
@date
print-accounting
exit!
print-accounting
@date
@end_date
end_date
print-accountign
print-accounting
whereami
exit!
print-accounting
caller
.clear
print-accountign
print-accounting
whereami
daily_run_time || daily_run_time == :morning
exit!
print-accounting
@date
end_date
print-accounting
exit!
@date
print-accounting loan
print-accounting
end_date
caller
exit!
caller
.clear
caller
exit
exit!
args
name
date
caller
.clear
caller
whereami
name
date
end_date
@date
exit!
end_date
exit!
edit method_missing
date
print-accounting
@date
print-accounting
print-accounting 
@date
end_date
print-accounting loan
print-accounting
print-accounting @accountant
print-accounting @accountant -b
exit!
edit fast_forward_to
print-accounting
print-accounting @accountant
print-accounting
print-accountign
print-accounting
disable-pry
ids
ids.flatten.empty?
ids
quite
quit!
exit!
t
t.name
t
t.name
t.name.include?("loan")
exit!
query
query.to_sql
ids = Sql.loans_to_simulate
ids = Sql.loans_to_forward
exit!
loans = Sql.loans_to_forward
loans.entries
loans.entries.map(&:values)
loans.entries.map(&:values).flatten
Loan.find "13396"
Loan.find 13396
loans.entries.map(&:values).flatten
loans.entries.map(&:values).flatten.in_groups_of(1_
  loans.entries.map(&:values).flatten.in_groups_of(1_)
loans.entries.map(&:values).flatten.in_groups_of(1)
loans.entries.map(&:values).flatten.in_groups_of(12)
loans.entries.map(&:values).flatten.in_groups_of(1222)
loans.entries.map(&:values).flatten.in_groups_of(1)
Loan.find 13396
loans = Sql.loans_to_forward
wrap
loans.entries.map(&:values).wrap(1)
loans.entries.map(&:values).flatten.in_groups_of(1)
loans.entries.map(&:values).flatten.in_groups_of(2)
exit!
group
exit!
group
loan_groups
exit!
exit!
exit!
exit!
print-accounting loan
whereami
.clear
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
exit
exit!
print-accounting loan
exit!
$its_pry_time
$its_pry_time = true
ob.billing_fee_assessed
print-accounting
today
exit!
$its_pry_time = true
print-accounting loan
print-accounting 
interest_amount
today
print-accounting
print-accounting loan
print-accounting 
print-accounting
exit!
$its_pry_time = true
print-accounting loan
print-accounting 
exit!
$its_pry_time = true
start_date
print-accounting simulator
exit!
$its_pry_time = true
start_date
print-accounting simulator
print-accounting
today
print-accounting 
edit interest_amount
print-accounting
print-accounting simulator
exit!
$its_pry_time = true
print-accounting simulator
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
print-accounting simulator
print-accounting 
exit!
$its_pry_time = true
print-accounting simulator
obligation
print-accounting
obligation.billing_fee_assesed
obligation.billing_fee_assessed
return BigDecimal(0) if obligation.billing_fee_assessed
date
print-accounting simulator
print-accounting
print-accounting loan
exit!
$its_pry_time = true
obligation.billing_fee_assessed
obligation_start_date = obligation.start_date
start_date = [obligation_start_date, activities.map(&:accounting_date).min].max
print-accounting loan
print-accounting
whereami
calculate_interest_due(start_date, date) - calculate_interest_accrued(start_date, date)
calculate_interest_due(start_date, date)
calculate_interest_accrued(start_date, date)
print-accounting
exit!
$its_pry_time = true
print-accounting simulator
start_date
daily_run_time
exit!
exit!
$its_pry_time = true
print-accounting simulator
start_date
print-accounting simulator
print-accounting
daily_time
self.daily_time
accountant
methods
@accoutnat
@accoutant
@accountant
@accountant.daily_time
klass
defined_class
exit!
start_date
exit!
start_date
activities_as_of
exit!
$its_pry_time = true
print-accounting simulator
simulator.start_date
exit!
print-accounting simulator
$its_pry_time = true
print-accounting simulator
print-accounting loan
exit!
$its_pry_time = true
print-accounting
print-accounting loan
print-accounting
print-accounting -b
exit!
print-accounting simulator
print-accounting 
exit!
$its_pry_time = true
print-accounting simulator
start_date
simulator.activities_as_of
exit!
$its_pry_time = true
print-accounting simulator
date
print-accounting 
print-accounting
whereami
print-accounting simulator
print-accounting
print-accounting -b
print-accounting 
whereami
print-accounting 
print-accounting
$its_pry_time = false
print-accounting
print-accounting -b
exit!
$its_pry_time = true
print-accounting simulator
edit reconcile_interest
print-accounting simulator
print-accounting loan
print-accounting loan -b
print-accounting simulator
print-accounting simulator -b
print-accounting simulator
end_date
exit!
$its_pry_time = true
print-accounting simulator
print-accounting 
whereami
reconcile_amount
print-accounting simulator
exit!
$its_pry_time = true
print-accounting simulator
print-accounting
exit!
print-accounting 
exit!
print-accounting
amount
caller
exit!
print-accounting loan
print-accounting 
print-accounting loan
print-accounting loan -b
print-accounting loan
disable-pry
edit reverse_interest
print-accounting loan
amount
balances[:current]
amount
print-accounting
loan.obligations
exit!
print-accounting
amount
loan
print-accounting loan
exit!
print-accounting 
amount
balances[:current]
whereami
obligation = loan.current_obligation(date)
return BigDecimal(0) if obligation.billing_fee_assessed
obligation_start_date = obligation.start_date
start_date = [obligation_start_date, activities.map(&:accounting_date).min].max
calculate_interest_due(start_date, date) - calculate_interest_accrued(start_date, date)
start_date = [obligation_start_date, activities.map(&:effective_date).min].max
amount
balances[:current]
print-accounting loan
exit@
exit!
acller
caller
whereami
klass
FinanceXL::Accountant.daily_procs
whereami
daily_run_time
exit!
self.daily_run_time
daily_run_time
klass
class
end
described_class
self.class
self.class.daily_run_time
self.class.me
exit!
daily_run_time
exit!
daily_run_time
exit!
klass
daily_run_time
exit!
klass
klass.daily_procs
base
FinanceXL::Accountant.daily_run_time
FinanceXL::Accountant.context_helpers
FinanceXL::Accountant.remembered_options
FinanceXL::Accountant.ledger_names
FinanceXL::Accountant.daily_procs
FinanceXL::Accountant.daily_run_time
exit!
daily_run_time
whereami
daily_run_time
exit!
daily_run_time
exit!
daily_run_time
klass.daily_run_time
base
base.daily_run_time
daily_run_time
exit!
klass
klass.daily_run_time
base
base.daily_run_time
exit!
daily_run_time
exit!
edit self.extended
exit!
edit reconcile_interest
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
exit!
print-accounting loan
exit!
amount
amount && amount <= balances[:currently_outstanding]
print-accounting
caller
print-accounting
whereami
amount
balances[:currently_outstanding]
balances
exit!
amount
print-accounting
amount
print-accounting
amount
print-accounting loan
exit!
amount
print-accounting
amount
print-accounting 
edit reconcile_interest
print-accounting
edit reverse_interest
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
edit_check_balance
edit check_balance
"0".to_i
"a".to_i
Integer("a")
Integer("0")
Float("0")
Integer()
Integer(nil)
raise SysCallError
string = "Calvin Franco"
string.include?("alvin")
string.include?("n")
string.include?("z")
raise SystemCallError
raise SystemCallError, "HI"
edit
date
start_date
ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
include Error
ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
exit
exit!
raise ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
include Errors
include Error
exit!
include Error
include Errors
include Error
load Error
load "lib/error.rb"
raise ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
raise Error::ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
exit!
raise ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
raise Error::ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
exit!
raise Error::ActivityOutOfOrder.new(task_args[:task_id], loan.cnuapp_loan_id, start_date)
exit!
edit
query
edit
query.inject({}) { |result, activity| result[activity.task_id] = activity }
query
activity.first.task_id
query.first.task_id
query.inject({}) { |result, activity| puts activity }
result
result[1]
query.inject({}) { |result, activity| binding.pry }
activity
result
result[activity.task_id]
result[activity.task_id] = activity
result[activity.task_id]
result
query.inject({}) { |result, activity| result[activity_id] = activity }
query.inject({}) { |result, activity| result[activity.activity_id] = activity }
query.inject({}) { |result, activity| result[activity.activity_id] = activity; binding.pry unless activity.activity_id }
query.inject({}) { |result, activity| result[activity.activity_id] = activity; binding.pry unless activity.activity_id; }
query.inject({}) { |result, activity| binding.pry unless activity.activity_id; }
query.inject({}) { |result, activity| begin result[activity_id] = activity rescue binding.pry end }
query.inject({}) { |result, activity| begin result[activity.activity_id] = activity rescue binding.pry end }
query.inject({}) { |result, activity| begin result[activity.activity_id] = activity rescue Exception binding.pry end }
edit
wtf
wtf!
e
exit
edit
exit!
[1,2,nil,nil]
nums = _
nums.compact
nums
exit!
print-accounting 
should_be_aging? && !aging?
cnuapp_forced_charge_off?(date)
loan.due_date
print-accounting
loan.defaults
loan.obligations
exit!
params
print-accounting
loan.obligations
exit!
obligations.any?
obligations.create! params
loan.obligations
obligations
obligations.first
obligations.first.fee_amount
obligations.first.amount
exit!
loan.obligation_amount({})
loan.obligation_amount
loan.obligation_amount {}
loan.obligation_amount({})
obligations
loan.obligations
loan.current_obligation(loan.due_date)
exit!
print-accounting
loan.obligations
loan.current_obligation(current_date)
loan.current_obligation(today)
loan.current_obligation(loan.issue_date)
loan.obligations
loan.obligations(true)
loan.current_obligation
loan.current_obligation(loan.issue_date)
loan.obligatoins
loan.obligations
loan.obligations(true)
Obligation.all
exit!
edit create_or_update_obligation
print-accounting
ob
ob.id
ob.amount = loan.obligation_amount({})
loan.obligations
exit!
loan.obligations
task_name
exit!
loan.obligations
ob
ob.id
loan.obligations
exit!
loan
exit!
loan
loan.obligations
loan.obligations.id
loan.obligations
loan.obligations.first.id
loan.obligations
loan.obligations.first.id
loan.obligations
exit!
loan
loan.obligations
Obligation.all
exit!
loan
loan.obligations
print-accounting loan
loan.defaults
print-accounting
print-accounting 
print-accounting loan
loan.defaults
print-accounting loan
loan.defaults
loan.create_or_update_obligation(default_date: earliest_default_date, start_date: date)
loan.defaults
exit!
$its_pry_time = true
print-accounting lona
print-accounting loan
loan.defaults
exit!
Payment["bogus"]
PaymentMethod["bogus"]
PaymentMethod[:bogus]
exit!
raise ArgumentError.new
raise ArgumentError.new("Calvin is awesome")
exit
types
names
names.map do |name|
  raise ArgumentError, "No such activity type: #{name}" unless type = ActivityType[name]
  type
end
types
types = names.map do |name|
  raise ArgumentError, "No such activity type: #{name}" unless type = ActivityType[name]
  type
end
types
types.any? { |type| activity_type_id == type.activity_type_id }
exit!
$its_pry_time
$its_pry_time = true
activity.type?(fee_modifying_activities)
whereai
whereami
activity.type?(fee_modifying_activities)
types = names.map do |name|
  raise ArgumentError, "No such activity type: #{name}" unless type = ActivityType[name]
  type
end
names
*names
names
names.flatten
exit!
print-accounting loan
print-accounting loan -b
exit!
loan = Loan.first
loan
print-accounting loan
loan = Loan.last
print-accounting loan
loan = Loan.find 100
loan = Loan.find 1000
loan = Loan.find 12392
print-accounting loan
loan
loan = Loan.find 12392
print-accounting loan
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: 593.75, payment_method: 'debit_card'}
loan.accountant.map_task(task_args)
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan.accountant.map_task(task_args)
loan.obligations
exit!
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
print-accounting loan
loan.accountant.map_task(task_args)
map_task(loan, task_args)
LoanTaskMapper::map_task(loan, task_args)
LoanTaskMapper.map_task(loan, task_args)
LoanTaskMapper
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
print-accounting loan
loan = Loan.find 12392
print-accounting loan
LoanTaskMapper.map_task(loan, task_args)
print-accounting loan
edit LoanTaskMapper.map_task
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
accountant.start_date
print-accounting loan
accountant.most_recent_effective_date
edit accountant.forward
end_date
exit!
include LoanTaskMapper
loan = Loan.find 12392
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
LoanTaskMapper.map_task(loan, task_args)
print-accounting loan
exit!
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
exit
include LoanTaskMapper
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
print-accounting loan
LoanTaskMapper.map_task(loan, task_args)
@date
end_date
exit
loan = Loan.find 12392
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
start_date
end_date
date
print-accounting loan
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
exit
loan = Loan.find 12392
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
LoanTaskMapper.map_task(loan, task_args)
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
simulate { finish end_date }
@date
print-accounting
whereami
@date
@date += 1
daily
print-accounting loan
print-accounting
exit!
exit!
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
print-accounting loan
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
edit daily
edit forward
edit app/accountants/payday_accountant.rb
date
print-accounting loan
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
date
exit!
include LoanTaskMapper
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
date
print-accounting
safe
tory
today
set_fees_accrued(today)
edit set_fees_accrued
edit set_fees_accrued(today)
edit /export/loaner/app/accountants/payday_accountant.rb
set_fees_accrued(today)
ob = source.current_obligation(date)
source.obligations
exit!
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
loan = Loan.find 12392
LoanTaskMapper.map_task(loan, task_args)
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
((@current_obligation && date > @current_obligation.due_date) || !@current_obligation)
(!@last_obligation || date < @last_obligation.due_date)
(!@last_obligation || date <= @last_obligation.due_date)
current_obligations = obligations.current(date)
@current_obligation = current_obligations.first
loan = Loan.find 12392
task_args = {task_name: :payoff, date: Date.parse('2011-12-06'), task_id: 358556, amount: D('593.75'), payment_method: 'debit_card'}
include LoanTaskMapper
LoanTaskMapper.map_task(loan, task_args)
print-accounting loan
exit
print-accounting loan
exit!
new_loan_activities
new_loan_activities.any?
exit!
print-accounting loan
print-accounting 
new_loan_activities
exit!
print-accounting
print-accounting loan
exit
exit!
edit check_balance
exit!
obligations.save!
obligations.save
exit!
@loans.each(&:save!)
@loans.each(&:save)
@loans
@loans.values.each(&:save!)
@loans["35673402"]
print-accounting _
loan = @loans["35673402"]
loan.accountant.set_fees_accrued(loan.issue_date)
loan.current_obligation
loan.current_obligation(loan.issue_date)
loan.current_obligation(loan.issue_date).fees_accrued
loan.save!
loan.obligations
loan.obligations.each(&:save!)
loan.current_obligation(loan.issue_date).fees_accrued
loan.current_obligation(loan.issue_date).save!
exit!
print-accounting loan
@loans.values.each(&:save!)
edit check_balance
loan = Loan.find 14025
print-accounting loan
loan = Loan.find 14067
print-accounting loan
loan = Loan.find 391332
exit
loan.past_due_obligations(today)
obligations = loan.past_due_obligations(today) && obligations.size > 1
((obligations = loan.past_due_obligations(today)) && obligations.size > 1)
exit!
print-accounting
whereami
obligations
balances[:receiveable] + balances[:current]
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan.defaults
print-accounting loan
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
loan.defaults
exit
edit check_balance
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan  -
print-accounting loan  -b
print-accounting loan 
exit
edit check_balance
loan_ids
query
loan_ids
cluster
exit!
input
db_name
db_hostname
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy (#{sql}) to stdout with csv header\"`
exit!
loan_ids
exit!
edit run_cnu_query
ids
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(id,cluster)
id = loan_ids.first
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(id,cluster)
cluster
Loan.all
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(35478942,"us")
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(35478942,Cluster["us"].id)
loan_characteristics(id, cluster.name)[:due_date]
cluster = Cluster["us"]
loan_characteristics(id, cluster.name)[:due_date]
include Client
loan_characteristics(id, cluster.name)[:due_date]
id = 35478942
loan_characteristics(id, cluster.name)[:due_date]
exit!
print-accounting loan -bexit!
exit!
exit
print-accounting loan
.clear
exit
print-accounting
whereami
end_of_cycle
end_of_cycle.entries
edit due_amounts_of_obligation
print-accounting
obligation_target_date
loan.obligations
caller
loan.obligations
obligation_target_date
print-accounting
loan
whereami
accounts
obligation_target_date
activities
loan.obligations
Loan.all
exit!
Loan.all
exit!
Loan.all
obligation_target_date
print-accounting
obligation_target_date
print-accounting
loan
simulating?
print-accounting
loan
obligation
print-accounting
simulating
simulating?
whereami
today
caller
whereami
today
current_activity
print-accounting loan
print-accounting loan -b
.clear
print-accounting loan 
exit!
print-accounting
simulating?
caller
exit!
print-accounting
simulating?
print-accounting loan
loan
$its_pry_time = true
whereami
loan.obligations
today
print-accounting
print-accounting simulator
print-accounting loan
print-accounting accountant.loan
print-accounting loan
print-accounting simulator
exit!
$its_pry_time = true
print-accounting simulator
remaining_amount
print-accounting
today
print-accounting
d = default_calculator_as_of(as_of, use_target_date: true)
d.past_unpaid_obligations
remaining_amounts
remaining_amount
print-accounting
print-accounting -b 
whereami
print-accounting
remaining_amount
amount
loan.past_unpaid_obligations(today)
d = default_calculator_as_of(as_of, use_target_date: true)
d.past_unpaid_obligations
today
as_of
whereami
edit default_calculator_as_of
d = default_calculator_as_of(as_of, use_target_date: true)
exit!
edit due_amounts_of_obligation
$its_pry_time = true
print-accounting
print-accounting accountant
wheremai
whereami
print-accounting
exit!
DEBUG_ALL
DEBUG_ALL = false
edit check_balance
disable-pry
$its_pry_time
$its_pry_time = true
edit reverse_interest
print-accounting
remaining
remaining_amount
print-accounting
$its_pry_time = false
edit reverse_interest
print-accounting
simulating?
whereami
obligation
print-accounting loan
whereami
due_amount = Hash.new(0)
return due_amount
due_amount = Hash.new(0)
return due_amount
return Hash.new(D('0'))
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
loan
return 0
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
exit!
print-accounting
whereami
past_due_obligations(today)
past_due_obligations(today).order_by { |o| o.due_date }
past_due_obligations(today).order { |o| o.due_date }
exit!
print-accounting
loan.obligations
whereami
obligation_target_date
exit!
obligation.due_date
loan.obligations
loan.current_obligations
loan.contractual_obligations
loan.contractual_obligations.select { |ob| ob.due_date == obligation.due_date }.target_date
loan.contractual_obligations.select { |ob| ob.due_date == obligation.due_date }
loan.contractual_obligations.first { |ob| ob.due_date == obligation.due_date }
loan.contractual_obligations.first { |ob| ob.due_date == obligation.due_date }.target_date
whereami
end_of_cycle
whereami
print-accounting
whereami
exit!
print-accounting
exit!
print-accounting
whereami
obligation.due_date
loan.boligations
loan.obligations
whereami
obligation_target_date
print-accounting
print-accounting loan
print-accounting
whereami
obligation
print-accounting
exit!
loan.obligatinos
loan.obligations
obligation_target_date
print-accounting
date
whereami
today
print-accounting loan
exit!
obligation_target_date = loan.contractual_obligations.first { |ob| ob.due_date == obligation.due_date }.target_date
loan.obligations
obligation
obligation_target_date = loan.contractual_obligations.select { |ob| ob.due_date == obligation.due_date }.first.target_date
exit!
print-accounting
simulating?
whereami
obligation_target_date = loan.contractual_obligations.select { |ob| ob.due_date == obligation.due_date }
obligation_target_date = loan.contractual_obligations.select { |ob| ob.due_date == obligation.due_date }.first.target_date
due_amounts = due_amounts_of_obligation(credit_accounts, obligation_target_date)
due_amounts.each do |account, amount_to_default|
  entry account_pairs[account], account, amount_to_default if amount_to_default > 0
  amount -= amount_to_default
end
amount == 0
print-accounting loan
print-accounting 
simulating?
print-accounting 
simulating?
print-accounting loan
exit!
$its_pry_time = true
print-accounting simulator
print-accounting
print-accounting simulator
whereami
print-accounting accountant
print-accounting 
print-accounting simulator
whereami
print-accounting simulator
print-accounting
print-accounting simulator
whereami
@adjustment_entries    = diff.adjustment_entries
print-accounting simulator
print-accounting
print-accounting accountant
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
@adjustment_entries
@adjustment_entries.size
whereami
edit simulate
print-accounting 
simulating?
print-accounting 
simulating?
print-accounting
whereami
print-accounting
loan
whereami
accountant.loan
exit
exit!
loan
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
simulating?
print-accounting simulator
print-accounting
whereami
print-accounting simulator
print-accounting
whereami
@adjustment_entries
@additional_activities
print-accounting
whereami
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
whereami
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
exit!
print-accounting
print-accounting simulator
print-accounting
exit!
loan
print-accounting loan
print-accounting
whereami
print-accounting simulator
adjusting-activity
adjusting_activity
@adjustment_entries
print-accounting simulator
print-accounting
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting
print-accounting simulator
start_date
simulator.activities_as_of
exit!
simulator
print-accounting simulator
simulator.date
simulator.start_date
whereami
edit fast_forward_to
edit simulator.fast_forward_to
simulator.simulate do
  finish finish_date
end
start_date
finish_date
finish_date = end_date
simulator.simulate do
  finish finish_date
end
@date
print-accounting
loan
gs
whereami
exit!
print-accounting loan
print-accounting 
exit!
$its_pry_time = true
print-accounting
print-accounting simulator
@adjustment_entries
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
exit!
print-accounting
loan
print-accounting
bnm
print-accounting
whereami
today
obligation
print-accounting loan
print-accounting loan -b
whereami
next
exit!
print-accounting loan
print-accounting loan -b
loan
loan.id
print-accounting loan
balance
whereami
balances
balances.reject { |balance| balances_to_ignore.include?(balance[:account]) }
balances.uniq { |b| b[:account] }
exit!
balances.reject { |balance| balances_to_ignore.include?(balance[:account]) }
exit
exit
exit!
balance
expected != actual
print-accounting loan
print-accounting loan -b
loan
whereami
print-accounting loan
expected == actual
@balance
@balances
whereami
balance
loan.accountant.balances
edit check_balance
print-accounting loan
balance
expected == actual
print-accounting loan
loan
print-accounting
print-accounting @checked_loans[1]
print-accounting @loans[1]
@loans
print-accounting @loans["36174159"]
print-accounting @loans["principal"]
print-accounting @loans["36170850"]
print-accounting @loans["36170850"] -b
print-accounting @loans["36170850"]
whereami
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
loan
print-accounting loan -b
print-accounting loan 
new_balance
ignored_balances
balances
exit!
balance
account
balances.reject! {|b| b[:cnuapp_loan_id] == balance[:cnuapp_loan_id] && b[:account] == account }
balance[:account].gsub!("provisional", "ar")
balances.reject! {|b| b[:cnuapp_loan_id] == balance[:cnuapp_loan_id] && b[:account] == account }
exit!
exit!
whereami
print-accounting
whereami
past_due_obligations
print-accounting
balance[:outstanding]
balances[:outstanding]
exit!
print-accounting
wherami
whereami
balances[:receiveable] + balances[:current]
print-accounting
whereami
edit amount_to_call_due
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
lolan
loan
exit!
print-accounting
whereami
$its_pry_time = true
exit
exit!
print-accounting
simulating?
print-accounting
$its_pry_time = true
print-accountig
print-accounting
exit!
simulating?
print-accounting loan
$its_pry_time = true
$its_pry_time
exit!
print-accounting loan
$its_pry_time = true
print-accounting
print-accounting simulator
print-accounting
wherewami
whereami
print-accounting
whereami
print-accounting
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
print-accounting simulator
@adjustment_entries
whereami
@original_activities = accountant.activities.all.dup.tap { |acts| acts.push adjusting_activity }
whereami
@simulated_activities = simulator.activities
introduce_types = accountant.adjustment_options[:introduces] || []
diff = Diff.new(accountant.books, @original_activities, @simulated_activities, introduce_types)
whereami
@additional_activities = diff.additional_activities
@adjustment_entries    = diff.adjustment_entries
@additional_activities.first.activities
@additional_activities.first.entries
print-accounting
print-accounting -b
print-accounting
exit!
exut!
exit!
print-accounting loan
exit!
print-accounting
$its_pry_time = true
print-accounting simulator
whereami
simulator.loan.obligations
simulator.loan.current_obligation(Date.parse('2014-03-24'))
simulator.loan.current_obligation(Date.parse('2014-03-24')).billing_fee_assessed
exit!
$its_pry_time = true
print-accounting simulator
$its_pry_time
exit!
print-accounting simulator
edit amount_of_unrecognized_interest
print-accounting simulator
exit!
print-accounting
print-accounting -b
print-accounting
exit!
print-accounting simulator
print-accounting
print-accounting -b
print-accounting
whereami
print-accounting
print-accounting -b
exit!
print-accounting 
whereami
edit amount_of_unrecognized_interest
print-accounting simulator
print-accounting simulator -b
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting simulator -b
print-accounting simulator
print-accounting simulator -b
whereami
print-accounting simulator
print-accounting simulator -b
print-accounting
whereami
print-accounting simulator
print-accounting
print-accounting -b
whereami
print-accounting simulator
print-accounting
accountant.loan.past_due_obligations(end_date)
accountant.past_due_obligations(end_date)
simulator.past_due_obligations(end_date)
accountant.obligations
accountant.loan.obligatnos
accountant.loan.obligations
print-accounting
exit!
ob
print-accounting
ob
whereami
ob
print-accounting
whereami
ob
loan.obligations
loan.obligations(true)
exit!
edit reverse_interest
accountant.loan.obligations
print-accounting loan
print-accounting
print-accounting -b
exit~
;
exit!
print-accounting
exit!
print-accounting
exit!
print-accounting
whereami
print-accounting
simulating?
print-accounting
edit amount_to_default
print-accounting
print-accounting -b
print-accounting
whereami
accountant.loan.obligations
accountant.past_due_obligations(Date.parse('2014-03-27'))
exit!
print-accounting
whereami
past_due_obligations
print-accounting loan
today
print-accounting
whereami
today
past_due_obligations
print-accounting loan
print-accounting
print-accounting -b
print-accounting
exit!
edit amount_to_default
amount
print-accounting
whereami
past_due_obligations(Date.parse('2014-03-26'))
loan.obligations
whereami
print-accounting
past_due_obligations(Date.parse('2014-03-27'))
exit!
print-accounting
amount
whereami
default_calculator
default_calculator.default_history && default_calculator.past_due_obligations
exit!
print-accounting
amount
print-accounting
print-accounting -b
print-accounting
print-accounting -b
exit!
activity
entry
activity.entries
print-accounting loan
whereami
exit!
entry
exit!
entry
exit!
entry
activity
exit!
memo
memo.gsub!("return_", "")
memo
print-accounting
loan.past_due_obligations(Date.parse('2014-03-27'))
past_due_obligations(Date.parse('2014-03-27'))
print-accounting -b
past_due_obligations(Date.parse('2014-03-27'))
exit!
print-accounting 
print-accounting
print-accounting -b
exit!
print-accounting laon
print-accounting loan
exit!
print-accounting loan
exit!
past_unpaid_obligations
default_calculator.past_due_obligations
print-accounting
default_calculator.obligations
today
exit!
past_unpaid_obligations
print-accounting
exit!
obligation
due_amounts = due_amounts_of_obligation(debit_accounts, obligation.target_date)
print-accounting 
print-accounting -b
75.0 + 89.13
.clar
.clear
exit
edit
loan = Loan.find 906593
loan = Loan.find 174819
exit
print-accounting
exit!
print-accounting
ob = source.current_obligation(activity.effective_date)
ob.amount
ob.fees_accrued
ob.fees_accrued.to_f
ob.fees_assesed
ob.fees_assessed
ob.fees_adjusted
ob.fees_adjustment
ob.fee_adjustment
loan.fee_amount
source.fee_amount
ob.amount = source.obligation_amount({}) if ob
print-accounting
source
print-accounting
source
ob = source.current_obligation(activity.effective_date)
ob.amount = source.obligation_amount({}) if ob
print-accounting
activity
source
activity
source
exit!
print-accounting loan
print-accounting loan -b
exit!Q
exit!
print-accounting
print-accounting -b
loan
source
print-accounting
print-accounting -b
default_amount
source
print-accounting
print-accounting -b
source
print-accounting -b
default_amount
loan.obligations
source.obligations
source.default_calculator_as_of(today)
exit!
source
print-accounting
default_amount
source
print-accounting
print-accounting -b
print-accounting
default_amount
print-accounting
default_amount
print-accounting loan
print-accounting
default_amount
print-accounting -b
soure
source
source_id
print-accounting
.clear
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan
print-accounting
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
loan
print-accounting lona
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan.fee_amount
loan
print-accounting loan
loan
print-accounting 
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.fee_amount
print-accounting loan -b
print-accounting loan
loan
print-accounting lona
print-accounting loan
loan.fee_amount
loan.fee_amount.to_f
loan
print-accounting loa
print-accounting loan
print-accounting loan -b
print-accounting lona
edit check_balance
laon
loan
expected
actual
balance
print-accounting loan
print-accounting
print-accounting loan
whereami
exit!
$its_pry_time = true
print-accounting
print-accounting loan
print-accounting
exit!
$its_pry_time = true
print-accounting loan
@date
source.simulated_to
exit!
print-accounting loan
$its_pry_time
$its_pry_time = true
print-accounting
most_recent_effective_date
print-accounting
exit!
print-accounting
source.simulated_to
caller
print-accounting
whereami
source.simulated_to
most_recent_effective_date
caller
.clear
$its_pry_time = false
disable-pry
print-accounting loan
exit!
disable-pry
print-accounting
laon
loan
source
print-accounting
most_recent_effective_date
print-accounting
source
exit!
source
most_recent_effective_date
print-accounting
most_recent_effective_date
exit!
exit!
print-accounting loan
exit!
print-accounting 
print-accounting
amount
date
amount
accrued
accrued.to_f
unrecognized_fee
amount_to_recognize
whereami
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
amount_to_recognize = unrecognized_fee
print-accounting
loan
source
whereami
amount
accrued
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
print-accounting
amount_to_recognize
unrecognized_fee
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
fee_assessed?(today) && (unrecognized_fee > 0)
print-accounting
exit!
print-accounting
loan.fees_to_recognize(loan.due_date)
source.fees_to_recognize(loan.due_date)
accountant.source.fees_to_recognize(loan.due_date)
accountant.source.fees_to_recognize(accountant.source.due_date)
accountant.source.fees_to_recognize(accountant.source.due_date).to_f
accountant.source.fee_amount
accountant.source.fee_amount.to_f
print-accounting simulator
whereami
@adjustment_entries
exit!
print-accounting
adjusting?
print-accounting source
print-accounting
print-accounting source
print-accounting
whereami
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
source.issued?(today)
amount_to_recognize
print-accounting
exit!
print-accounting simulator
exit!
print-accounting
$its_pry_time
$its_pry_time = true
fee_amount
fee
fee.to_f
print-accounting
edit fee_amount
exit!
print-accounting
$its_pry_time
$its_pry_time = true
activities
current_activity
activities
ls
current_activity
activity
source.accountant.activities
adjusting?
edit simulate
disable-pry
whereami
exit!
$its_pry_time = true
print-accounting
current_activity
exit!
print-accounting simulator
source
print-accounting
amount
disable-pry
print-accounting loan
exit!
print-accounting
amount
print-accounting -b
whereami
amount_to_recognize
fees_accrued
fees_accrued(today)
fees_accrued(today).to_f
print-accounting loan
print-accounting
wheremi
whereami
accrued
print-accounting
caller
source.current_obligation(source.issue_date)
source.current_obligation(source.issue_date).fees_accrued
print-accounting 
set_fees_accrued(today)
exit!
print-accounting 
accrued
print-accounting loan
disable-pry
print-accounting
print-accounting loan
print-accounting loan -b
balance
actual
loan.due_date
loan.fee_amount
exit!
balance
actual
print-accounting loan
loan.fee_amount
loan.fee_amount - 17.26
loan.fee_amount - 17.26 - 2.16
loan.fee_amount - 17.26 - 2.16 + 150
(loan.fee_amount - 17.26 - 2.16 + 150).to_f
print-accounting loan -b
(loan.fee_amount.to_f)
(loan.fee_amount - 17.26)
(loan.fee_amount - 17.26 -2.16) 
(loan.fee_amount - 17.26 -2.16).to_f
exit!
print-accounting loan
2.47-2.16
loan.current_obligation(loan.due_date).fees_accrued
loan.current_obligation(loan.due_date).fees_accrued.to_f
print-accounting -b
print-accounting loan -b
loan.fees_to_recognize(loan.due_date)
loan.fees_to_recognize(loan.due_date).to_f
147.92 + .31
147.92 + 0.31
147.92 + 2.08 - 0.31
loan
exit!
print-accounting
print-accounting -b
$its_pry_time
source.current_obligation(source.due_date)
source.current_obligation(source.due_date).fees_accrued
source.current_obligation(source.due_date).fees_accrued.to_f
print-accounting -b
whereami
exit!
$its_pry_time = true
print-accounting
source.current_obligation(source.due_date)
source.current_obligation(source.due_date).fees_accrued
exit!
$its_pry_time = true
$its_pry_time
update_obligation_amounts(activity_to_cancel, -D(activity_to_cancel.activity_amount))
update_obligation_amounts
activity_to_cancel
exit!
print-accounting loan
print-accounting source
source.current_obligation(source.due_date)
source.current_obligation(source.due_date).fees_accrued
source.obligations.first.fees_accrued
loan
print-accounting loan
loan.obligations
loan.default_calculator_as_of(loan.due_date)
loan
print-accounting loan
loan.fee_amount
loan.fee_amount.to_f
loan.fee_amount - 15.27 - 17
loan.fee_amount - 15.27 - 17 - 5.69
print-accounting loan -b
exit!
print-accounting 
print-accounting -b
exit!
print-accounting
print-accounting -b
$its_pry_time
$its_pry_time= true
caller
print-accounting
whereami
D(accounts[:fee_income] - adjustment).abs
print-accounting
print-accounting -b
print-accounting source
print-accounting source -b
print-accounting simulator
loan.fee_amount
source.fee_amount
accountant.source.fee_amount
accountant.source.fees_to_recognize(end_date)
accountant.source.current_obligation(end_date)
accountant.source.current_obligation(end_date).fees_accrued
accountant.source.current_obligation(end_date).fees_accrued.to_f
print-accounting simulator
print-accounting simulator -b
accountant.source.current_obligation(end_date).fee_adjustment
accountant.source.current_obligation(end_date).fee_adjustment.to_f
simulator.set_fee_adjustment(end_date)
exit!
$its_pry_time = true
adjustment
print-accounting
adjustment
print-accounting simulator
exit!
print-accounting
print-accounting loan
balance
disable-pry
print-accounting
exit!
print-accounting loan
print-accounting
default_amount
default_amount.to_f
default_amount
print-accounting
default_amount.to_f
loan.obligations
source.obligations
source.obligations.amount
exit
exit!
disable-pry
tasks
tasks.first
tasks.first.first
whereami
tasks.flatten
tasks
tasks.flatten.first
tasks.flatten.first["cluster"]
exit!
exit!
exit!
task
task.symbolize_keys!
tasks
we
whereami
exit!
whereami
task
edit process
disable-pry
exit!
Sidekiq::Queue.new.pause
Sidekiq::Queue.new("us_loans").pause
cluster
tasks
.clear
whereami
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
tasks
tasks.size
[tasks]
[tasks.flatten]
whereami
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => [tasks.flatten])
exit!
tasks
whereami
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
tasks
tasks.size
exit!
tasks
tasks.size
tasks
whereami
cluster = tasks.first["cluster"]
cluster = tasks.flattenfirst["cluster"]
cluster = tasks.flatten.first["cluster"]
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => [tasks])
edit
args.size
whereami
tasks
tasks.size
tasks.flatten
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks.flatten)
Sidekiq::Queue.new("us_loans").unpause
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks.flatten)
e
exit
tasks
tasks.size
'args' => tasks.flatten.size
tasks.flatten.size
tasks.flatten
tasks.flatten!
tasks
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => [tasks])
exit!
tasks
taks
tasks
exit!
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
Sidekiq::Client.push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
exit!
LoanTaskProcessingWorker.client_push(LoanTaskProcessingWorker 'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.client_push(LoanTaskProcessingWorker.classify 'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.client_push(LoanTaskProcessingWorker.class 'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.class
LoanTaskProcessingWorker
LoanTaskProcessingWorker.client_push(
  'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.client_push('class' => LoanTaskProcessingWorker 'queue' => "#{cluster}_loans",
LoanTaskProcessingWorker.client_push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.client_push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans",
'args' => tasks)
LoanTaskProcessingWorker.client_push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans", 'args' => tasks.flatten)
tasks
tasks.size
LoanTaskProcessingWorker.client_push('class' => LoanTaskProcessingWorker, 'queue' => "#{cluster}_loans", 'args' => tasks)
tasks.is_a? Array
Sidekiq::Client.enqueue_to("#{cluster}_loans", LoanTaskProcessingWorker, tasks.flatten)
exit!
Sidekiq::Queue.new("us_loans").unpause
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
balance
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
loan
print-accounting loan
print-accounting loan -n
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
print-accounting loan 
print-accounting loan -b
print-accounting loan 
loan
print-accounting loan 
print-accounting loan -b
print-accounting loan 
loan
print-accounting loan
print-accounting loan -b
failed = [33395031, 33986877, 35818025, 35903687, 33553812, 35714641, 31580041, 24737482, 36021097, 20524727, 20846004, 33654105, 35652422, 33711648, 24848663, 32641937, 33715900, 36449594, 33447414, 33674920, 33000083, 33711482]
all = [20524727,20846004,24737482,24848663,31580041,32641937,32891567,33000083,32923916,33046355,33107413,33395031,33447414,33398272,33463359,33454493,33525771,33553812,33654105,33674920,33711482,33715900,33711648,33751798,33796796,33905290,33918131,33986877,33993680,34185938,34214914,34634447,34734034,34750255,34812438,34873913,34996799,35042043,35178543,35311993,35342508,35391464,35430273,35528929,35523033,35552627,35652422,35714641,35670995,35818025,35858932,35870464,35903687,36021097,36431462,36449594]
all -failed
fixed = all -failed
fixed.size
fixed.sort.to_json
test_suite = [35549733,35673402,35781646,35803539,35809394,35850841,35923573,35957863,35966238,36015585,36036696,36059198,36063484,36080355,36087287,36089830,36090120,36091049,36104448,36107396,36108158,36118486,36136201,36139856,36142601,36143235,36146289,36148158,36149423,36149903,36162148,36162185,36167498,36171685,36172699,36174012,36174555,36177368,36177371,36177374,36177383,36177384,36177385,36177391,36177395,36177403,36177404,36181829,36181834,36181835,36181836,36181843,36181844,36181847,36181849,36181850,36181851,36183127,36183136,36183137,36183142,36183144,36183146,36183150,36183152,36183162,36183167,36186251,36195160,36196457,36197407,36199226,36207004,36207115,36207167,36213665,36225050,36226119,36226411,36227447,36227667,36228450,36234441,36236449,36240385,36241016,36242154,36246176,36246213,36248881,36249519,36249520,36249521,36249523,36249524,36249528,36249529,36249530,36249534,36249543,36250820,36251685,36252788,36253068,36254656,36254797,36259451,36263378,36265310,36266337,36266338,36266343,36266354,36266363,36266364,36266366,36266368,36266371,36266373,36270271,36275116,36278078,36278784,36281849,36291141,36298164,36299109,36305140,36306558,36309544,36318586,36319928,36322956,36326065,36326928,36327228,36336344,36336592,36337733,36345221,36348411,36348413,36348430,36348437,36348439,36348467,36348479,36348553,36348572,36348592,36348663,36348668,36353623,36353839,36354542,36367374,36368903,36385918,36389764,36400539,36405795,36409792,36418599,36425064,36425672,36426253,36433717,36451910,36460671,36469445,36475983,36477983,36484846,36487077,36488748,36492018,36497400,36502029,36514758,36514765,36514942,36514954,36514962,36514976,36514985,36526700,36531128,36547466,36547638,36562043,36562047,36562050,36562051,36562052,36562053,36562056,36562058,36562062,36562066,36573810,36575464,36578776,36602581,36604657,36612256,36618443,36646466,36646585,36673285,36690308,36751216,36751330,36751790,36752177,36752973,36754813,36758909,36759519,36759534,36759567,36010220,36697629,36792547,36830409,36807937,37082034,32923916,33905290,33918131,34634447,34812438,32891567,32923916,33046355,33107413,33398272,33454493,33463359,33525771,33751798,33796796,33905290,33918131,33993680,34185938,34214914,34634447,34734034,34750255,34812438,34873913,34996799,35042043,35178543,35311993,35342508,35391464,35430273,35523033,35528929,35552627,35670995,35858932,35870464,36431462]
test_suite.sort.to_json
failed
failed.to_json
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting lona
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
loan
print-accounting loan -b
print-accounting loan 
loan
print-accounting loan 
print-accounting loan
print-accounting loan -b
laon
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting loan 
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
laon
loan
print-accounting loan
print-accounting loan -b
loan
print-accounting loan 
loan
print-accounting loan 
loan
print-accounting loan
loan
exit!
print-accountign
print-accounting
print-accounting source
loan.current_obligation(loan.issue_date).target_date
source.current_obligation(source.issue_date).target_date
exit!
print-accounting
loan.current_obligation(loan.issue_date).target_date
source.current_obligation(source.issue_date).target_date
print-accounting source
loan
source
exit!
print-accounting
whereami
source.current_obligation(source.issue_date)
edit update_obligation_amounts
update_obligation_amounts(activity_to_cancel, -D(activity_to_cancel.activity_amount))
disable_fee_accrual(activity)
source.current_obligation(source.issue_date)
activity
activity.cancelled?
exit!
print-accounting
edit recognize_fees_early
edit update_obligation_amounts
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
.clear
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting lona
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
exit!
args
exit!
cluster_args
cluster_args[:cluster] = cluster
cluster_args
cluster_args[:cluster]
cluster_args[:cluster] = cluster
cluster_args
cluster_args.is_a? Hash
cluster_args.type
cluster_args.methods
.clear
cluster_args.to_a
exit!
cluster_args
Rake::Task["reporting_for_cluster"].invoke(*(cluster_args.to_a))
args
exit!
args
exit!
exit!
print-accounting loan
print-accounting loan-b
print-accounting loan -b
print-accounting loan
print-accounting 
source
print-accounting 
source
print-accounting 
whereami
edit recognize_fees_early
print-accounting 
loan
source
current_activity
recognize_full_fees(today)
source.issued?(today) && (amount_to_recognize >= unrecognized_fee
)
unrecognized_fee = recognize_full_fees(today)
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
fee_assessed?(today) && (unrecognized_fee > 0)
fees_left = unrecognized_fee - amount_to_recognize
amount_to_recognize += daily_fee(today, fees_left)
print-accounting 
print-accounting -b
print-accounting 
print-accounting loan
loan.id
loan.obligation.fee_amount
loan.obligation.fees_accrued
loan.current_obligation(loan.due_date).fees_accrued
loan.current_obligation(loan.due_date).fees_accrued.to_f
loan.current_obligation(loan.due_date).fee_amount
exit!
source
print-accounting
loan.accountant.forward(Date.today)
print-accounting loan
loan.accountant.forward(Date.today)
print-accounting loan
loan.accountant.forward(Date.today)
print-accounting loan
print-accounting loan -b
loan.accountant.daily(Date.parse('2012-12-05')
)
loan.accountant.most_recent_effective_date
exit!
print-accounting loan 
print-accounting loan -b
exit!
exit!
ls
invalidate_default_calculator
self.invalidate_default_calculator
exit!
ls
simulating_accountant(start_date: end_date)
exit!
print-accounting loan
whereami
expected
actual
balance
DEBUG_ALL
edit reverse_interest
print-accounting loan
balance
actual
balance
actual
print-accounting loan
print-accounting 
amount
whereami
past_unpaid_obligations
print-accounting -b
print-accounting 
print-accounting -b
print-accounting
print-accounting loan
print-accounting -b
print-accounting loan -b
print-accounting loan
amount
whereami
past_unpaid_obligations
exit!
print-accounting loan
obligation
past_unpaid_obligations
loan.obligations
print-accounting loan
whereami
default_calculator
loan.obligations
.clear
Upsert.new Loan.connection, Loan.table_name
Upsert.batch(Loan.connection, Loan.table_name)
Upsert.batch(Loan.connection, Loan.table_name) {}
exit!
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
exit!
print-accounting loan -b
loan.issue_date
disable-pry
exit!
print-accounting loan 
print-accounting loan -b
text = File.open('ca_customer_groups_1').read
text.gsub!(/\r\n?/, "\n")
text.each_line do |line| line.split(
  ',')[0]
end
CSV.foreach("ca_customer_groups_1) do |row| loan_id = row[:id] ned
end
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[:id] end
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[:id] }
require CSV
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[:id] }
require 'csv'
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[:id] }
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[1] }
loan_id
loan_id = 0
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[1] }
loan_id
CSV.foreach("ca_customer_groups_1") { |row| loan_id = row[0] }
loan_id
loan = Loan.find 1
loan = Loan.find 2
loan = Loan.first
loan.customer_group
CustomerGroup["existing"]
CustomerGroup["existing"].id
ids_and_customer_groups
ids_and_customer_groups.size
ids_and_customer_groups
exit!
ids_and_customer_groups
ids_and_customer_groups.size
subset
subset.size
whereami
CustomerGroupUpdater.perform_async(subset,cluster)
edit CustomerGroupUpdater.perform
edit CustomerGroupUpdater
CustomerGroupUpdater.perform_async(subset,cluster)
cluster
CustomerGroupUpdater.perform_async(subset,cluster)
hash
disable-pry
hash
next unless loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(hash["loan_id"],cluster.id)
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(hash["loan_id"],cluster.id)
loan
cluster
hash["loan_id"]
cluster.id
hash["customer_group"]
loan = Loan.first
loan.customer_group == hash["customer_group"]
loan.update_column(customer_group_id: CustomerGroup[hash["customer_group"]].id)
loan.update_column(customer_group_id, CustomerGroup[hash["customer_group"]].id)
loan.update_column(:customer_group_id, CustomerGroup[hash["customer_group"]].id)
loan.update_column(:customer_group_id, CustomerGroup[hash["customer_group"]].id-1)
loan
exit!
ids_and_due_dates
exit!
load 'lib/flt_conversions.rb'
cluster = Cluster[cluster]
hash = ids_and_due_dates.first
loan = Loan.first
loan.update_column(due_date: Date.parse(hash["due_date"]))
loan.update_column(due_date, Date.parse(hash["due_date"]))
loan.update_column(:due_date, Date.parse(hash["due_date"]))
obligation = loan.current_obligation(loan.issue_date)
new_target_date = obligation.target_date ? Date.parse(hash["due_date"]) : nil
obligation.due_date =  Date.parse(hash["due_date"])
obligation.target_date = new_target_date
obligation.save(validate: false)
exit!
exit!
activities = Sql.out_of_order_activies.records
require 'sql'
activities = Sql.out_of_order_activies.records
exit!
activities = Sql.out_of_order_activies.records
activities = Sql.out_of_order_activities.records
activities = Sql.out_of_order_activities
activities = Sql.out_of_order_activities.rows
activities = Sql.out_of_order_activities.rows.any?
exit!
loan_ids
loan
loan_tasks = tasks.select { |task| task[:cnuapp_loan_id] == cnuapp_loan_id }
proceed = loan_tasks.any? { |task| new_loan_tasks.include?(task[:task_name]) }
proceed ||= loan_tasks.all? { |task| acceptable_first_tasks.include?(task[:task_name]) }
exit!
earliest_default_date
loan.defaults
source.defaults
print-accounting
source.defaults.where(default_date: earliest_default_date,start_date: date,end_date: nil)
source.defaults
source.defaults.open
source.defaults
source.defaults(true)
print-accounting
print-accounting -b
whereami
source.defaults.open
print-accounting
exit!
print-accounting
print-accounting -b
loan.defaults
source.defaults
source.defaults(true)
print-accounting loan
print-accounting 
whereami
source.defaults
source.defaults(true
)
print-accounting
print-accounting loan
print-accounting loan -b
exit!
print-accounting
exit!
type
calle
caller
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
loan.due_date
FinanceXL::Activity.find(13)
FinanceXL::Activity.find(13).task_id
exit!
print-accounting loan
loan.obligations
loan.obligations(true)
loan.obligations(true).first.fee_adjustment
loan.obligations(true).first.total_fees
exit!
source.obligation_amount({})
print-accounting
source.obligation_amount({})
print-accounting loan
print-accounting
source.obligation_amount({})
ob.amount = source.obligation_amount({}) if ob
adjusted || toggle_fees
print-accounting loan
print-accounting 
source.obligation_amount({})
print-accounting loan -b
print-accounting -b
ob.fee_adjustment
ob.fee_amount
source.obligation_amount({})
print-accounting 
source.obligation_amount({})
print-accounting loan
print-accounting 
source.obligation_amount({})
print-accounting 
source.obligation_amount({})
print-accounting loan
exit!
disable-pry
print-accounting loan
loan.fee_amount
loan.fee_amount.to_f 
balance
actual
loan.accountant.balances
loan.accountant.accounts
loan
loan.due_date
print-accounting lona
print-accounting loan
print-accounting loan -b
balance
acutal
actual
print-accounting lona
print-accounting loan
loan.fee_amount
loan.fee_amount - 14.73
(loan.fee_amount - 14.73).to_f
print-accounting loan -b
disable-pry
print-accounting loan
loan.fee_amount
actual
expected
balance
print-accounting loan -b
exit!
print-accounting lona
print-accounting
print-accounting source
amoutn
amount
source.current_obligation(date).total_fees
source.current_obligation(date).total_fees.to_f
amount_to_recognize = [amount_to_recognize, source.current_obligation(date).total_fees].min
print-accounting 
exit!
print-accounting
print-accounting -b
exit!
whereami
exit!
print-accounting
$its_pry_time
$its_pry_time = true
print-accounting simulator
loan.issue_date
accountant.source.issue_date
exit!
print-accounting
disable-pry
print-accounting loan
loan.obligation
loan.obligations
loan.obligations(true)
exit!
print-accounting
source.obligation_amount({})
print-accounting 
source.obligation_amount({})
edit source.obligation_amount
balances[:upfront_obligations]
exit!
disable-pry
print-accounting
source.obligation_amount({})
print-accounting
source.obligation_amount({})
exit!
disable-rpy
disable-pry
disable-rpy
disable-pry
print-accounting loan
print-accounting loan -b
balance
actual
print-accounting loan 
print-accounting loan -b
exit!
print-accounting loan
print-accounting 
amount
issued
exit~!
exit!
disable-pry
print-accounting loan
loan
Date.today.1.month.ago
Date.today.month.ago
Date.today
Date.today.month
Date.today.1.months.ago
Date.today.beginning_of_last_month
Date.today.beginning_of_month
Date.today.beginning_of_month -1
Date.today.beginning_of_month - 1
include ReportDebugger
ReportDebugger.ensure_all_reports_tie
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
ar_last_month
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
totals[account]
amount
account
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
account
hash
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
last_month_totals
load 'lib/report_debugger.rb'
last_month_totals
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
last_month_totals
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
last_month_totals
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
last_month_totals
current_totals
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_import
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_import
current_reports_dir.join("import_by_loan_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}.csv")
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_values
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
amount
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_totals
import_values
current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_values = current_import.values
import_values = current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_import
whereami
import_values
wherami
whereami
current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
loan_id
values
exit
exit!
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
ReportDebugger.methods
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
values
@options
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
ma @names.select { |pos, value| value == k
@names.select { |pos, value| value == k
@names.select { |pos, value| value == k }
@names
k
matchers
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
k
@names.select { |pos, value| value == k }
@names.select { |pos, value| value == k }.key
@names.select { |pos, value| value == k }.keys
@names.select { |pos, value| value == k }.keys.first
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
matchers
@matchers
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@matchers.each do |k,v|
  @report[loan_id][name[k]] = values[v]
end
@matchers
name[1]
@names[1]
load 'lib/report_debugger.rb'
@report[loan_id][name[k]] = values[v]
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@matchers.each do |k,v|
  @report[loan_id][@names[k]] = values[v]
end
@report
loan_id
@report[loan_id]
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@report
@names[1]
@values[1]
values[1]
values
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@report
disable-pry
exit
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
account
amount
values
whereami
hash
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_totals
current_import
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_totals
current_import
-18.26 +1.73 +0.03
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
values[v]
values
loan_id
edit match_values
values[v]
@report[loan_id]
@report[loan_id][values[k]] += values[v].to_f
@report[loan_id]
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@report[loan_id]
@matchers
values
@report[loan_id]
values
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
@report[loan_id]
values[v]
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
values[v]
edit match_valued
edit match_values
import_totals
last_month_totals
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
loan_ids
Loan.all
LawsonTaskMappings.all
Lawson::TaskMappings
Lawson::TaskMapping
Lawson::TaskMapping.all
Lawson::TaskMapping.each(:destroy)
Lawson::TaskMapping.all.each(:destroy)
Lawson::TaskMapping.all.each(&:destroy)
exit!
loan_ids
Loan.all
Loan.all.size
Lawson::TaskMapping.all
exit!
missing_loans
whereami
Rake::Task["lawson:update_mappings_of_loans"].invoke(cluster.id,missing_loans)
loan_ids
whereami
args[:loan_ids]
args[:loan_ids].to_s
args[:loan_ids].join(" ")
exit!
loan_ids
whereami
update_task_mappings(loan_ids, Cluster[args[:cluster]])
whereami
Time.now
gs
exit!
DEBUG_ALL
exit!
PG::UniqueViolation
PG::UniqueViolation.parents
PG::UniqueViolation.methods
PG::UniqueViolation.supercalss
PG::UniqueViolation.superclass
PG::UniqueViolation.superclass.superclass
PG::UniqueViolation.superclass.superclass.superclass
PG::UniqueViolation.superclass.superclass.superclass.superclass
DEBUG_ALL
exit!
print-accounting loan
print-accounting loan -b
exit
print-accounting 
amount_to_recognize
print-accounting loan
amount_to_recognize
current_activity
print-accounting
amount_to_recognize
current_activit
current_activity
current_obligation && current_obligation.target_date && amount_to_recognize
current_obligation && current_obligation.target_date
amount_to_recognize
amount_to_recognize = amount - accrued
unrecognized_fee = unrecognized_fees(today)
(issued?(today) && (amount_to_recognize >= unrecognized_fee))
issued?(today)
print-accounting loan
unrecognized_fees(today)
print-accounting loan
whereami
exit!
print-accounting loan
exit!
print-accounting
$its_pry_time
$its_pry_time = true
print-accounting 
exit!
$its_pry_time = true
print-accounting 
print-accounting simulator
loan.issue_date
accountant.loan.issue_date
exit!
amount_to_recognize
print-accounting lona
print-accounting loan
print-accounting 
$its_pry_time
$its_pry_time = true
current_obligation && current_obligation.target_date && amount_to_recognize > 0
current_obligation
print-accounting loan
exit!
print-accounting loan
sql
exit!
DEBUG_ALL
print-accounting loan
disable-pry
print-accounting loan
balance
actual
loan
exit!
print-accounting 
whereami
past_due_obligations
loan.obligations
today
loan
DEBUG_ALL
disable-pry
print-accounting loan
loan
loan.obligations
exit!
today
print-accounting 
whereami
edit amount_to_default
edit
edit daily
edit /export/loaner/app/accountants/accountant.rb
edit /export/loaner/app/accountants/oec_accountant.rb
print-accounting
whereami
exit!
print-accounting
today
DEBUG_ALL
print-accounting loan
loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
.clear
edit
loans_not_in_report1
loans_not_in_report2
diff
diff.size
whereami
report1
whereami
edit
diff
diff.size
whereami
loans_not_in_report1
loans_not_in_report2
diff
edit
diff
loan_id
name
value
report2[loan_id][name].round(2)
report
report2
edit
exit!
edit
name
value
report2[loan_id][index][name].round(2)
report2[loan_id]
loan_id
report2
exit!
edit
report2
exit
disable-pry
wherami
edit
exit
.clear
edit
@report
@report[loan_id]
index = @report[loan_id].size
multiple_occurences?
@report[loan_id][index] ||= {}\
@report[loan_id][index] ||= {}
@report
exit!
.clear
edit
report1
report1.size
whereami
name
value
loan
loan_id
index
loan_id
edit diff_values
load 'lib/report_debugger.rb'
exit!
edit
diff.size
loans_not_in_report1
loans_not_in_report2
edit
wherami
edit
current_import
edit
current_import
whereami
edit
multiple_occurences?
@options
exit
whereami
edit
@options
@options[:multiple_occurences] = false
@options[:multiple_occurences] = nil
edit
print-accounting lona
print-accounting loan
loan.issue_date
print-accounting loan
print-accounting loan -
print-accounting loan -b
loan.current_obligation(loan.issue_date)
whereami
print-accounting loan 
print-accounting loan -b
wherami
whereami
amount_to_recognize
print-accounting loan
print-accounting 
print-accounting source
amount_to_recognize
fees_accrued(date)
amount
amount_to_recognize = amount - accrued
unrecognized_fee = recognize_full_fees(today)
(source.issued?(today) && (amount_to_recognize >= unrecognized_fee))
loan.obligation.first
source.obligation.first
source.obligations.first
source.obligations.first.total_fees
print-accounting source
whereami
amount
print-accounting 
print-accounting -b
amount_to_recognize
fees_accrued(date)
unrecognized_fees(today)
(issued?(today) && (amount_to_recognize >= unrecognized_fee))
issued?(today)
def issued?(today)
end
issued?(today)
exit!
print-accounting
issued?(today)
source.issued?(today)
source.issue_date
date
exit!
date
issued?(date)
source.issue_date
date
source.issue_date
issued?(date)
exit@
exit!
date
print-accounting
current_activity
issued?(date)
source.issue_date
print-accounting loan
print-accounting source
exit!
loan.issue_date
date
whereami
loan.issue_date =  date + 1
loan.issue_date
exit!
loan.issue_date
exit!
loan.issue_date
loan
exit!
edit loan.rb
exit!
loan.issue_date
exit!
loan
exit!
$its_pry_time = true
source
date
source
source.issue_date
source
exit!
$its_pry_time = true
source
loan
exit!
$its_pry_time = true
source
sourec
source
exit!
source
update_obligation_amounts(activity, D(amount))
source
exit!
date
issued?(date)
source
exit!
source
whereami
caller
whereami
source
exit!
source
exit!
caller
exit!
source
source.persisted?
source.lock!
exit!
disable-pry
amount
date
issued?
issued?(date)
print-accounting 
print-accounting
print-accounting source
print-accounting source -b
print-accounting source
print-accounting 
print-accounting source -b
loan.obligation.first.total_fees
source.obligation.first.total_fees
source.obligations.first.total_fees
print-accounting loan
loan.accountant.forward(loan.due_date)
print-accounting loan
exit!
print-accounting loan
loan
exit!
loan
print-accounting loan
loan.simulated_to = 2014-08-21
loan.simulated_to = Date.parse('2014-08-21')
loan.save!
loan.accountant.forward(loan.due_date)
print-accounting
print-accounting -b
loan.due_date
source.due_date
whereami
end_date
32.96 + 14.99
loan.obligations.first.fees_accrued
source.obligations.first.fees_accrued
source.obligations.first.fee_amount
source.obligations.first.fee_amount.to_f
loan.fee_amount
source.fee_amount
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie(ca,7,2014)
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_stats_totals
current_stats
generate_file_name(cluster,month,year,"stats")
@matchers
current_stats
load "lib/loan_debugger.rb"
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
pair
matcher_position = @names.select { |pos, value| value == "lawson_account" }.keys.first
@names
names
current_stats
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
whereami
edit match_values
current_stats
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
loan_id
disable-pry
exit!
.clear
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
$its_pry_time = false
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
file_name
line
$its_pry_time = false
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
text
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_stats_totals
current_stats_totals["99951000000"]
current_stats_totals["9995100000"]
current_stats_totals["9995100000"] + current_stats_totals["9995100000"] + current_stats_totals["9995110000"] + current_stats_totals["9998430000"] == current_stats_totals["9999620000"]
current_stats_totals["9995100000"] + current_stats_totals["9995110000"] + current_stats_totals["9998430000"] == current_stats_totals["9999620000"]
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
accounts_sum
total
stats["#{total}0000"]
(:loan_count_total).humanize
(:loan_count_total).to_s.humanize
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
current_ar.size
current_stats_totals
4497 - 4451
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
diff
stats["9999610000"]
ar_count
current_ar.size
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
clear
.clear
whereami
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
whereami
edit match_values
parse_report(generate_file_name(cluster,month,year,"import_by_loan"),[{"account" => "amount"}, {"memo" => "memo"}])
values[v]
[loan_id][values[k]]
@report[loan_id]
[values[k]]
@report[loan_id][values[k]]
values[v]
@report
values[k]
disable-pry
whereami
edit match_values
parse_report(generate_file_name(cluster,month,year,"import_by_loan"),[{"account" => "amount"}, {"memo" => "memo"}])
edit match_values
parse_report(generate_file_name(cluster,month,year,"import_by_loan"),[{"account" => "amount"}, {"memo" => "memo"}])
edit match_values
load "lib/report_debugger.rb"
parse_report(generate_file_name(cluster,month,year,"import_by_loan"),[{"account" => "amount"}, {"memo" => "memo"}])
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load "lib/report_debugger.rb"
whereami
.clear
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
parse_report(generate_file_name(cluster,month,year,"import_by_loan"),[{"account" => "amount"}, {"memo" => "memo"}])
values[v]
values[v].to_f
@report[loan_id][values[k]] ||= 0
@report[loan_id]
@matchers
@report
whereami
exit!
.clear
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_stats
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_stats
import_stats.values
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
entries
import
whereami
account
memos
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
entries
import
import.first
whereami
entry = import.first
entry["account"] == account && memos.include?(entry["memo"])
entry["account"] == account
entry["account"]
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
entries
sum
whereami
matchers
sum
stats["9998610000']
stats["9998610000"]
stats["99986100000"]
stats
stats["999861"]
stats["9998610000"]
stats["9999670000"]
stats["9999650000"]
stats["9998840000"]
stats["9998840000"] + stats["9998860000"]
stats["9998840000"] - stats["9998860000"]
stats["9998860000"]
loan
print-accounting
print-accounting loan
loan
print-accounting loan -b
print-accounting loan -h
print-accounting loan -A interest
print-accounting loan 
print-accounting loan -A interest
print-accounting loan -A interest -b
loan.defaults
exit!
print-accounting loan
print-accounting loan -A
print-accounting loan -A activities
print-accounting loan -A inte
loan.defaults
exit
print-accounting loan
loan.obligations
loan.defaults
exit
exit!
print-accounting loan
whereami
current_balances[:outstanding] - current_balances[:charged_off]
obligation
loan.defaults
print-accounting loan -A interest
whereami
d = default_calculator_as_of(today_
  d = default_calculator_as_of(today)
d = default_calculator_as_of(today)
d.default_history
d.past_due_obligations
d.past_unpaid_obligations
exit!
print-accounting loan
whereami
expected
actual
expected
actual
print-accounting
loan.obligations
loan.current_obligation
loan.current_obligation(today)
loan.current_obligation(loan.issue_date)
exit!
print-accounting loan
DEBUG_ALL
expected
actual
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
print-accounting loan -b -A inter
print-accounting loan -b
exit!
print-accounting loan
expected
actual
whereami
balance[:account]
print-accounting loan -A
print-accounting loan -A inter
exit!
loan.contractual_obligations
ob
obligation
past_due_obligations(today)
past_due_obligations(today + 1)
exit!
print-accounting loan
print-accounting loan -A interest
.clear
print-accounting loan -A interest
loan
print-accounting loan -A interest -b
print-accounting loan -b
exit!
loan
print-accounting loan 
print-accounting loan -A inte
exit
print-accounting
print-accounting -A interest
adjusting?
adjusting
print-accounting loan -A interest
print-accounting
adjusting?
adjusting
print-accounting -A interest
whereami
past_due_obligations
print-accounting -A interest
adjusting
whereami?
whereami
current_balances[:receiveable] + current_balances[:current]
exit!
loan
print-accounting loan
print-accounting loan -A
print-accounting loan -A interest
exit!
print-accounting loan -A interest
print-accounting -A interest
whereami
current_balances[:receiveable] + current_balances[:current]
adjusting
print-accounting -A interest
adjusting
print-accounting -A interest
print-accounting -A interest -b
print-accounting -b
print-accounting -A ^interest -b
print-accounting -A ^interest 
whereami
past_due_obligations
called_due?
print-accounting loan -A ^interest
print-accounting loan -A ^interest -b
print-accounting loan
print-accounting loan -A ^interest -b
exit!
print-accounting loan -A ^interest 
adjusting
print-accounting -A ^interest 
print-accounting
adjusting
print-accounting -A ^interest 
print-accounting loan -A ^interest 
print-accounting -A ^interest 
print-accounting loan -A ^interest 
adjusting
print-accounting
print-accounting -A ^interest 
whereami
current_balances[:receiveable] + current_balances[:current]
past_due_obligations
adjusting
print-accounting -A ^interest 
print-accounting -A ^interest -b
exit!
print-accounting loan
print-accounting
print-accounting 
caller
.clear
print-accounting 
print-accounting -b
exit!
print-accounting
print-accounting -b
whereami
print-accounting simulator
simulator.past_unpaid_obligations(Date.parse('2014-03-26'))
simulator.past_unpaid_obligations(Date.parse('2014-03-27'))
simulator.past_unpaid_obligations(Date.parse('2014-04-09'))
d = simulator.default_calculator_as_of(Date.parse('2014-03-26'))
whereami
print-accounting simulator
print-accounting 
print-accounting simulator
exit!
print-accountin
print-accounting
print-accounting -b
default_calculator_as_of(today)
past_unpaid_obligations(today, [{date: today, amount: amount}]).size <= 1
default_calculator_as_of(today)
amount
past_unpaid_obligations(today, [{date: today, amount: amount}]).size <= 1
print-accounting
past_unpaid_obligations(today, [{date: today, amount: amount}]).size <= 1
past_unpaid_obligations(today, [{date: today, amount: amount}])
caller
whereami
past_unpaid_obligations(today, [{date: today, amount: amount}])
today
default_calculator_as_of(today)
past_unpaid_obligations(today, [{date: today, amount: amount}])
edit past_unpaid_obligations
past_unpaid_obligations(today, [{date: today, amount: amount}])
edit past_unpaid_obligations
load '/export/loaner/app/accountants/helpers/accountant_helpers.rb'
past_unpaid_obligations(today, [{date: today, amount: amount}])
load '/export/loaner/app/accountants/helpers/accountant_helpers.rb'
edit past_unpaid_obligations
d = default_calculator_as_of(today, use_target_date: true, extra_payments: [{date: today, amount: amount}])
d = default_calculator_as_of(today, use_target_date: true, extra_payments: [{date: today, amount: amount}]).past_unpaid_obligations
print-accounting loan
print-accounting loan -A interest
exit!
print-accounting 
whereami
past_unpaid_obligations(today - 1, [{date: today, amount: amount}]).size <= 1
print-accounting simulator
past_unpaid_obligations(today - 1, [{date: today, amount: amount}]).size <= 1
print-accounting
adjusting
print-accounting loan
print-accounting loan -b
edit cures_call_due?
adjusting
print-accounting
print-accounting -A interest
adjusting
print-accounting loan
past_unpaid_obligations(Date.parse('2014-05-21'))
edit amount_to_call_due
print-accounting
print-accounting loan
balance
actual
loan.accountant.accounts
loan.accountant.accounts[:billin_fee_income] + loan.accountant.accounts[:unrecognized_billin_fee_income]
loan.accountant.accounts[:billing_fee_income] + loan.accountant.accounts[:unrecognized_billing_fee_income]
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
balance
print-accounting loan -b
-444.32 + -156.5
125.81 + 333.86
(125.81 + 333.86) - (156.5 + 303.17)
print-accounting loan 
exit!
print-accounting loan
print-accounting loan -b
balance
actual
18.33 + 441.34 - 333.86
balance
actual
print-accounting loan
FinanceXL::Activity.find(61).task_id
print-accounting loan -b
balance
actual
whereami
balance[:account] == "charge_off_total"
balance
exit!
print-accounting loan
print-accounting loan -A ^(interest|unrecognized_interest)
print-accounting loan
print-accounting loan -A ^(interest|unrecognized_interest)
exit!
options
caller
exit!
options
adjust(activity, correction.start_date - 1, end_date.to_date, {}, options)
options
exit!
print-accounting loan
print-accounting loan -A ^(interest|unrecognized_interest)
exit!
loan
exit!
task
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan -A ^(interest|unrecognized_interest)
print-accounting loan -A ^(interest|unrecognized_interest) -b
print-accounting 
print-accounting simulatro
print-accounting simulator
exit!
print-accounting simulator
whereami
@additional_activities
@adjustment_entries
exit!
@adjustment_entries
print-accounting simulator
print-accounting simulator -b
end_data
end_date
print-accounting accountant
whereami
@additional_activities
adjustment_entries
print-accounting accountant
print-accounting accountant -b
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie
ReportDebugger.ensure_all_reports_tie(ca,7,2014)
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_report
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_report
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_report
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
edit parse_values
load 'lib/report_debugger.rb'
disable-pry
exit
.clear
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_report
yield_report.values
yield_report.values.first
yield_report.values.first.first
yield_report.values.first
yield_report.values
yield_report.values.first
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
index
hash
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_totals
yield_report
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
month_end
wherami
whereami
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_totals
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
account
yield_report[account]
import
whereami
import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }
exit
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
entries
whereami
sum
yield_report[account]
statements
whereami
sql
statements
statements.each { |s| puts s }
exit!
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
entries = import.select { |entry| memos.include?(entry["memo"]) }
whereami
entries = import.select { |entry| memos.include?(entry["memo"]) }.map { |entry| entry["amount"]  }
whereami
sum = entries.inject(0) { |sum, amount| sum += amount }
sumentries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }
whereami
sumentries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }.map { |entry| entry["amount"]  }
entries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }.map { |entry| entry["amount"]  }
sum = entries.inject(0) { |sum, amount| sum += amount }
whereami
yield_report[account]
entries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }.map { |entry| entry["amount"]  }
entries.size
whereami
import.size
import
import_stats
whereami
@options = { columns_to_ignore: ["date","state_cd","origin","actual_payment_method",
  "acct", "sub_acct", "cost_center", "acct_unit"],
multiple_occurences: true }
import_stats = parse_report(generate_file_name(cluster,month,year,"import_by_loan"))
import_stats.values
import_stats.values.map { |hash| hash.values }
import_stats.values.map { |hash| hash.values }.flatten
import_stats.values.map! { |hash| hash.values }.flatten!
import_stats
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
yield_report[account]
edit
whereami
sum = entries.inject(0) do |sum, amount| sum += amount end
yield_report[account] == sum
yield_report[account]
yield_report[account] - sum
sum
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
yield_account[account]
yield_report[account]
import_sum
yield_report[account] - 2819828.95
yield_report[account] - 2806909.22
2819828.95 - 2806909.22
2813822.32 - yield_report[account]
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
entries
import.select { |entry| entry["account"] == "disbursement_account" }
yield_report
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
yield_report["total_amount_paid"] == import_sum
yield_report[account] - import_sum
yield_report["total_amount_paid"] - import_sum
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
exit!
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
sum
test
import
whereami
stats["999884"]
stats["9998840000"]
sum
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
.clear
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
test_accounts
account == test_accounts[test]
account = test_accounts[test]
account = test_accounts["none"]
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
test_accounts
cluster
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
account
accounts_sum
entries
import
.clear
whereami
import.select { |entry| entry["account"] == account && memos.include?(entry["memo"]) }
import.select { |entry| entry["account"] == account  }
account
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
.clear
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
month
generate_file_name(cluster,month,year,"yield")
yield_report = parse_report(generate_file_name(cluster,month,year,"yield"))
clear
.clear
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
Date.today.1.month.ago
Date.today.18.month.ago
Date.today.18.months.ago
18.months.ago
"1".months.ago
"1".to_id.months.ago
"1".to_i.months.ago
12.times { |a| puts a }
0.months.ago
1.months.ago
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
.clear
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
stats[test_account]
accounts_sum
entries
import
exit
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
stats[test_account]
accounts_sum
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
etst
test
test_account
stats[test_account]
stats
memos
entries.inject(0) { |sum, amount| sum += amount }
accounts_sum
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
test
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
test
stats[test_account]
stats[test_account] - accounts_sum
accounts_sum
stats[test_account] - 3532457.41
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_totals
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_totals
test_month
test_year
yield_report
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_totals
exit!
print-accounting 
print-accounting loan
print-accounting loan -b
whereami
expected = DecNum(balance[:amount] || 0)
passed = actual == expected
print-accounting loan -A ^(interest|unrecognized_in)
exit
exit!
print-accounting
start_date
print-accounting loan
print-accounting 
print-accounting accountant
options
print-accounting 
whereami
@additional_activities
@additional_activities.first.entries
@adjustment_entries
exit!
print-accounting 
whereami
@adjustment_entries
print-accounting simulatro
print-accounting simulator
start_date
whereami
adjustment_entries
@additional_activities.first.entries
EntrySummation(adjustment_entries + @additional_activities.first.entries)
EntrySummation(adjustment_entries.values + @additional_activities.first.entries)
EntrySummation.new(adjustment_entries + @additional_activities.first.entries)
EntrySummation.new(adjustment_entries.values + @additional_activities.first.entries)
accountant.accounts
simulator.accounts
exit!
@additional_activities
@additional_activities.first.entries
@adjustment_entries
EntrySummation.new(adjustment_entries.values + @additional_activities.first.entries)
exit!
print-accounting simulator
@adjustment_entries.size
exit!
print-accounting loan -A ^(interest|unrecognized_in)
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting -b
print-accounting loan -b
exit!
print-accounting 
print-accounting simulator
adjustment_entries
additional_activities
print-accounting 
whereami
print-accounting simulator
start_date
adjustment_entries
additional_activities
adjustment_entries
additional_activities
print-accounting 
adjustment_entries
additional_activities
adjustment_entries
additional_activities
print-accounting 
print-accounting -b
print-accounting 
print-accounting -b -A ^(interest|unrecognized_in)
exit!
print-accounting
print-accounting 
exit!
print-accounting loan
print-accounting 
print-accounting
print-accounting @accountant
exit!
print-accounting @accountant
n
type
n
print-accounting @accountant
type
n
expect(activity.entries.size).to eq Integer(n)
activity = activity_effective @accountant.activities, type, eff_date
expect(activity.entries.size).to eq Integer(n)
print-accounting @accountant
whereami
expect_entries activity, table
type
n
print-accounting @accountant
type
n
type
n
print-accounting @accountant
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit!
edit simulate
exit!
print-accounting loan
print-accounting loan -A (interest|unrecognized_inter)
print-accounting loan -A ^(interest|unrecognized_inter)
activities
simulator
new_activities(@accountant, simulator)
activities.size != new_activities(@accountant, simulator).size
exit!
simulate { finish end_date }
print-accounting
end_date
date
simulated_to
loan.simulated_to
exit!
print-accounting
exit!
date
most_recent_effective_date
exit!
FinanceXL::ActivityType
vim /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/railties-3.2.2/lib/rails.rb
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/railties-3.2.2/lib/rails.rb
exit!
Rails
Rails::VERSION
Rails::VERSION::MAJOR
Rails.configuration
edit 
.clear
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/railties-3.2.2/lib/rails.rb:46:in `configuration'
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/railties-3.2.2/lib/rails.rb
exit!
Rails
Rails.configuration.allow_concurrency
FinanceXL::ActivityType
exit!
edit /export/finance_xl/spec/support/seed.rb
daily_time :evening
whereami
ls
exit!
ls
FinanceXL::DSL
load 'lib/finance_xl/dsl.rb'
ls
exit!
ks
ls
exit!
task_id
print-accounting 
loan
exit!
corrected_tasks
corrected_tasks.sort_by { |t| t[:date] }
corrected_tasks.sort_by! { |t| t[:date] }
corrected_tasks
activities.select { |act| act.task_id == activity_to_cancel.cancels_activity_id }
activities
activity_to_cancel
activity_to_cancel.cancels_activity_id
exit!
intended_activity
exit!
intended_activity
print-accounting 
DEBUG_ALL
DEBUG_FAILURES
print-accounting loan
loan.obligations
loan.obligations.first.fee_accrual_enabled
print-accounting loan
loan.issue_date
loan.due_date
actual
expected
balance
print-accounting loan
FinanceXL::Activity.find(268)
FinanceXL::Activity.find(268).task_id
print-accounting loan
exit!
print-accounting loan
loan
exit!
print-accounting loan
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
balance
actual
exit!
balance
exit!
balance
actual
print-accounting loan
print-accounting loan -b
exit!
[2544209,2596677,2600777,2527525,2525890,2516265,2517763,2517476,2519823,2520712,2521628,2521674,2521873,2521885,2522204,2522270,2522615,2523358,2523398,2523550,2523701,2523765,    2524355,2524820,2524870,2525319,2525327,2525420,2525890,2526105,2526359].sort
a = _
a.to_json
exit!
statement
.clear
exit!
print-accounting loan
balance
print-accounting loan
print-accounting loan -b
loan
exit!
amount_to_recognize
print-accounting
amount
print-accounting -b
exit!
amount
accrued
accrued.to_f
accounts[:fees_ar]
total_fees
accrued.to_f
amount
unrecognized_fee
recognize_full_fees(today)
amount
exit!
print-accounting
print-accounting loan
exit!
print-accounting
amount_left_to_recognize
amount
accrued
accrued.to_f
unrecognized_fee
exit!
amount_to_recognize = accrued + unrecognized_fee
exit!
print-accounting loan
balance
actual
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
loan.fee_amount
balance
loan.due_date
format
exit!
format
args[:format]
format
disable-pry
format
if (format) puts true
if (format); puts true;
end
@output_file
exit!
format
exit!
unless "false"; puts "pass" ; end
Boolean("false")
exit!
format
@output_file
disable-pry
entry
entry.memo_id
Memo.find(_)
Memo.find(_).memo
include ReportDebugger
exit
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("jv",8,24,27)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",8,24,27)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",8,24,27)
year
exit
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
exit
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
extension
reports_dir.join("#{report}_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}_as_of_#{year}-#{month}-#{day}.#{extension}")
day
caller
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
day
reports_dir.join("#{report}_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}_as_of_#{year}-#{month}-#{day}.#{extension}")
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
reports_dir.join("#{report}_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}_as_of_#{year}-#{month.rjust(2,'0')}-#{day}.#{extension}")
whereami
load 'lib/report_debugger.rb'
reports_dir.join("#{report}_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}_as_of_#{year}-#{month.rjust(2,'0')}-#{day}.#{extension}")
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
reports_dir.join("#{report}_#{Date::MONTHNAMES[month].downcase}_#{year}_#{cluster.name}_as_of_#{year}-#{month.to_s.rjust(2,'0')}-#{day}.#{extension}")
edit generate_file_name
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("jv",8,2014,27)
ReportDebugger.ensure_all_reports_tie("jv",8,2014)
ReportDebugger.ensure_all_reports_tie("jv",7,2014)
@output_file_name
@output_file
day
@output_file
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
yield_report["initial_defaults_nsf_late"]
exit
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
yield_report["initial_defaults_nsf_late"]
memos = ["default_fees", "default_principal", "nsf_fee", "late_fee"]
entries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
whereami
memos = ["default_fees", "default_nsf_fee", "default_late_fee", "default_principal", "nsf_fee", "late_fee"]
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["default_fees", "default_principal"]
entries = import.select { |entry| memos.include?(entry["memo"]) && entry["amount"] > 0 }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
exit!
.clear
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
entries = import.select { |entry| (entry["memo"].include?("adjustment") && uncollected_accounts.include?(entry["account"])) }
entries = import.select { |entry| (entry["memo"].include?("adjustment_entry") && uncollected_accounts.include?(entry["account"])) }
entries = import.select { |entry| (entry["memo"].include?("adjustment_entry") }
entries = import.select { |entry| (entry["memo"].include?("adjustment_entry")) }
entries = import.select { |entry| puts entry["memo"] }
entries = import.select { |entry| (entry["memo"].include?("new")) }
whereami
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"])) }
whereami
yield_report["initial_defaults_nsf_late"] - import_sum).round(2)
(yield_report["initial_defaults_nsf_late"] - import_sum).round(2)
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
(yield_report["initial_defaults_nsf_late"] - import_sum).round(2)
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
(yield_report["initial_defaults_nsf_late"] - import_sum).round(2)
(yield_report["initial_defaults_nsf_late"] - import_sum).round(2) / (yield_report["initial_defaults_nsf_late"])
(yield_report["initial_defaults_nsf_late"] - import_sum).round(2) / (yield_report["initial_defaults_nsf_late"]) * 100
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
import_sum
yield_report["initial_defaults_nsf_late"]
memos = ["default_principal"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }
whereami
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["default_fees"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["default_nsf_fees"]
memos = ["default_nsf_fee"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["default_late_fee"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["nsf_fee"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
memos = ["late_fee"]
entries = import.select { |entry| (memos.include?(entry["memo"]) && entry["amount"] > 0) }.map { |entry| entry["amount"]  }
uncollected_accounts = ["uncollected_principal", "uncollected_fees", "uncollected_nsf_fees", "uncollected_late_fees"]
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"])) }
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"])) }.map { |entry| entry["amount"]  }
uncollected_accounts = ["uncollected_principal"]
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"])) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
uncollected_accounts = ["uncollected_principal", "uncollected_fees", "uncollected_nsf_fees", "uncollected_late_fees"]
uncollected_accounts = ["uncollected_principal"]
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"]) && entry["amount"] < 0) }.map { |entry| entry["amount"]  }
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
load 'lib/report_debugger.rb'
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
uncollected_accounts = ["uncollected_principal"]
entries = import.select { |entry| (entry["memo"].include?("adjust_") && uncollected_accounts.include?(entry["account"]) && entry["amount"] < 0) }.map { |entry| entry["amount"]  }
import_sum = entries.inject(0) { |sum, amount| sum += amount }.round(2)
exit!
include ReportDebugger
ReportDebugger.ensure_all_reports_tie("ca",7,2014)
whereami
disable-pry
exit!
args[:month]
args[:year]
exit!
args[:month]
args[:month] ||= 1
args[:month]
exit!
cluster
month
year
day
format
exit!
expect(loan.accountant).to send("be_#{expected_status}", date)
expected_status
loan.accountant.issued? date
loan.accountant.send("#{expected_status}?",date)
expect(loan.accountant.send("#{expected_status}?",date)).to be true
source_id
activities
activities.find { |act| act.source_id == nil }
source_id
activities.each { |act| act.source_id = source_id }
activities.each(&:save!)
exit!
activities.select { |act| act.source_id == nil }
exit!
source
source_id
loan.id
source
source_id || source_id = source.id
source_id
exit!
source.id
source_id
raise Error::NoSourceSet unless (source_id || source_id = source.id)
exit!
source_id
source
source_id
source.id
(source_id = source.id)
exit!
source
source_id
activities
print-accounting
activities.map(&:source_id)
exit!
accountant
accountant.save!
accountant
edit accountant.save!
accountant.save!
source_id
caller
exit!
accountant
source_id
@source_id
exit!
edit play
disable-pry
source_id
source
exit!
source_id
exit!
source_id
@source_id
source
@source
exit!
source_id
@source_id
exit!
accountant
accountant.source_id
accountant.simulate(&block)
accountant.save!
exit!
accountant
$its_pry_time
$its_pry_time = true
source_id
@source_id
source_id == @source_id
caller
ls
simulating?
source
self
source_id
source
source_id
ls
source_id
exit!
exit!
ls
source_id
self.source_id
edit source_id
exit!
ls
source_id
exit!
ls
exit!
ls
exit!
lLoaner::Config.memos[activity.activity_type]
Loaner::Config.memos[activity.activity_type]
Loaner::Config.memos[activity.activity_type].kind_of?(Hash)
"interest_due".kind_of?(Hash)
exit!
%{ [CLUSTER = #{@cluster.name}] Loan task with ID: #{task[:task_id]}
                         of loan with ID: #{task[:cnuapp_loan_id]} couldn't be processed properly!" }
cluster = Cluster["ca"]
task = { task_id: 1, cnuapp_loan_id: 1 }
%{ [CLUSTER = #{@cluster.name}] Loan task with ID: #{task[:task_id]}
                         of loan with ID: #{task[:cnuapp_loan_id]} couldn't be processed properly!" }
@cluster = Cluster["ca"]
%{ [CLUSTER = #{@cluster.name}] Loan task with ID: #{task[:task_id]}
                         of loan with ID: #{task[:cnuapp_loan_id]} couldn't be processed properly!" }
edit
\e
edit
exit!
"1.2\n".kind_of?(Numeric)
"1.2".kind_of?(Numeric)
"1.20".kind_of?(Numeric)
1.20.kind_of?(Numeric)
-1.20.kind_of?(Numeric)
+1.20.kind_of?(Numeric)
exit!
known = Set.new
known << [35955570]
known = Set.new
known << 35955570
known << 2763339,2536192
known << 2763339
known << 2536192
[3318216,20636812,2516265, 2521873, 2517763, 2523765].each { |a| known << a }
known
[2699608,2444690,3095862,3146992,3119810,3144717,3159499,2944495,3227805,3229155,3236720,3239790,33578814,35142731,35984887,36044156,34954776,35027302,35593587,35797501,35901476,36023791,36029453,36049199,36113916,34987116,33751632,35271697,36044354,36011567,36109101,36220922,35479112,36043270,35730778,36251910,35934056,36108200,36263379,35049666,36162551,36250512,36278878,36288270,36282980,31114616,36303664,36303664,36187976,36284099,35613449,36326502,35069454,36311866,36334670,36303324,36352879,35286524,36371508,36381751,34459258,34961203,36401734,36415436,36426316,29438893,30918672,33067179,36545575,36575708,36649618,36696195].each { |a| known << a }
[3268710,3280758].each { |a| known << a }
known
[2763339,2536192,27840218].each { |a| known << a }
known.size
[2763339,2536192].each { |a| known << a }
known.size
[3318216,20636812,2516265, 2521873, 2517763, 2523765].each { |a| known << a }
known.size
[35955570].each { |a| known << a }
known.size
[2763339,2536192].each { |a| known << a }
known.size
[3318216,20636812,2516265, 2521873, 2517763, 2523765].each { |a| known << a }
known.size
[2699608,2444690,3095862,3146992,3119810,3144717,3159499,2944495,3227805,3229155,3236720,3239790,33578814,35142731,35984887,36044156,34954776,35027302,35593587,35797501,35901476,36023791,36029453,36049199,36113916,34987116,33751632,35271697,36044354,36011567,36109101,36220922,35479112,36043270,35730778,36251910,35934056,36108200,36263379,35049666,36162551,36250512,36278878,36288270,36282980,31114616,36303664,36303664,36187976,36284099,35613449,36326502,35069454,36311866,36334670,36303324,36352879,35286524,36371508,36381751,34459258,34961203,36401734,36415436,36426316,29438893,30918672,33067179,36545575,36575708,36649618,36696195].each { |a| known << a }
known.size
[3268710,3280758].each { |a| known << a }
[2763339,2536192,27840218].each { |a| known << a }
known.size
know.to_yaml
known.to_yaml
known
known.to_a.to_yaml
exit!
Loaner::Config
Loaner::Config.bad_loans
Loaner::Config.bad_loans.known
Loaner::Config.bad_loans.known.size
Loaner::Config.bad_loans.known
exit!
@logger
@logger.info ("me")
@logger.formatter = SimpleFormatter.new
@logger.formatter.kind_of?(Logger::Formatter)
@logger.info ("me")
exit!
logger
exit!
self
ls
parent
parents
msg
exit!
edit call
logger
logger.methods
logger.instance_values
logger.file_name
logger.filename
logger
logger.file
logger.logdev
logger.log_dev
logger
logger.logdev
logger.instance_values
logger.instance_values["log_dev"]
logger.instance_values["logdev"]
logger.instance_values["logdev"]["filename]
logger.instance_values["logdev"]["filename"]
logger.instance_values["logdev"].filename
exit!
logger.instance_values["logdev"].filename
exit!
logger.instance_values["logdev"].filename
logger.instance_values["logdev"]
exit!
/(http|https)\:\/\/([[:alpha:]]{2})\./
%r{(http|https)\://([[:alpha:]]{2})\.}
%r{(http|https)\://([[:alpha:]]{2})\./}
%r{(http|https)\://([[:alpha:]]{2})\.}
%r{(http|https)\://([[:alpha:]]{2})\.} ==  /(http|https)\:\/\/([[:alpha:]]{2})\./
cluster
year
month
day
exit!
all_reports
exit!
exit!
date
test_month
date
exit!
test_month
1.months.ago
2.months.ago
1.month
1.month.ago
exit!
month
year
Date.new(month,year).test_month.months.ago
Date.new(month,year)
Date.new(month, year)
Date.new(year, month).test_month.months.ago
Date.new(year, month) - test_month.months
exit!
cluster_in_request
Loaner::Config.clients[cluster_in_request]
Loaner::Config.clients[]
Loaner::Config.clients[nil]
cluster_in_request
cluster = Loaner::Config.clients[cluster_in_request]
cluster_in_request
caller
cluster
request
whereami
match_data = %r{(http|https)\://([[:alpha:]]{2})\.}.match(request.url)
request.url
%r{(http|https)\://([[:alpha:]]{2})\.}.match(request.url)
%r{(http|https)://([[:alpha:]]{2}).}.match(request.url)
cluster_in_request
request.url
cluster_in_request
request.url
cluster_in_request
request.url
exit
args
output_file
exit!
output_file
true.to_s
Boolean(true.to_s)
true.type
TrueClass(true.to_s)
::TrueClass(true.to_s)
TrueClass.new(true.to_s)
exit!
logger
disable-pry
logger
logger.instance_values["logdev"].type
logger.instance_values["logdev"].type?
logger.instance_values["logdev"].dev
logger.instance_values["logdev"].dev.type
logger.instance_values["logdev"].dev.type?
logger.instance_values["logdev"].dev.kind_of? File
exit!
logger.instance_values["logdev"].dev.kind_of? File
logger
logger.instance_values["logdev"].dev.kind_of? File
exit!
exit!
/\:\/\/((www|gb|ca|jv|us|au)\.
/\:\/\/((www|gb|ca|jv|us|au)\./
/\:\/\/((www|gb|ca|jv|us|au)\.)?/
%r{://((www|gb|ca|jv|us|au)\.)?}
@accountant
print-accounting @accountant
print-accounting simulator
exit!
print-accounting @simulator
@persist_activites
@persist_activities
print-accounting @simulator
print-accounting @accountant
@start_date
whereami
@persist_activities.select { |act| act.effective_date >= @start_date }.each { |act| @simulator.activities.push act }
print-accounting simulator
print-accounting @simulator
print-accounting simulator
exit!
print-accounting
print-accounting @accountant
print-accounting simulator
@accountant.adjusting
@accountant.adjusting?
exit!
@accountant.adjusting
caller
print-accounting simulator
print-accounting @accountant
caller
exit!
self
adjusting
exit!
print-accounting
exit!
new_activities(@accountant, simulator)
print-accounting @accountant
print-accounting simulator
@date
@accountant.extra_activities
exit!
print-accounting simulator
@accountant.extra_activities
@accountant.extra_activities.any?
exit!
print-accounting simulator
print-accounting @accountant
whereami
simulator.activities.all[accountant.activities.size, simulator.activities.size]
simulator.activities.all[@accountant.activities.size, simulator.activities.size]
new_activities(@accountant, simulator)
print-accounting @accountant
whereami
@date
caller
.clear
whereami
print-accounting @accountant
@date
print-accounting simulator
exit!
new_activities(@accountant, simulator)
edit perform
print-accounting 
exit!
print-accounting loan
print-accounting
print-accounting @accountant
edit perform
whereami
@accountant.extra_activities
print-accounting simulator
whereami
edit @accountant
exit!
@extra_activities.select! { |act| act.effective_date > start_date }
@extra_activities
edit initialize
exit!
extra_activities.select! { |act| act.effective_date > start_date }
extra_activities
edit initialize
print-accounting
print-accounting @accountant
edit fast_forward_to
edit simulate
DEBUG_ALL
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
exit!
print-accounting
print-accounting simulator
@adjustment_entries
@additional_activities
whereami
print-accounting simulator
print-accounting -b
print-accounting 
print-accounting simulator
print-accounting simulator -b
print-accounting simulator 
exit!
print-accounting
accounts
print-accounting -b
accounts
exit!
accounts
print-accounting
print-accounting -b
print-accounting
print-accounting simulator
accounts
print-accounting loans
print-accounting -b
exit!
books.any? { |book| book.accounts.empty? }
exit!
edit simulate
accounts
print-accounting loan
edit
edit accountant
whereami
edit self
edit self.accountant
edit @accountant
print-accounting loan
print-accounting loan -A(^interest)
exit!
print-accounting loan
exit!
@adjusting_activity.type?(:reverse_interest)
@adjustment_entries.size > 1
@adjustment_entries
exit!
@adjustment_entries.values.size > 1
@adjustment_entries.values
exit!
print-accounting
@adjustment_entries
@adjustment_entries.values
@adjustment_entries.values.flatten
exit!
print-accounting
print-accounting simulator
.clear
print-accounting simulator -A(interest)
@start_date
wherami
whereami
print-accounting simulator -A(interest)
print-accounting @accountant -A(interest)
print-accounting simulator -A(interest)
print-accounting @accountant -A(interest)
print-accounting @accountant -A(^interest)
print-accounting simulator -A(interest)
exit!
print-accounting simulator
exit!
print-accounting simulator
@adjustment_entries
print-accounting 
exit!
print-accounting loan
print-accounting simulator
exit!
print-accounting simulator
type
type.kind_of?(Symbol)
type.kind_of?(String) || type.kind_of?(Symbol)]
type.kind_of?(String) || type.kind_of?(Symbol)
exit!
type
exit!
type
exit!
type
exit!
type
type.kind_of?(Integer
)
type.kind_of?(Symbol)
exit!
type
exit!
attributes
BigDecimal(attributes["amount"])
exit!
event
exit!
event
disable-pry
event
exit!
daily_interest
BigDecimal(DecNum('1.00'))
BigDecimal(DecNum('1.00').to_s)
exit!
disable-pry
remaining
amount
whereami
caller
amount
remaining
amount
exit!
amount
remaining
amount
exit!
@initial_accounts
ls
balances
exit!
edit apply
edit waterfalling_accountant
disable-pry
file
RubyProf::GraphHtmlPrinter.new(results).print(file)
File.open "#{Rails.root}/tmp/performance/#{file_name}-stack.html", 'w' do |file|
  RubyProf::CallStackPrinter.new(results).print(file)
end
edit
name
account_names
exit!
exit!
Loaner::Reporting
Loaner::Reporting.methods
Loaner::Reporting.dir
Loaner::Reporting.
me
Loaner::Reporting.keys
Loaner::Reporting.methods
Loaner::Reporting
f = Loaner::Reporting
ls f
f.config
f.instance_variable_get(:config)
f.instance_variable_get(config)
f.instance_variable_get(@config)
f.instance_variable_get(:config)
f.instance_variable_get(:finder)
edit f
f.store
f.instance_variable_get(:store)
f.instance_variable_get(:@finder)
f.instance_variable_get(:@config)
f.instance_variable_get(:@config).roots
f.roots
edit
edit f
f.instance_variable_get(:@finder).roots
f.instance_variable_get(:@finder).all_key_names
f.instance_variable_get(:@finder).all_key_names.first
f.send f.instance_variable_get(:@finder).all_key_names.first
f.send "none"
f
f.keys
edit f
f
f.keys
exit!
Sql.ar_by_loan_id()
exit!
(amount / (loan.due_date + 1 - date)).floor(FinanceXL::ROUNDING)
(amount / (loan.due_date + 1 - date))
FinanceXL::ROUNDING
exit!
(amount / (loan.due_date + 1 - date)).floor
(amount / (loan.due_date + 1 - date))
amount
(loan.due_date + 1 - date)
exit!
(amount / (loan.due_date + 1 - date)).floor
\n
n
super
exit!
(amount / (loan.due_date + 1 - date)).floor
exit!
(amount / (loan.due_date + 1 - date)).floor
n
super(n)
ls
floor(n)
n
exit
whereami
exit!
(amount / (loan.due_date + 1 - date)).floor(2)
(amount / (loan.due_date + 1 - date)).floor
exit!
(amount / (loan.due_date + 1 - date)).floor
exit!
(amount / (loan.due_date + 1 - date)).floor
(amount / (loan.due_date + 1 - date)).floor(2)
(amount / (loan.due_date + 1 - date)).floor
(amount / (loan.due_date + 1 - date))
(amount / (loan.due_date + 1 - date)).kind_of? BigDecimal
edit (amount / (loan.due_date + 1 - date)).floor
num = (amount / (loan.due_date + 1 - date))
edit num.floor
num.floor(2)
exit
exit!
num = (amount / (loan.due_date + 1 - date))
num.floor
num = (amount / (loan.due_date + 1 - date))
num.floor
num.floor(2)
num.floor
exit!
num = (amount / (loan.due_date + 1 - date))
num.floor
num.floor(2)
edit BigDecimal.floor
edit BigDecimal.new(1.0).floor
one = BigDecimal.new(1.0)
one = BigDecimal.new(1)
edit one.floor
edit one.floor()
one.floor()
one.floor(2)
exit!
exit!
(amount / (loan.due_date + 1 - date)).floor
one = BigDecimal.new(1)
edit one.floor(2)
edit one
one.floor(2)
wtf
wtf!!
exit!
one.floor
one = BigDecimal.new(1)
one.floor
edit one.floor
one.floor
n
FLOORING
whereami
ls
edit BigDecimal#methods.floor
edit floor
self
self.floor
whereami
edit self.super
exit!
(amount / (loan.due_date + 1 - date)).floor
exit!
(amount / (loan.due_date + 1 - date)).floor
n
super(n)
self
self.floor(2)
edit self
edit self.super
edit self.floor
edit super
edit super(n)
exit!
edit daily_fee
accounts
balances
statement
exit!
loan = Loan.finder 30597115, "us"
print-accounting loan
print-accounting loan -b
loan = Loan.finder 30597115, "us"
print-accounting loan -b
accounts.any? { |a| kind_of? Flt::DecNum }
edit amount_to_charge_off
exit!
balance
actual
print-accounting loan
print-accounting loan -A (^interest)
loan
print-accounting loan -A (^interest)
balance
actual
actual - balance[:amount]
actual - balance[:amount].to_d
actual
balance
exit!
print-accounting
print-accounting simulator
@adjustment_entries
print-accounting simulator -b
print-accounting simulator 
print-accounting loan
print-accounting 
print-accounting simulator
@adjustment_entries
print-accounting 
print-accounting simulator
print-accounting simulator -b
print-accounting simulator 
whereami
print-accounting 
print-accounting -b
print-accounting simulaotr
print-accounting simulator
print-accounting simulator -b
print-accounting -b
print-accounting simulator -b
whereami
balance
print-accounting loan
print-accounting loan -A(^interest)
exit!
@start_date
print-accounting loan
balance
actual
print-accounting loan
loan
print-accounting loan
print-accounting 
exit!
print-accounting 
print-accounting simulator
print-accounting simulator -b
exit!
print-accounting loan
print-accounting 
print-accounting simulator
exit!
interest_accrued
obligation.interest_due
reconcile_amount = obligation.interest_due - interest_accrued
exit!
print-accounting simulator
print-accounting simulator -b
@adjustment_entries
loan
print-accounting loan
loan
print-accouting -h
print-accouting -H
print-accounting -H
print-accounting -h
print-accounting simulator -a (end_of_cycle)
print-accounting -a (end_of_cycle)
print-accounting loan -a (end_of_cycle)
print-accounting loan -A (^interest)
balance
actual
balance[:amount] - actual
balance[:amount].to_d - actual
.clear
print-accounting loan -A (^interest)
exit!
account
print-accounting
whereami
@start_date
today
account
acounts[account]
accounts[account]
amount
amount_to_default
today
exit!
due_amounts
print-accounting
loan
exit!
due_amounts
due_amounts_of_obligation(credit_accounts, obligation.target_date)
exit!
edit pay_due_amounts
end_of_cycle
entry
end_of_cycle.entries
edit end_of_cycle.entries
edit end_of_cycle
end_of_cycle
exit!
entry
current_accounts[account] -= entry.amount if entry.dr == account
current_accounts
accounts
self.accounts
exit!
account
current_accounts
due_amounts
exit!
current_accounts
amount_left_to_default = [amount, amount_to_default, current_accounts[account]].min
current_accounts[account]
print-accounting
current_accounts[account]
whereami
current_accounts[account]
current_accounts
print-accounting -b
account
whereami
amount_to_default
current_accounts[account]
print-accounting
current_accounts[account]
whereami
accounts
obligation_target_date
current_accounts
exit!
account
current_accounts
entry.amount
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
memo
activity
entry
print-accounting
entry
exit!
memo
exit!
print-accounting 
print-accounting source
current_activity
accountant
accountant.adjusting
accountant.current_activity
entry
whereami
dr
cr
accountant.current_activity
@accountant.current_activity
@accountant.current_activity.entries
memo
entry
exit!
print-accounting loan
loan
print-accounting loan
loan
exit
loan
print-accounting loan
exit!
loan
exit!
loan
exit!
loan
print-accounting loan
loan.obligations
loan.obligations[1]
loan.obligations.sort_by(&:target_date)
loan.obligations.sort_by(&:target_date)[1]
exit!
print-accounting loan
date
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
date
print-accounting loan
date
whereami
loan.accountant.forward(date + 1)
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
date
print-accounting loan
exit!
date
exit!
print-accounting lona
print-accounting loan
loan.in_default?
loan.accountant.in_default?
loan.accountant.in_default?(date)
print-accounting -b
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
loan.called_due?
loan.accountant.called_due?
loan.accountant.in_default?
exit!
assert_balances unrecognized_ar: 0
loan.accountant.balances
loan.accountant.balances[:unrecognized_ar]
loan.accountant.balances[:unrecognized_a]
loan.accountant.balances[:unrecognized_ar]
exit!
assert_balances unrecognized_ar: 0
balances
edit assert_balances
assert_balances unrecognized_ar: 0
balance
expect(loan.accountant.balances[:balance]).to eq amount.to_d
exit!
print-accounting loan -b
loan.obligations.sort_by(:target_date).amount
loan.obligations.sort_by(&:target_date).amount
loan.obligations.sort_by(&:target_date)[1].amount
loan.obligations.sort_by(&:target_date)[1].amount + 1
balance[:outstanding]
loan.accountant.balance[:outstanding]
loan.accountant.balances[:outstanding]
loan.accountant.balances[:outstanding] == loan.accountant.balances[:called_due]
loan.accountant.balances[:outstanding] - loan.accountant.balances[:called_due]
loan.accountant.balances[:outstanding]
loan.accountant.balances[:outstanding] - (355.68)
loan.accountant.balances[:outstanding] - (355.68 + 101)
loan.accountant.balances[:outstanding] - (355.68 + 101+1.9)
loan.accountant.balances[:outstanding] - (355.68 + 1.9)
loan.accountant.balances[:outstanding] - loan.accountant.balances[:called_due] - loan.accountant.balances[:unrecognized]
loan.accountant.balances[:outstanding] - loan.accountant.balances[:called_due] - loan.accountant.balances[:unrecognized_ar]
exit!
print-accounting loan
exit!
print-accounting loan
exit!
loan
exit!
loan
exit!
loan
print-accounting loan
loan.obligations
date
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loa
print-accounting loan
exit!
task_args
args
args.first
exit!
task_args
print-accounting loan
print-accounting loan -b
exit!
edit method_missing
print-accounting loan
exit!
interest_due_amount
print-accounting l]
print-accounting 
print-accounting -b
print-accounting loan
exit!
obligation
obligation.interest_amount_due
obligation.interest_due
exit
print-accounting loan
print-accounting loan -b
exit!
edit perform_task
print-accounting
obligation
loan.obligations
today
whereami
exit!
print-accounting loan
loan.obligations
date
exit!
edit reverse_interest
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
whereami
create_billing_fee(loan, 3)
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
print-accounting lona
print-accounting loan
exit!
has
hash
hash[a]
SPECIAL.include?(a)
hash[a] << index
edit create_sticky_spots
whereami
exit!
hash
has
hash
exit!
a
hash[a]
hash
a
index
a
index
hash[a]
exit!
hash.values
hash["green"]
hash["yellow"]
exit!
hash
exit!
sticky_spots
sticky_spots.compact!
exit!
cards
exit!
cards
cards.flatten
exit!
cards
cards.flatten
cards.size
cards.flatten.size
exit!
["gum_drop", "gum_drop_reverse", "candy_cane", "candy_cane_reverse"] * 2
exit!
edit inspect
exit!
spots
player.position
board[:positions]
board[:positions].size
whereami
board[:positions].slice(player.position, board.size)
exit!
spots
spots.size
exit!
player
spots
spots.size
board[:positions]
whereami
card
player.position
exit!
player.position
card
player.position
board
card
player.position
board
card
board[:positions][player.position]
board[:positions][player.position] == card
exit!
player.position
card
exit!
card
board[:positions][player.position]
exit!
card
board[:positions][player.position]
exit!
card
board[:positions][player.position] == card
board[:positions][player.position]
spots
board[:positions][player.position]
player.position
board
whereami
player.position
spots
exit!
card
spots
spots.reverse.each_with_index { |color, index| if color == card; binding.pry; player.position -= index + 1; break; end }
exit!
player.position
card
spots
player.position
spots
spots.size
card
player.position
spots
player.position
index
spots
player.position -= index + 1
board[:positions][player.position]
card
player.position
board[:positions][player.position]
board
board[:positions]
board[:positions][player.position]
board[:positions][qq]
board[:positions][11]
board[:positions][12]
board[:positions][10]
index
19 - index
19 - index - 1
exit!
card
exit!
edit turn
exit!
card
cards
cards = create_cards
cards
exit!
options
exit!
print-accounting loan
print-accounting -b
print-accounting loan -b
whereami
assert_accounts nsf_fee_income: -20, uncollected_nsf_fees: 20, late_fee_income: -2, uncollected_late_fees: 2
print-accounting loan
exit!
print-accounting loan
exit!
accounts[:uncollected_principal] > 0 && accounts[:principal_called_due] == 0
accounts[:uncollected_principal] > 0
accounts
print-accounting loan
exit!
print-accounting
in_default?
accounts
accounts[:uncollected_principal] > 0 && accounts[:principal_called_due] == 0
charged_off?
print-accounting 
print-accounting
print-accounting loan
print-accounting -b
print-accounting loan -b
loan.in_default?
loan.accountant.in_default?
accounts[:uncollected_principal] > 0 && accounts[:principal_called_due] == 0
whereami
assert_loan_status :in_default
edit assert_loan_status
assert_loan_status :in_default
expect(loan.accountant.send("#{expected_status}?",date)).to be true
expected_status
loan.accountant.send("#{expected_status}?",date
)
loan.accountant.send("#{expected_status}?",date)
exit!
edit assert_loan_status
edit  /export/loaner/app/accountants/payday_accountant.rb
balance
actual
exit!
print-accounting loan
exit!
print-accounting loan
loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
loan.simulating_accountant(Date.parse("2014-08-25"))
loan.accountant.simulating_accountant(Date.parse("2014-08-25"))
loan.accountant.simulating_accountant(start_date: Date.parse("2014-08-25"))
acct = loan.accountant.simulating_accountant(start_date: Date.parse("2014-08-25"))
print-accounting acct
print-accounting acct -b
acct.activity :payoff, Date.parse("2014-08-25"), '200'
print-accounting acct
print-accounting acct -b
exit!
print-accounting loan
acct = loan.accountant.simulating_accountant(start_date: Date.parse("2014-08-25"))
acct.activity :payoff, Date.parse("2014-08-25"), '200'
print-accounting loan
print-accounting acct
exit!
acct = loan.accountant.simulating_accountant(start_date: Date.parse("2014-08-25"))
acct.activity :payoff, Date.parse("2014-08-25"), '200'
print-accounting loan
print-accounting acct
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
late_fee_to_default
accounts
print-accounting loan
accounts
adjusting
@date
exit!
amount
late_fee
accounts
print-accounting simulator
@accountant.daily_time
@accountant.daily_run_time
exit!
end_date
print-accounting simulator
$its_pry_time = true
print-accounting loan
print-accounting
@edate
@date
print-accounting
print-accounting simulator
exit!
print-accounting loan
exit!
reconcile_amount
print-accounting
print-accounting -b
date
whereami
adjusting
current_obligation 
current_obligation (date)
previous_obligation(date)
loan.previous_obligation(date)
adjusting
print-accounting 
loan.previous_obligation(date)
current_obligation(date)
obligation = current_obligation(date)
interest_accrued = activities.effective(obligation.start_date..obligaiton.end_date)
interest_accrued = activities.effective(obligation.start_date..obligation.end_date)
interest_accrued = activities.effective(obligation.start_date..obligation.target_date)
interest_accrued = activities.effective(obligation.start_date..obligaiton.target_date).type?(:interest, :unrecognized_interest).sum
interest_accrued = activities.effective(obligation.start_date..obligation.target_date).type?(:interest, :unrecognized_interest).sum
interest_accrued = activities.effective(obligation.start_date..obligation.target_date).select { |a| a.type?(:interest, :unrecognized_interest) }.sum
interest_accrued = activities.effective(obligation.start_date..obligation.target_date).select { |a| a.type?(:interest, :unrecognized_interest) }.map(&:activity_amount).sum
interest_activities = activities.effective(obligation.start_date..obligation.target_date).select do |act|
  act.type?(:interest, :unrecognized_interest)
end
interest_accrued = interest_activities.map(&:activity_amount).sum
obligation.interest_due - interest_accrued
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting l
print-accounting 
adjusting
charged_off?
print-accounting
print-accounting loan
exit!
reconcile_amount
adjusting
print-accounting 
print-accounting -b
print-accounting
print-accounting -b
exit!
print-accounting loan
print-accounting loan -b
balances
balances[:current] - accounts.values_at(:principal, :interest_ar, :late_fees_ar, :fees_ar)
balances[:current] - accounts.values_at(:principal, :interest_ar, :late_fees_ar, :fees_ar).sum
balances[:currently_due] - accounts.values_at(:principal_due, :interest_due, :late_fees_due, :fees_due).sum
print-accounting 
exit!
print-accounting loan
loan
exit!
reconcile_amount
print-accounting 
print-accounting -b
obligation.interest_due
interest_accrued
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
FinanceXL::Activity.find(720).task_id
FinanceXL::Activity.find(710).task_id
balance
actual
balances
loan.accountant.balances
print-accounting loan -b
loan.accountant.balances[:outstanding]
loan.accountant.balances[:outstanding] + 47.52
balance
balance[:amount].to_d - actual
loan
print-accounting loan -b
print-accounting laon
print-accounting loan
balance
actual
print-accounting loan -b
print-accounting loan
balance
actual
print-accounting
print-accounting loan
actual
balance
loan.accountant.balances
loan
exit!
loan
exit!
print-accounting 
whereami
amount
loan
exit!
print-accounting loan
exit!
print-accounting 
charged_off?
exit!
print-accounting loan
balance
actual
actual - balance[:amount]
actual - balance[:amount].to_d
loan
exit!
print-accounting loan
balance
actual
balance
actual
loan.accountant.balances
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
balance
actual
activity
entry
exit1
exit!
print-accounting loan
balanc
balance
actual
print-accounting loan -b
balance
print-accounting loan
FinanceXL::Activity.find(1247).task_id
print-accounting loan -b
loan
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
accounts[:interest_income] + accounts[:unrecognized_interest_income]
accounts = loan.accountant.accounts
accounts[:interest_income] + accounts[:unrecognized_interest_income]
accounts[:interest_income] + accounts[:unrecognized_interest_income] - 1.44
accounts[:interest_income] + accounts[:unrecognized_interest_income] + 1.44
-814.01 - (accounts[:interest_income] + accounts[:unrecognized_interest_income])
balance[:amount].to_d - actual
balance[:amount].to_d - accounts[:co_principal]
balance[:amount].to_d - accounts[:co_principal] + 1.44
print-accounting loan -A(end_of_cycle)
print-accounting loan -a(end_of_cycle)
loan
exit!
print-accounting loan
exit!
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
614.43 + 172.18
-814.01 + _
balance[:amount].to_d - actual
balance[:amount].to_d - loan.accountant.accounts[:co_principal]
24.8 - 27.4
print-accounting loan
print-accounting loan -A(^interest)
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
adjustments
print-accounting 
print-accounting -b
adjusting
print-accounting 
adjustments
whereami
adjustments.map { |act|  amount_change_in_activity(act, :unrecognized_interest_income, :interest_income).abs }
print-accounting loan
balance
actual
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -A(^interest|unrecognized_interest) -b
exit!
print-accounting loan
balance
actual
print-accounting loan
actual
balance
actual - balance[:amount].to_d
print-accounting -b
print-accounting loan -b
balance
loan
print-accounting loan 
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan.accountant.balances[:charged_off]
loan.accountant.balances[:charged_off] - 21.71 
loan.accountant.balances[:charged_off] - 21.71 + 20.58
balance
exit!
activity
entry
memo = "adjust_interest"
print-accounting loan
balance
actual
loan.accountant.balances
print-accounting loan
exit!
simulating
simulating?
ls
@current_activity
self
self.simulating
self.accountant.simulating
@accountant.simulating
@accountant.simulating?
ls
exit!
print-accounting loan
@daily_running
exit!
self
@accountant.daily_running
loan.accountant.daily_running
loan.accountant.instance_variable_get(:@daily_running)
ls
adjusting
exit!
running_daily
@accountant.running_daily
@accountant
exit!
running_daily
@accountant.running_daily
exit!
running_daily
exit!
print-accounting loan
current_interest
print-accounting loan -b
print-accounting loan 
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
activity
caller
exit!
loan.accountant.map_task(task_name: :end_of_cycle, amount: amount, task_id: nil, date: date, interest_due_amount: accounts[:interest_ar])
print-accounting loan
loan.accountant.map_task(task_name: :end_of_cycle, amount: amount, task_id: nil, date: date, interest_due_amount: accounts[:interest_ar])
whereami
amount
amount = (((principal_accounts + fee_accounts) / 5) + interest).floor(2)
loan.accountant.balances[:current]
print-accounting loan
exit!
amount
loan.accountant.balances[:current]
print-accounting loan
exit!
print-accounting loan
print-accounting loan -n
print-accounting loan -b
whereami
print-accounting loan
whereami
cnuapp_interest
2.94 + 19.3
assert_accounts interest_ar: initial_accounts[:interest_ar], co_interest: initial_accounts[:co_interest]
assert_accounts co_unrecognized_interest: initial_accounts[:co_unrecognized_interest] + cnuapp_interest,
a
assert_accounts co_unrecognized_interest: initial_accounts[:co_unrecognized_interest] + cnuapp_interest
initial_accounts{:co_unrecognized_interest]
initial_accounts[:co_unrecognized_interest]
initial_accounts[:unrecognized_interest]
initial_accounts
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
whereami
initial_accounts[:unrecognized_interest]
obligation = loan.current_obligation(date)
exit!
assert_accounts interest_ar: initial_accounts[:interest_ar], co_interest: initial_accounts[:co_interest]
assert_accounts co_unrecognized_interest: initial_accounts[:co_unrecognized_interest] + cnuapp_interest - interest_accrued
assert_accounts co_unrecognized_interest_income: initial_accounts[:unrecognized_interest_income] - cnuapp_interest + interest_accrued
initial_accounts
assert_accounts unrecognized_interest_income: initial_accounts[:unrecognized_interest_income] - cnuapp_interest + interest_accrued
exit!
print-accounting loan
exit!
print-accounting loan
balance
actual
actual +12
print-accounting loan
balance
actual
balance
actual
print-accounting loan
print-accounting loan -a (call_due)
print-accounting loan 
balance
actual
actual - balance[:amount].to_d
print-accounting loan
loan
exit!
print-accounting loan
exit!
print-accounting simulator
exit!
print-accounting simulator
loan
accountant.loan
print-accounting accountant
print-accounting simulator
exit!
obligation = current_obligation(date)
obligation.interest_due
loan.obligations
loan.obligations.select { |ob| ob.interest_due }
exit!
obligation = current_obligation(date)
obligation.interest_due
loan.obligations.select { |ob| ob.interest_due }
balance
actual
print-accounting simulator
exit!
reconcile_amount
print-accounting loan
print-accounting 
print-accounting  -b
whereami
reconcile_amount
called_due?
charged_off?
print-accounting simulator
print-accounting simulator -b
print-acccounting loan
whereami
print-accounting loan
loan
balance
actual
print-accounting loan
balance
actual
balance[:amount].to_d - actual
print-accounting loan
exit!
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting simulator -b
print-accounting 
print-accounting -b
print-accounting simulator -b
print-accounting simulator 
print-accounting 
exit!
print-accounting loan
exit!
print-accounting 
exit!
print-accounting simulator
print-accounting simulator -b
adjustment_entries
balance
actual
balance
actual
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
balance
actual
balance
actual
balance
print-accounting loan
balance
actual
loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loan
loan.obligations
activity
memo
entry
print-accounting 
exit!
activity
entry
caller
whereami
activity.task_id
print-accounting
loan
exit!
exit!
activity
memo
entry
exit!
balance
actual
print-accounting loan
balance
actual
print-accounting loan
balance
actual
print-accounting loan
balance
actual
print-accounting loan
balance
actual
balance[:amount].to_d - actual
exit!
balance
actual
balance[:amount].to_d - actual
exit!
balance
actual
balance[:amount].to_d - actual
print-accounting loan
balance[:amount].to_d - actual
exit!
balance
actual
print-accounting loan
balance
actual
balance[:amount].to_d - actual
loan
print-accounting loan
balance
actual
loan
balance
actual
print-accounting loan
balance[:amount].to_d - actual
print-accounting loan -b
balanc
balance
actual
balance[:amount].to_d - actual
print-accounting loan 
balance[:amount].to_d - actual
balance
print-accounting loan -b
exit!
accounts.find { |h,v| v< 0 }
accounts
exit!
e
exit!
e
print-accounting loan
current_activity
print-accounting loan -b
whereami
entry :uncollected_late_fees,:late_fees_ar,       accounts[:uncollected_unrecognized_late_fees]
accounts[:uncollected_unrecognized_late_fees]
print-accounting loan
print-accounting loan -b -A(^interest_
print-accounting loan -b -A(^interest)
print-accounting loan -b -A(^interest|unrecongnized_interest)
print-accounting loan -b -a(^interest|unrecongnized_interest)
print-accounting loan -b -a(^interest|unrecognized_interest)
print-accounting loan -b -A(^interest|unrecognized_interest)
loan.save!
print-accounting loan -b -A(^interest|unrecognized_interest)
FinanceXL::Activity.find(1676).task_id
exit!
print-accounting
print-accounting -b
whereami
past_due_obligations
past_unpaid_obligations(today + 1)
print-accounting loan
invalidate_default_calculator
past_unpaid_obligations(today + 1)
invalidate_default_calculator
past_due_obligations
past_unpaid_obligations(today + 1)
invalidate_default_calculator
past_unpaid_obligations(today + 1)
exit!
past_unpaid_obligations(today + 1)
today
print-accounting loan
default_calculator
@default_calculator
whereami
past_due_obligations
print-accounting loan -b
past_due_obligations
@default_calculator
past_unpaid_obligations
caller
exit!
print-accounting 
@adjusting
adjusting
print-accounting
whereami
past_due_obligations
exit!
@default_calculator_as_of
@default_calculator
whereami
past_due_obligations = past_due_obligations(today + 1)
exit!
$its_pry_time = true
whereami
obligation
print-accounting loan
print-accounting 
obligations
applicable_payments
past_due_obligations
obligations
obligation
applicable_payments
obligation
applicable_payments
obligation
applicable_payments
obligations
payments
obligatoin
obligation
whereami
applicable_payments
payments
obligation
obligations
past_due_obligations
payments
obligations
past_due_obligations
obligations
whereami
obligation
obligations
applicable_payments
past_due_obligations
whereami
obligation
applicable_payments
payments
obligation
applicable_payments
print-accounting 
obligations
past_due_obligations
loan
print-accounting -b
exit!
exit!
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting loan -b
whereami
loan.accountant.in_default?
expect(loan.accountant.in_default?).to eq(false)
cancel 3, 1, second_obligation.due_date + 1
print-accounting loan
loan.accountant.default_calculator
loan.accountant.instance_variable_get(:@default_calculator)
exit!
print-accounting loan
whereami
past_due_obligations = past_due_obligations(today + 1)
balance
actual
print-accounting loan
balance
actual
print-accounting loan -A(^interest|unrecognized_interest)
exit!
default_calculator
print-accounting 
print-accounting loan -A(^interest|unrecognized_interest)
whereami
default_calculator
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
default_calculator
invalidate_default_calculator
whereami
default_calculator = default_calculator_as_of(today + 1)
loan.obligations
invalidate_default_calculator
edit default_calculator_as_of
default_calculator = default_calculator_as_of(today + 1)
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
invalidate_default_calculator
edit default_calculator_as_of
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
loan
exit!
whereami
print-accounting 
whereami
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
invalidate_default_calculator
$its_pry_time = true
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
loan.contractual_obligations
edit
exit!
$redis
$its_pry_time = true
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
sp
sp.early_payment_amount
loan.obligations
sp
print-accounting
print-accounting loan -A(^interest|unrecognized_interest)
sp
sp.early_payment_amount
sp
whereami
sp
loan.obligations
sp.early_payment_amount
loan
whereami
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
exit!
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
.clear
print-accounting loan -A(^interest|unrecognized_interest)
@loans
@loans.find { |l| l.accountant.activities.find { |a| a.type?(:reconcile) }
}
@loans.find { |l| l.accountant.activities.any? { |a| a.type?(:reconcile) } }
@loans.values.find { |l| l.accountant.activities.any? { |a| a.type?(:reconcile) } }
l = _
print-accounting loan
print-accounting l
print-accounting l -A(^interest|unrecognized_interest)
loan
l
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
exit!
print-accounting loan
balance
print-accounting loan
loan
balance
actual
balance
actual
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -A(^interest|unrecognized_interest) -b
loan.obligations
loan
exit!
print-accounting 
whereami
@default_calculator_as_of
@default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
default_calculator_as_of(today)
default_calculator_as_of(today).past_unpaid_obligations
default_calculator_as_of(today)
loan.payments
print-accounting -A(^interest)
print-accounting -A(^interest) -b
print-accounting -A(^interest) 
whereami
default_calculator_as_of
default_calculator
@default_calculator
loan.obligations
exit!
self
current_activity
whereami
balances
print-accounting
print-accounting -b
balances
exit!
print-accounting 
print-accounting -A(^interest) -b
print-accounting -A(^interest|unrecognized_interest) -b
print-accounting -A(^interest|unrecognized_interest)
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
invalidate_default_calculator
default_calculator_as_of(today)
exit!
print-accounting 
whereami
print-accounting 
print-accounting loan
balance
actual
loan.obligations
lloan
loan
exit!
whereami
obligation_amount
current_obligation(today)
print-accounting 
loan.obligations
today
current_obligation(today)
whereami
current_obligation(today)
adjusting
exit!
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
whereami
loan.obligations
184.18 - 183.58
379.76 - 17.76 - 362
exit!
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
exit!
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -A(^interest|unrecognized_interest) -b
exit!
print-accounting loan
whereami
past_unpaid_obligatoins(today + 1)
past_unpaid_obligations(today + 1)
print-accounting -A(^interest|unrecognized_interest) -b
print-accounting -A(^interest|unrecognized_interest) 
loan
print-accounting loan
print-accounting loan -b
loan
exit!
print-accounting
print-accounting -A(^interest|unrecognized_interest) 
past_unpaid_obligations
loan.obligations
exit!
print-accounting loan
print-accounting -A(^interest|unrecognized_interest) 
exit!
loan
print-accounting loan
amount
current_obligation
whereami
obligation
loan
loan.obligations
obligation
whereami
amount
adjusting
print-accounting loan
whereami
exit!
amount
print-accounting
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
balance
print-accounting
print-accounting loan
balance
print-accounting loan
balance
actual
print-accounting
adjusting
wherami
whereami
print-accounting loan
balance
actual
722.89 - actual
loan
print-accounting loan
print-accounting loan -b
exit!
caller
exit!
type
amount
print-accounting
exit!
print-accounting loan
balance
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
adjusting
whereami
obligation
print-accounting loan
print-accounting loan -b
loan.obligations
loan.obligations.billing_fee_assessed
loan.obligations.find(1)billing_fee_assessed
loan.obligations(true).billing_fee_assessed
loan.obligations(true)
Obligation.find(1)
Obligation.find(1).billing_fee_assessed
Obligation.find(2).billing_fee_assessed
exit!
print-accounting 
print-accounting simulator
print-accounting 
exit!
args
exit!
whereami
print-accounting
print-accounting loan
edit default_calculator_as_of
whereami
edit build_default_history
load 'lib/default_calculator.rb'
exit!
print-accounting loan
whereami
assert_accounts interest_income: -current_interest, interest_ar: 0
whereami
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan  -b
exit!
$its_pry_time
print-accounting
whereami
@adjustment_entries
print-accounting simulat
print-accounting simulator
print-accounting simulator -b
print-accounting 
print-accounting -b
whereami
caller
.clear
print-accounting -b
print-accounting 
exit!
caller
exit!
account
accounts_by_account_name[account.to_sym]
account
caller
lookup
whereami
exit!
exit!
raise ArgumentError, "No such activity type: #{type}" unless activity_type
exit!
loan = Loan.new
loan.changed?
loan.due_date = Date.today
loan.changed?
loan.persisted?
loan = Loan.new
loan.changed?
loan.persisted
loan.persisted?
loan.due_date = Date.today
loan.changed?
loan.save!
exit!
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting
print-accounting 
loan
disable-pry
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
whereami
print-accounting loan
@client.send('is_fake?', 'mock_123')
@client.send('is_fake?', 'mock_123').should be_true
true.should be_true
expect(true).to be_true
expect(true).to be_truthy
expect(true).to eq true
exit!
options
@clients
options
@clients
options.any?
options
configure_client(cluster, options)
options
Cnuapp.configuration.dup.reconfigure(options)
Cnuapp::Client.new(options)
@clients.include?(cluster) || options.any?
@client
@clients
@clients.include?("gb")
customer_id
edit client
edit get_resource
loan_args = loan_characteristics("mock_#{cnuapp_loan_id}", cluster[:name], allow_fake: true)
loan = FactoryGirl.build(:loan, loan_args)
pull_oec_rules(loan)
oec_rules("mock_#{loan.cnuapp_loan_id}", loan.cluster, allow_fake: true)
loan.id
"mock_#{loan.cnuapp_loan_id}"
l.cnuapp_loan_id
loan.cnuapp_loan_id
"mock_6824769".to_i
exit!
whereami
cluster
loan_args = client(cluster, options).loan_characteristics(cnuapp_loan_id).symbolize_keys!
whereami
client(cluster, options).loan_characteristics(cnuapp_loan_id).symbolize_keys!
VCR
VCR.methods
VCR.current_cassette
VCR.turned_on?
exit!
whereami
cnuapp_loan_id
VCR
client.configuration
client
whereami
ls
Cnuapp
Cnuapp::Configuration
Cnuapp::Configuration.fake_prefix
exit!
client
client.configuration
client.configuration.fake_prefix
exit!
edit build_loan
loan_args[:error]
loan_args
cnuapp_loan_id
exit!
loan_args
edit loan_characteristics
Dir[VCR_MOCKS_DIRECTORY]
Dir[VCR_MOCK_DIRECTORY]
Dir[VCR_MOCK_DIRECTORY].all
Dir.glob([VCR_MOCK_DIRECTORY])
Dir[VCR_MOCK_DIRECTORY].methods
Dir[VCR_MOCK_DIRECTORY].first
Dir[VCR_MOCK_DIRECTORY]
Dir[VCR_MOCK_DIRECTORY+"/*"]
exit!
Dir[VCR_MOCK_DIRECTORIES]
whereami
loan_ids = JSON.parse(File.read("#{LOANS_TO_EXPORT_DIRECTORY}/test_suite/#{cluster}_#{loan_type}.json"))
mock_loan_ids = loan_ids.map { |id| "#{cluster}_#{id} }
"
}
mock_loan_ids = loan_ids.map { |id| "#{cluster}_#{id}" }
mock_loan_ids = loan_ids.map { |id| "mock_#{cluster}_#{id}" }
mock_loan_ids = loan_ids.map { |id| Dir.join(VCR_MOCK_DIRECTORY,"mock_#{cluster}_#{id}") }
VCR_MOCK_DIRECTORY
exit!
mock_loan_ids = loan_ids.map { |id| Dir.join(VCR_MOCK_DIRECTORY,"mock_#{cluster}_#{id}") }
loan_ids
loan_ids = JSON.parse(File.read("#{LOANS_TO_EXPORT_DIRECTORY}/test_suite/#{cluster}_#{loan_type}.json"))
mock_loan_ids = loan_ids.map { |id| "#{VCR_MOCK_DIRECTORY}/mock_#{cluster}_#{id}" }
exit!
mock_loan_ids = loan_ids.map { |id| "#{VCR_MOCK_DIRECTORY}/mock_#{cluster}_#{id}" }
loan_ids = JSON.parse(File.read("#{LOANS_TO_EXPORT_DIRECTORY}/test_suite/#{cluster}_#{loan_type}.json"))
mock_loan_ids = loan_ids.map { |id| "#{VCR_MOCK_DIRECTORY}/mock_#{cluster}_#{id}" }
mock_loan_ids = loan_ids.map { |id| Dir.join(VCR_MOCK_DIRECTORY}, "mock_#{cluster}_#{id}") }
mock_loan_ids = loan_ids.map { |id| Dir.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }
mock_loan_ids = loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }
mock_loan_ids = loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }.first
mock_loan_ids = loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }.first.remove_dir
mock_loan_ids = loan_ids.map { |id| Dir[File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}")] }.first.remove_dir
loan_ids.map { |id| Dir[File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}")] }.first
mock_loan_ids = loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }.first
loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }.first
FileUtils.remove_dir(loan_ids.map { |id| File.join(VCR_MOCK_DIRECTORY, "mock_#{cluster}_#{id}") }.first)
exit!
i = 0
loop { puts i; break if i == 5 }
loop { puts i; i += 1; break if i == 5 }
"initial_defaults_nsf_late".humanize
task
activity_consistent?(activity, task)
exit!
FinanceXL::EntryType.find_by_accounts(uncollected_unrecognized_late_fees,:unrecognized_late_fee_income)
FinanceXL::EntryType.find_by_accounts(:uncollected_unrecognized_late_fees,:unrecognized_late_fee_income)
FinanceXL::EntryType.find_by_accounts(:uncollected_unrecognized_late_fees,:unrecognized_late_fee_income).inverse
print-accounting
whereami
entry
print-accounting
whereami
activity
exit!
exit!
accounts[:uncollected_unrecognized_late_fees]
print-accounting 
print-accounting -b
accounts[:uncollected_unrecognized_late_fees]
exit!
called_due?
loan
print-accounting 
exit!
print-accounting loan
whereami
accounts[:uncollected_unrecognized_late_fees]
called_due?
print-accounting loan
print-accounting loan -b
whereami
save!
save
whereami
accountant.save!
selft
@accountant
@accountant.save!
print-accounting loan
print-accounting loan -b
FinanceXL::Activity.find(2744).task_id
exit!
print-accounting
exit!
print-accounting loan
print-accounting
print-accounting -b
whereami
current_balances[:charged_off]
current_balances[:outstanding]
261.04 + 34.83 + 105.65 + 16.34 + 30.24 + 10
_ - current_balances[:outstanding]
exit!
obligation
loan.obligations
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
print-accounting loan
print-accounting 
print-accounting -b
print-accounting loan
whereami
account_pairs = {}
entry_types.each { |dr, cr| account_pairs[dr] = cr }
account_pairs
debit_accounts = account_pairs.keys
next if obligation.due_date < today
obligation.due_date < today
due_amounts = due_amounts_of_obligation(debit_accounts, obligation.target_date)
whereami
print-accounting -b
whereami
current_activity
current_activity.entries
print-accounting -b
current_activity.entries
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
due_amounts = due_amounts_of_obligation(debit_accounts, obligation.target_date)
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
edit restore_due_amounts
exit!
entries
print-accounting loan
print-accounting loan -b
exit
exit!
due_amounts
accounts
whereami
due_amounts.last
due_amounts.first
amount_left_to_restore = [amount, 15.79, accounts[:interest_due]].min
amount_left_to_restore = [amount, 15.79, accounts[:principal_due]].min
print-accounting loan
print-accounting loan -b
whereami
accounts
.clear
whereami
account_pairs
print-accounting loan
print-accounting loan -b
due_amounts
account_pairs.values
due_amounts
due_amounts.reverse
exit!
disable-pry
entries
print-accountign loan
print-accounting 
print-accounting -b
whereami
entries
15.79 + 5.74
amount
exit!
amount
amount_left_to_restore
amount += amount_left_to_restore
uncollected_accounts[0..index]
due_amounts
due_accounts
exit!
entries
due_amounts
exit!
entries
temp_accounts
temp_accounts[credit_account]
accounts[credit_account]
temp_accounts
entries
whereami
entries
amount_to_restore
account
exit!
entries
account
entries
exit!
credit_account
amount_left_to_restore
amount_to_restore
exit!
amount_to_restore
entries
amount_to_restore
credit_account
entries
exit!
print-accounting loan
print-accounting loan -b
whereami
current_balances[:outstanding] - current_balances[:charged_off]
current_balances[:outstanding]
print-accounting loan -b
whereami
print-accounting loan
print-accounting loan -b
balance
actual
balances
whereami
print-accounting loan -b
balance
actual
75 + 158.41
97.91 + 32.69
97.91 + 32.69 + 25
-507.11-197.29
-688.06 + 704.4
97.91 + 32.69 + 25 + 16.34
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting -a(end_of_cycle)
print-accounting loan -a(end_of_cycle)
print-accounting loan -A(^interest|unrecognized_interest)
loan.obligations
loan.current_obligation(Date.parse("2013-08-23"))
loan.current_obligation(Date.parse("2013-08-23")).interest_due
print-accounting loan -A(^interest|unrecognized_interest)
exit!
current_activity
@current_activity
self
methods
current_activity ||= (
  source_id:       source_id,
activity_type:   activity_type,
accounting_date: accounting_date,
effective_date:  effective_date,
activity_amount: '0.00'
)
edit
accountant
whereami
@accountant
@accountant.build_activity
whereami
current_activity ||= @accountant.build_activity(:reverse_interest, date, 0)
new_activity =  @accountant.build_activity(:reverse_interest, date, 0)
exit!
new_activity
current_activity
exit!
new_activity
current_activity
exit!
print-accounting
current_activity
running_daily
exit!
current_activity
caller
whereami
current_activity
self
@current_activity
current_activity
ls
current_activity()
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting
whereami
obligation
obligation.interest_due
reconcile_amount
obligation.interest_due
obligation.closed?
obligation.interest_accrued
interest_accrued
obligation
obligation.interest_due
previous_obligation(date)
previous_obligation(date).closed?
previous_obligation(date).interest_amount_due
previous_obligation(date).interest_due
.clear
whereami
loan.obligations.reject { |ob| ob.closed? }
print-accounting loan
loan.obligations
exit!
obligation
print-accounting
caller
exit!
print-accounting
whereami
reconcile_interest(today - 1)
exit!
loan.obligations.reject { |ob| ob.interest_due }
exit!
caller
activity_type
amount
exit!
ls
amount
exit!
amount
caller
whereami
activity_type
exit!
print-accounting
whereami
edit close_cycle
print-accounting loan
print-accounting loan -b
222.91 + 10.5
552.26 + 135.8
155.6 - 25 - 32.69
print-accounting loan
balance
actual
print-accounting loan -a reverse_interest
balance - actual
balance[:amount].to_d - actual
loan.obligations
loan
print-accounting loan -b
balance[:amount].to_d - actual
whereami
balance[:amount].to_d
actual
print-accounting loan
loan
balance
actual
32.56 - 25.72
loan
exit
obligation_activities(obligation).any? { |act| act.type?(:reconcile) && !act.cancelled? && amount_change_in_activity(act, :principal).abs > 0 }
obligation_activities(obligation)
print-accounting loan
obligation_activities(obligation).any? { |act| act.type?(:reconcile) && !act.cancelled? && amount_change_in_activity(act, :principal).abs > 0 }
print-accounting
whereami
obligation_activities(obligation).any? { |act| act.type?(:reconcile) && !act.cancelled? && amount_change_in_activity(act, :principal).abs > 0 }
reconcile_interest(today - 1)
print-accounting loan
loan.obligations
print-accounting loan
whereami
cnuapp_interest
interest_accrued
initial_accounts[:co_unrecognized_interest] + cnuapp_interest - interest_accrued
initial_accounts[:co_unrecognized_interest]
call_due amount: 100, interest_due_amount: cnuapp_interest
whereami
print-accounting loan
print-accounting
print-accounting loan
obligation
whereami
loan.obligations
exit!
loan.obligations
print-acounting 
print-accounting loan
loan.obligations.last
whereami
create_end_of_cycle(amount:100, obligation: 7)
create_end_of_cycle(amount:100, obligation: 8)
print-accounting loan
loan.obligations
Date.today + 119
Date.today + 109
exit!
print-accounting loan
loan.obligations
loan.obligations.last
forward loan.obligations.last.target_date
print-accounting loan
forward loan.obligations.last.target_date
forward loan.obligations.last.target_date + 1
exit!
print-accounting 
obligation_activities(obligation).any? { |act| act.type?(:reconcile) && !act.cancelled? && amount_change_in_activity(act, :principal).abs > 0 }
print-accounting
print-accounting loan
whereami
loan.obligations.last.closed?
exit!
obligation
exit!
today
exit!
today
print-accounting
obligation.closed
print-accounting
obligation
forward loan.obligations.last.target_date + 2
forward loan.obligations.last.target_date + 3
forward loan.obligations.last.closed
forward loan.obligations.last.closed?
loan.obligations.last.closed?
exit!
obligation
loan.accountant.date
loan.accountant
print-accounting
print-accounting loan
loan.obligations
loan.obligations.last
loan.obligations.last.closed?
exit
activity_type
date
caller
whereami
print-accounting
exit!
index
max_number
index
max_number
exit!
edit create_end_of_cycles
exit!
print-accounting loan
caller
whereami
print-accounting loan
loan.accountant
whereami
print-accounting loan
loan.obligations.last.closed?
exit!
obligation
caller
whereai
whereami
date
print-accounting loan
loan.obligations
whereai
whereami
date
activity_type
datee
date
caller
loan.obligations
whereami
date
exit!
obligatoin
obligation
forward loan.obligations.last.target_date + 1
forward loan.obligations.last.target_date + 2
print-accounting loa
print-accounting loan
exit!
expect(loan.accountant).to receive(:update_obligation_amounts).with(:end_of_cycle, 0, loan.obligations.last.target_date + 1)
exit!
print-accounting loan
payoff loan.accountant.balances[:outstanding]
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
loan.accountant.rules.roll_interest_over_after_early_payment
reconcile amount: 20
print-accounting loan
exit!
print-accounting loan
whereami
loan.obligations
loan.accountant
whereami
loan.obligations
print-accounting loan
exit!
expect(loan.obligations.last.closed?).to eq true
expect(loan.obligations.last.obligation_amount).to eq 0
expect(loan.obligations.last.amount).to eq 0
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
exit!
whereami
print-accounting loan
exit!
print-accounting loan
@current_task_id
whereami
ls
generate_task_id
whereami
ls
exit!
print-accounting loan
loan.accountant.map_task(task_name: :end_of_cycle, amount: amount, task_id: generate_task_id, date: date, interest_due_amount: accounts[:interest_ar])
ls
exit!
print-accounting loan
ls
exit!
print-accounting loan
index
max_number
index
max_number
caller
exit!
print-accounting loan
caller
print-accounting loan
caller
exit!
print-accounting loan
loan
evaluator
evaluator.traits
ls
exit!
print-accounting loan
edit create_end_of_cycles
exit!
exit!
caller
whereami
type
amount
effective_date
exit!
task_id_to_cancel
raise Error::MissingParentId.new(task_id)
task_id
exit!
raise Error::MissingParentId.new(task_id)
exit!
raise Error::MissingParentId.new(task_id)
exit!
print-accounting loan
current_activity
caller
whereami
activity
exit!
print-accounting loan
whereami
amount
obligation = current_obligation(activity.effective_date).early_payment_amount
exit!
activity
print-accounting
exit!
activity
amount
exit!
activity
amount
print-accounting
exit!
disable-pry
print-accounting loan
whereami
obligation.early_payment_amount
forward obligation.due_date + 5
print-accounting loan
whereami
obligation.due_date + 1
exit!
print-accounting
whereami
amount
whereami
early_payments = find_early_payments(obligation.start_date, activity.effective_date)
amount
print-accounting loan
whereami
obligation.interest_amount_paid
obligation.early_payment_amount
print-accounting
whereami
early_payments
amount
amounts
amount
early_payments
exit!
print-accounting 
whereami
obligation = current_obligation(activity.effective_date)
obligation.early_payment_amount
whereami
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
whereami
obligation.early_payment_amount
exit!
amount
obligation.early_payment_amount
exit!
activity
amount
obligation
early_payments.empty?
obligation = previous_obligation(activity.effective_date)
obligation.early_payment_amount
amount
print-accounting loan
whereami
amount
obligation
early_payments.empty?
obligation = current_obligation(activity.effective_date)
early_payments.empty?
obligation = previous_obligation(activity.effective_date)
print-accounting
whereami
amount
whereami
amount
print-accounting loan
forward obligation.due_date + 1
print-accounting loan
forward obligation.due_date + 2
print-accounting loan
exit!
print-accounting loan
whereami
obligation.early_payment_amount
print-accounting loan
whereami
forward obligation.due_date + 1
print-accounting loan
print-accounting lona
print-accounting loan
loan.in_default?
loan.accountant.in_default?
print-accounting loan
exit!
print-accounting loan
whereami
loan.obligations.first.early_payment_amount
forward obligation.due_date + 1
print-accounting loan
FinanceXL::ActivityType[name]
edit method_missing
name
name.include?(:be)
:be_closed
:be_closed?
:be_closed?.to_s.include?("be_")
exit!
print-accounting loan
balance
actual
balance_outstanding
balance[:outstanding]
loan.accountant.balance[:outstanding]
whereami
loan.accountant.balances[:outstanding]
balance
print-accounting -b
print-accounting loan -b
729.74 - 730.34
loan
exit!
print-accounting loan
whereami
assert_loan_status :in_default
print-accounting loan
print-accounting loan -b
loan.accountant.in_default?
whereami
edit assert_loan_status
loan.accountant.in_default?
assert_loan_status :in_default
expect(loan.accountant.send("#{expected_status}?",date)).to be true
loan.accountant.send("#{expected_status}?"
)
print-accounting loan
date
exit!
diff
whereami
print-accounting
print-accounting loan
print-accounting @accountant
loan
@accountant.loan
dif
diff
whereami
balances
exit!
diff
print-accounting loan
print-accounting 
print-accounting @accountant
diff
exit!
dif
diff
print-accounting
print-accounting @accountant
diff
print-accounting loan
print-accounting @accountant
exit!
diff
print-accounting loan
print-accounting @accountant
whereami
actual
diff
exit!
diff
edit calculate_actual_amount
calculate_actual_amount(account, @accountant.accounts)
edit calculate_actual_amount
calculate_actual_amount(account, @accountant.accounts)
calculate_actual_amount(:principal, @accountant.accounts)
edit calculate_actual_amount
exit
diff
exit!
diff
print-accounting @accountant
@accountant.loan
print-accounting loan
print-accounting @accountant
print-accounting @accountant -b
diff
print-accounting @accountant -b
diff
print-accounting loan
print-accounting @accountant
diff
1085.06 - 1071.32
diff
actual
expected
print-accounting loan
whereami
balance
actual
print-accounting loan
print-accounting loan -b
balance
account
balance
actual
whereami
balance[:account]
actual = calculate_actual_amount(balance[:account], loan.accountant.accounts)
loan.accountant.accounts
edit calculate_actual_amount
actual = calculate_actual_amount(balance[:account], loan.accountant.accounts)
accounts[name.to_sym]
name
loan.accountant.accounts
whereami
accounts
whereami
edit calculate_actual_amount
whereami
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan -b
exit!
Rails.env.development?
Rails.env.test?
exit
failed_loan_ids
exit!
e
exit!
e
exit!
loan_args = client.loan_characteristics(cnuapp_loan_id).symbolize_keys!
Rails.env
Rails.env.test?
cnuapp_loan_id
exit!
e
exit!
print-accounting loan
balance
actual
print-accounting loan -b
exit!
print-accounting loan -b
balance
actual
-3705.28 - 2492.41
-56.0 - 6.89
821.01 + 87.5 + 50
821.01 + 87.5 + 50 + 119.5
-56.0 - 6.89 - 8.51
821.01 + 87.50 + 50.00 + 119.50
print-accounting loan 
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -A(^interest|unrecognized_interest) -b
print-accounting loan -A(^interest|unrecognized_interest) 
print-accounting loan -A(^interest|unrecognized_interest) -b
exit!
print-accounting loan
print-accounting loan -b
whereami
past_unpaid_obligations(today + 1)
exit!
past_unpaid_obligations(today + 1).first
print-accounting loan
whereami
exit!
past_unpaid_obligations(today + 1)
whereami
print-accounting loan
print-accounting loan -b
whereami
past_unpaid_obligations(today + 1)
obligation = past_unpaid_obligations(today + 1).first
(today + 1) - obligation.due_date >= charge_off_days
invalidate_default_calculator
obligation = past_unpaid_obligations(today + 1).first
print-accounting loan
whereami
obligation
loan.obligations
whereami
exit!
amount
print-accounting loan
whereami
today
print-accounting loan
whereami
obligation
loan.obligations.find(6=54)
loan.obligations.find(54)
whereami
current_obligation(today)
whereami
print-accounting loan
whereami
obligation
obligation = current_obligation(date)
print-accounting loan
print-accounting
exit!
print-accounting loan
loan.obligations.find(54)
loan.obligations.find(55)
print-accounting loan -b
print-accounting loan
whereami
loan.obligations.find(54)
loan.obligations.find(55)
loan.obligations.find(55).closed?
exit!
reconcile_amount
past_unpaid_obligations(today + 1).first
print-accounting loan
edit amount_to_charge_off
print-accounting loan
balance
actual
print-accounting loan
.clear
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
exit!
amount
print-accounting
today
whereami
income_amount
income_account
remaining_amount
amount
amount_to_recognize = [remaining_amount, accounts[income_account], amount].min
amount_to_recognize = [remaining_amount, accounts[income_account].abs, amount].min
accounts[income_account].abs
print-accounting loan -b
whereami
recognized_income_account = income_account.to_s.gsub("unrecognized_").to_sym
income_account
income_account.to_s
income_account.to_s.gsub("unrecognized_")
income_account.to_s.gsub("unrecognized_","")
income_account.to_s.gsub("unrecognized_","").to_sym
entry income_account, recognized_income_account, amount_to_recognize
recognized_income_account
recognized_income_account = income_account.to_s.gsub("unrecognized_", "").to_sym
income_account
entry income_account, recognized_income_account, 20
exit!
amount_to_recognize = [remaining_amount, accounts[income_account].abs, amount].min
income_account
amount_to_recognize = [remaining_amount, accounts[income_account].abs, amount].min
recognized_income_account = income_account.to_s.gsub("unrecognized_", "").to_sym
income_account
amount_to_recognize
amount_to_recognize = [remaining_amount, accounts[income_account].abs, amount].min
recognized_income_account = income_account.to_s.gsub("unrecognized_", "").to_sym
entry income_account, recognized_income_account, amount_to_recognize
revenue
remaining_amount -= amount_to_recognize
amount -= amount_to_recognize
exit!
entry
activity
Loaner::Config.memos[:payoff]
memo
entry.entry_id,
1
entry.entry_id
Loaner::Config.memos[:payoff][entry.dr]
entry
entry.dr
entry.cr
entry.dr
exit!
print-accounting loan
print-accounting loan -b
whereami
edit recognize_charged_off_revenue
entry
activity
charged_off?
print-accounting loan
print-accounting loan -b
entry
exit!
entry
entry.dr
Loaner::Config.memos[:payoff][entry.dr]
exit!
entry
exit!
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -A(^interest|unrecognized_interest) -b
loan
exit!
h = {disbursement_account: me}
h = {disbursement_account: "me"}
h.key? :disbursement_account
exit
diff
edit check_diverging_balances
diff
exit!
print-accounting
print-accounting @accountant
adjusting
whereami
exit!
print-accounting
start_date
safe_to_correct
whereami
$its_pry_time = true
interest_reversal_activity = correct(correction, @date, start_date: start_date - 1, extra: previous_correction)
print-accounting simulator
print-accounting simulator -b
whereami
print-accounting simulator 
exit!
diff
print-accounting @accountant
diff
exit!
diff
exit!
new_activity_set.reject! { |act| (act.cancelled? && act.cancelled_date >= @start_date) || (act.cancels? && act.cancels_activity.cancelled_date >= @start_date) }
exit!
new_activity_set.any? { |act| act.cancels? && act.cancels_activity.cancelled_date.nil? }
new_activity_set.select { |act| act.cancels? && act.cancels_activity.cancelled_date.nil? }
act.cancels_activity
act = new_activity_set.select { |act| act.cancels? && act.cancels_activity.cancelled_date.nil? }
act
act.cancels_activity
act = new_activity_set.select { |act| act.cancels? && act.cancels_activity.cancelled_date.nil? }.first
act.cancels_activity
print-accounting
act.cancels_activity
act.cancels_activity.cancelled_date
whereami
Activity.find(265)
Activity.find(265).cancelled_date
exit!
safe_to_correct
$its_pry_time
$its_pry_time = true
interest_reversal_activity = correct(correction, @date, start_date: start_date - 1, extra: previous_correction)
print-accounting simulator
@adjustment_entries
whereami
$its_pry_time = false
print-accounting loan
print-accounting loan -b
diff
exit!
"unrecognized_billing_fee_income"
account = _
%r{(http|https)://([[:alpha:]]{2})\.}.match(request.url)
%s{unrecognized_*_income}.match(account)
%r{unrecognized_*_income}.match(account)
%r{unrecognized_*_income}
%r{unrecognized_\*_income}
%r{unrecognized_[[:alpha:]]*_income}
%r{unrecognized_[[:alpha:]]*_income}.match(account)
%r{unrecognized_([[:alpha:]])*_income}.match(account)
%r{unrecognized_([[:alpha:]])*_income}
%r{unrecognized_.*_income}
%r{unrecognized_.*_income}.match(account)
exit
print-accounting loan
whereami
print-accounting loan
print-accounting -b
print-accounting loan -b
exit!
income_account
revenue
remaining_amount
amount
print-accounting
remaining_amount
revenue
amount
exit!
remaining_amount
exit!
remaining_amount
amount
remaining_amount
revenue
remaining_amount
amount
revenu
revenue
print-accounting
whereami
amount_to_recognize
remaining_amount
accounts[income_account]
print-accounting loan
print-accounting loan -b
remaining_amount
amount
whereami
remaining_amount
print-accounting -b
whereami
remaining_amount
amount
revenue
exit
amount
amount_to_recognize
amount
print-accounting loan
whereami
revenue
amount
wherami
whereami
amount
amount_to_recognize
amount
revenues
revenue
incomes
amount
exit!
amount
income_account
amount_to_recognize
revenue
amount
revenue
amount
amount_to_recognize
income_account
amount
print-accounting loan
print-accounting loan -b
whereami
assert_accounts unrecognized_interest_income: 0
assert_accounts  interest_income: initial_accounts[:interest_income] - initial_accounts[:unrecognized_interest_income]
initial_accounts[:interest_income]
initial_accounts[:unrecognized_interest_income]
exit!
disable-pry
print-accounting loan
print-accounting simulator
whereami
@start_date
print-accounting loan
print-accounting acccountant
print-accounting @acccountant
whereami
print-accounting
@start_date
exit!
print-accounting loan
initial_accounts.diff current_accounts
initial_accounts.diff(current_accounts)
initial_accounts - current_accounts
initial_accounts
current_accounts
exit@
exit!
initial_accounts
current_accounts
assert_accounts disbursement_account: initial_accounts[:disbursement_account]
exit!
print-accounting loan -b
936.77 - 333.26
exit!
balance
actual
607.07 - 574.57 
print-accounting loan -b
balance
607.07 - 574.57 
print-accounting loan
print-accounting loan -A(^interest|unrecognized_interest)
print-accounting loan -a(end_of_cycle)
print-accounting loan -A(^interest|unrecognized_interest) 
exit!
print-accounting loan
loan
print-accounting loan -b
-3560.53 -69.6
574.57 - 607.07
397.46 + 97.13 + 607.07 - 574.57 - 504.59
(307.29 + 10 + 607.07 + 80.76 + 97.13 + 45 + 397.46) - (340.95 + 504.59 + 45 + 574.57 + 69.6 + 10)
print-accounting loan -A(end_of_cycle)
print-accounting loan -a(end_of_cycle)
loan
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
print-accounting loan
print-accounting loan -a (end_of_cycle)
print-accounting loan -b
print-accounting loan -a (end_of_cycle)
print-accounting loan -b
exit!
memo
activity
entry
exit!
memo
entry
activity
exit!
print-accounting loan
print-accounting loan -b
3560.89 +  + 69.24
3560.89 + 69.24
whereami
memo
exit!
print-accounting loan
print-accounting loan -b
balance
exit!
dif
diff
edit check_diverging_balances
diff
print-accounting loan
print-accounting @accountant
diff
2128.41 - 2123.69
@accountant
@accountant.loan
whereami
print-accounting @accountant
exit!
print-accounting
today
whereami
obligation = past_unpaid_obligations(today + 1).first
print-accounting loan -b
whereami
obligation = past_unpaid_obligations(today + 1).first
loan.obligations
exit!
loan.obligations
whereami
past_unpaid_obligations(today + 1).first
today
89.19 * 3
(89.19 * 3) - 273.44
print-accounting loan
print-accounting @accountant
exit!
print-accounting loan
print-accounting @accountant
exit!
print-accounting loan
print-accounting @accountant
exit!
print-accounting loan
print-accounting @accountant
@accountant.loan
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting @accountant
whereami
edit check_diverging_balances
exit!
print-accounting loan
exit!
exit
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
reconcile_interest(today)
print-accounting 
print-accounting -b
22.08 - 25.02
whereami
exit!
print-accounting 
reconcile_interest(today)
$its_pry_time = true
reconcile_interest(today)
exit!
reconcile_interest(today)
exit!
$its_pry_time = true
reconcile_interest(today)
exit!
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
reconcile_interest(today)
accounts[:interest_ar]
accounts[:unrecognized_interest]
accounts[:interest_called_due]
exit!
$its_pry_time = true
reconcile_amount = obligation.interest_due - interest_accrued
obligation.interest_due
interest_accrued
obligation = current_obligation(date)
print-accounting loan
whereami
obligation.closed?
date
obligation
exit!
print-accounting loan
running_daily
today
$its_pry_time = true
reconcile_amount = obligation.interest_due - interest_accrued
reconcile_interest(today)
date
obligation
edit current_obligation
edit loan.current_obligation
exit!
$its_pry_time = true
reconcile_interest(today)
@current_obligation
date
@current_obligation.nil?
date < @current_obligation.start_date
date > @current_obligation.target_date
current_obligation_invalid = @current_obligation.nil? ||date < @current_obligation.start_date ||  date > @current_obligation.target_date
in_obligations_window = date >= @first_obligation.start_date && date <= @last_obligation.target_date
exit!
print-accounting loan
whereami
loan.simulated_to
loan.obligations
forward loan.obligations.last.target_date + 2
loan.obligations.last.target_date + 2
obligation = loan.current_obligation(Date.parse('2015-01-18'))
exit!
obligation = current_obligation(today)
obligation.billing_fee_assessed
adjusting && interest_assessed?(today) && accounts[:interest_ar] != 0
daily_interest
print-accounting loan
today
exit!
print-accounting loan
loan.simulated_to
loan.obligations
exit!
Date.today = 109
Date.today + 109
loan
exit
exit!
loan
max_number
loan.obligations.size
index
caller
exit!
loan
index == max_number - 1
index
index == max_number - 1
index
index == max_number - 1
max_number
index
index == max_number - 1
whereami
print-accounting loan
exit!
loan
index
loan
print-accounting loan
whereami
index
loan.obligations
exit!
loan
print-accounting loan
whereami
loan.obligations.last.target_date + 2
exit!
print-accounting loan
Date.parse('2014-12-19') - Date.today
Date.parse('2014-12-25') - Date.today
exit!
seventh_obligation
exit!
seventh_obligation
exit!
seventh_obligation
loan.obligations
loan.obligations.sort_by(&:start_date)
loan.obligations.sort_by(&:start_date)[6]
exit!
today
print-accounting 
whereami
update_obligation_amounts(:end_of_cycle, 0, today)
edit update_obligation_amounts(:end_of_cycle, 0, today)
edit update_obligation_amounts
update_obligation_amounts(:end_of_cycle, 0, today)
obligation = current_obligation(date - 1)
edit update_obligation_amounts
whereami
wheremi
whereami
seventh_obligation
seventh_obligation.closed
seventh_obligation.reload.closed
exit!
print-accounting loan
loan.obligations
exit!
whereami
obligation
rules.roll_interest_over_after_early_payment? 
obligation_activities(obligation).any? do |act| act.type?(:reconcile) && !act.cancelled? && amount_change_in_activity(act, :principal).abs > 0 end
obligation_activities
obligation_activities(obligation)
obligation
obligation.start_date - Date.today
exit
print-accounting loan
whereami
expect(loan.accountant.in_default?).to eq(false)
assert_loan_status :called_due
expect(loan.accountant.balances[:unrecognized_ar]).to be > 0
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
date
forward date + 5
print-accounting loan
exit!
print-accounting loan
loan.simulated_to
date
date + 2
forward date + 2
print-accounting loan
exit!
loan
date
print-accounting loan
whereami
loan.obligations
exit!
date
print-accounting loan
date
exit!
date
print-accounting loan
exit!
h = Hash.new
h[:donnie]
h = Hash.new("Donnie")
h[:donnie]
exit!
balance
actual
print-accounting loan
loan.accountant.current_obligation
loan
print-accounting loan -b
exit!
amount
amount > accrued
amount_to_recognize = amount - accrued
issued?(today) && (amount_to_recognize >= unrecognized_fee)
amount_to_recognize = unrecognized_fee
unrecognized_fee
exit!
amount
edit unrecognized_fees
exit!
edit recognize_fees_early
loan
Cluster[2]
print-accounting loan
loan.accountant.rules
exit!
print-accounting loan
whereami
late_fee 10
date
Date.parse('2014-11-11') - Date.today
exit!
print-accounting loan
whereami
late_fee 10
print-accounting loan
loan.accountant.rules.accrue_late_fees_ar
loan.accountant.rules
whereami
loan.cluster = "gb"
loan.accountant.rules
exit!
print-accounting loan
whereami
exit!
print-accounting loan
whereami
assert_accounts unrecognized_late_fees: 10, unrecognized_late_fee_income: -10
payoff loan.accountant.balances[:past_due]
payoff amount: loan.accountant.balances[:past_due], date: fourth_obligation.target_date + 5
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
whereami
print-accounting loan
whereami
payoff amount: loan.accountant.balances[:past_due], date: fourth_obligation.target_date + 1
print-accounting loan
print-accounting loan -b
loan
ls
date
exit!
loan
loan.obligations
exit!
obligation_number
exit!
obligation_number
exit!
loan.obligations
loan
exit!
date
exit!
date
loan.obligations
loan
exit!
loan
loan.obligations
date
exit!
loan.obligations
loan.current_obligation(date)
loan.current_obligation(date).obligation_id
expect(loan.current_obligation(date).obligation_id).to eq obligation_number
whereami
date
loan.current_obligation(date)
loan
exit!
date = Date.today + 90
expect(loan.current_obligation(date)).to be_nil
date
loan.current_obligation(date)
exit!
Rake.application.in_namespace(:reporting)
require Rake
exit
print-accounting loan
print-accounting loan -b
payoff 750
print-accounting loan 
print-accounting loan -b
forward date + 70
print-accounting loan
exit!
print-accounting lona
print-accounting loan
payoff loan.accountant.balances[:outstanding]
print-accounting -b
print-accounting loan -b
new_draw 2000
print-accounting lona
print-accounting loan
new_draw_fee 750
date
forward date + 70
print-accounting loan
cancel 1
cancel task_id: 1
cancel 1, Date.parse('2015-01-05')
print-accounting loan
.clear
exit!
print-accounting loan
whereami
payoff loan.accountant.balances[:charged_off], date: date + 1
print-accounting loan -b
exit!
payoff loan.accountant.balances[:charged_off], date: date + 1
recognized_income_account
exit!
payoff loan.accountant.balances[:charged_off], date: date + 1
Rails.env
Rails.env.test?
@environment_prepared
Rails.env.test?
@environment_prepared
ActiveRecord::Base.establish_connection(:test)
Loan.all
@environment_prepared
Loan.all
loan
@loans
exit!
Loan.all
loan_ids
tasks
exit!
tasks
loan_type
exit!
tasks
exit
h = Hash.new { 0 }
h.any?
exit!
print-accounting loan
date
Date.today + 43
exit!
print-accounting loan
exit!
print-accounting loan
Date.parse('2014-11-04') - Date.today
exit!
print-accounting loan
fees_to_recognize_early(amount - accrued, unrecognized_fee)
exit!
dr
cr
FinanceXL::EntryType.where(debit_account_id: dr.id, credit_account_id: cr.id)
FinanceXL::EntryType.all
edit seed_entry_type
dr
cr
EntryType.all
.clear
Account
Account.all
whereami
edit EntryType.find_by_accounts
EntryType.find_by_accounts(dr, cr)
exit!
Account[dr]
[Account[dr].id][Account[cr].id]
[Account[cr].id]
[Account[dr].id][Account[cr].id]
entry_types_by_accounts
entry_types_by_accounts[Account[dr].id]
entry_types_by_accounts[Account[dr].id][Account[cr].id]
entry_types_by_accounts
whereami
entry_types_by_accounts[Account[dr].id][Account[cr].id]
exit!
entry_types_by_accounts[Account[dr].id][Account[cr].id]
disable-pry
entry_type
EntryType.find_by_accounts(dr, cr)
exit!
@cache ||= all
exit!
result
ls
whereami
@entry_types_by_accounts
whereami
Account[dr].id
Account[cr].id
v
entry_types_by_accounts[Account[dr].id][Account[cr].id]
entry_types_by_accounts[Account[dr].id]
entry_types_by_accounts[Account[dr].id][Account[cr].id]
[Account[cr].id]
[Account[dr].id]
entry_types_by_accounts[Account[dr].id][Account[cr].id]
[Account[dr].id][Account[cr].id]
(entry_types_by_accounts[Account[dr].id])[Account[cr].id]
(entry_types_by_accounts[Account[dr].id])([Account[cr].id])
(entry_types_by_accounts[Account[dr].id])[Account[cr].id]
[Account[cr].id]
(entry_types_by_accounts[Account[dr].id])
[Account[dr].id]
entry_types_by_accounts[25]
entry_types_by_accounts[25][13]
exit!
(loan.fee_amount / (loan.due_date + 1 - loan.issue_date))
(loan.fee_amount / (loan.due_date + 1 - loan.issue_date)).class
loan.fee_amount
loan.fee_amount / (loan.due_date + 1 - loan.issue_date)
loan.fee_amount
BigDecimal(0) / Float(1)
BigDecimal(0) / 2
exit!
edit
exit
end_of_cycle.entries.reduce({}) do |due_amounts, entry| 
  accounts.each do |account|
  end
  p due_amounts
end
end_of_cycle.entries.reduce({}) do |due_amounts, entry| 
  accounts.each do |account|
    p account, due_amounts[account]
  end
end
accounts
end_of_cycle.entries.reduce({}) do |due_amounts, entry| 
  accounts.each do |account|
    p account, due_amounts[account]
  end
rescue
bidning.pry
edit
wherami
due_amounts
e
edit
e
exit
exit!
end_of_cycle
entry
accounts.each do |account| due_amounts[account] = entry.amount if entry.dr == account end
due_amount
due_amounts
exit!
pass_rate
success_rate
pass_rate = 100
pass_rate
success_rate
expect(pass_rate).to eq 100, "Expected #{cluster} test_suite to pass but only #{pass_rate}% of loans passed"
expect(pass_rate).to eq(100), "Expected #{cluster} test_suite to pass but only #{pass_rate}% of loans passed"
pass_rate = 98
expect(pass_rate).to eq(100), "Expected #{cluster} test_suite to pass but only #{pass_rate}% of loans passed"
expect(pass_rate).to eq(100), "Expected #{cluster}.humanize test_suite to pass but only #{pass_rate}% of loans passed"
expect(pass_rate).to eq(100), "Expected #{cluster.humanize} test_suite to pass but only #{pass_rate}% of loans passed"
expect(pass_rate).to eq(100), "Expected #{cluster.capitalize} test_suite to pass but only #{pass_rate}% of loans passed"
expect(pass_rate).to eq(100), "Expected #{cluster.upcase} test_suite to pass but only #{pass_rate}% of loans passed"
print-accounting loan
balance
actual
loan
print-accounting loan -a (end_of
print-accounting loan -a (end_of)
wherami
whereami
balance
actual
print-accounting loan 
print-accounting loan -b
print-accounting loan -a(payoff)
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
loan
balance
actual
print-accounting loan
print-accounting loan -b
whereami
balance
exit!
balance
actual
print-accounting loan -b
balance
actual
print-accounting loan 
exit!
edit amount_to_default
amount
print-accounting
exit!
print-accounting loan
whereami
default_calculator
loan.obligations
loan
exit!
amount
print-accounting loan
wheream
whereami
print-accounting loan
whereami
activity_type
exit!
amount
edit
adjustment
obligation_activities
obligation_activities(obligation)
amount
print-accounting loan
exit!
called_due?
print-accounting loan
print-accounting loan -b
in_default?
exit!
called_due?
print-accounting loan
in_default?
amount
print-accounting loan
exit!
amount
entry
activity
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loa
print-accounting loan
print-accounting loan -b
whereami
default_calculator
whereami
print-accounting loan
default_calculator
loan.obligations
loan.obligations.sort
print-accounting loan
loan.payments.sum(:amount)
loan.obligations.sum(:amount)
print-accounting loan
print-accounting loan -b
amount
whereami
edit
edit amount_to_default
due_amounts
edit due_amounts_of_obligation
due_amounts_of_obligation(credit_accounts, obligation_target_date)
end_of_cycle
wheream
accounts
obligation_target_date
end_of_cycle = activities.find do |activity|  activity.type?(:end_of_cycle) && activity.effective_date == obligation_target_date + 1 end
end_of_cycle
exit!
end_of_cycle
edit 
end_of_cycle
end_of_cycle.entries
whereami
print-accounting
whereami
print-accounting 
print-accounting -b
$its_pry_time = false
whereami
print-accounting 
exit!
adjusting
print-accounting
balance
actual
print-accounting loan
print-accounting loan -b
balance
actual
actual + accounts[:customer_balance]
actual + loan.accountant.accounts[:customer_balance]
balance
actual
print-accounting loan
print-accounting loan -a reconcile
print-accounting loan 
print-accounting loan -b
whereami
balance[:amount] - actual
balance[:amount].to_d - actual
exit!
print-accounting loan
print-accounting loan -b
current_activity
current_activity.entries
print-accounting loan 
loan.obligations
print-accounting loan -b
loan.obligations
loan.obligations.sort
exit!
today
exit!
today
exit!
date
interest_accrued
whereami
print-accounting loan
whereami
obligation
obligation.billing_fee_assessed && interest_accrued == FinanceXL::ZERO
econcile_amount = obligation.interest_due - interest_accrued
print-accounting loan
print-accounting loan -b
whereami
reverse_interest_entry(reconcile_amount.abs, date)
reconcile_amount = obligation.interest_due - interest_accrued
reverse_interest_entry(reconcile_amount.abs, date)
current_activity
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
whereami
current_activity
current_activity.entries
obligation
current_obligation(today)
exit!
obligation
obligation.id
interest
adjustments
relevant_activities
exit!
relevant_activities
print-accounting loan
obligation
activities
whereami
activities.effective(obligation.start_date..obligation.target_date)
whereami
print-accounting loan
print-accounting 
adjusting?
adjusting
print-accounting loan
current_activity
current_activity.entries
adjusting
interest
adjusting
print-accounting loan
print-accounting loan -
print-accounting loan -b
exit!
current_activity
print-accounting loan
print-accounting loan -b
whereami
reconcile_interest(today)
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
adjusting
print-accounting
current_activity
whereami
$its_pry_time = true
interest
print-accounting
print-accounting loan
print-accounting 
current_activity
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting 
print-accounting simulator
print-accounting
exit!
print-accounting simulator
whereami
print-accounting loan
print-accounting 
print-accounting -b
exit!
print-accounting loan
print-accounting simulator
whereami
print-accounting simulator
interest_assesed?(Date.parse('2014-09-04')
)
print-accounting simulator -b
print-accounting simulator
print-accounting accountant
@start_date
exit!
print-accounting
whereami
interest_assessed?(today)
accounts[:unrecognized_interest_ar] != FinanceXL::ZERO
print-accounting loan
print-accounting loan -b
exit!
FinanceXL::ZERO if interest_assessed?(today) && accounts[:unrecognized_interest] != FinanceXL::ZERO
print-accounting
whereami
adjusting
end_of_cycle_date?(today)
today
end_of_cycle_date?(today)
obligation = previous_obligation(today)
obligation.closed?
exit!
today
print-accounting loan
exit!
print-accounting loan
end_of_cycle(obligation.target_date)
return unless end_of_cycle(obligation.target_date)
end_of_cycle(obligation.target_date)
exit!
print-accounting loan
print-accounting 
adjusting
print-accounting 
print-accounting
edit close_cycle
print-acccounting loan
print-acccounting 
print-accounting 
print-accounting simulator
edit simulate
exit@
exit!
edit save_accountant
disable-pry
EntryType.all
FinanceXL::EntryType.all
load "#{Rails.root}/db/seeds.rb"
FinanceXL::EntryType.all
exit!
FinanceXL::EntryType.all
load "#{Rails.root}/db/seeds.rb"
edit seed_entry_type
load "#{Rails.root}/db/seeds.rb"
require_relative 'seed_data/payment_methods'
exit!
models
models[1]
models[1].all
wheremi
whereami
models[1].all
load 'seed_data/entry_types.rb'
load 'lib/seed_data/entry_types.rb'
load '/export/loanerlib/seed_data/entry_types.rb'
load '/export/loaner/lib/seed_data/entry_types.rb'
load '/export/loaner/db/seed_data/entry_types.rb'
FinanceXL::EntryType.all
exit!
File.join(Rails.root, Loaner::Path.vcr_mock, "mock_#{cluster}_)
")
exit!
dir
file_exists?(dir)
file_exists?(dir+"/")
Loaner::Path.vcr_mock, "mock_#{cluster}_#{id}")
Loaner::Path.vcr_mock, "mock_#{cluster}_#{id}"
Loaner::Path.vcr_mock + "mock_#{cluster}_#{id}"
Loaner::Path.vcr_mock + "mock_#{cluster}_#{123}"
File.join(Loaner::Path.vcr_mock, "mock_#{cluster}_123")
File.join(Loaner::Path.vcr_mock, "mock_#{cluster}_32110199/")
file_exists(File.join(Loaner::Path.vcr_mock, "mock_#{cluster}_32110199/"))
file_exists?(File.join(Loaner::Path.vcr_mock, "mock_#{cluster}_32110199/"))
File.join(Loaner::Path.vcr_mock, "mock_#{cluster}_32110199/
"))
File.join(Loaner::Path.vcr_mock, "mock_*"
)
dir = _
file_exists? dir
dir = File.join("lib/exported_loans/test_suite/us_oec.json")
file_exists? dir
dir = File.join("/export/loaner/lib/exported_loans/test_suite/us_oec.json")
file_exists? dir
exit!
dir
File.exist(dir)
Rails.root.join Loaner::Path.vcr_mock, "mock_#{cluster}_#{id}")
Rails.root.join (Loaner::Path.vcr_mock, "mock_#{cluster}_#{id}")
exit!
dir
File.exist(dir)
File.exist?(dir)
exit!
File.exist?(dir)
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
exit!
print-accounting loan -b
exit!
print-accounting loan
whereami
expect(seventh_obligation.reload).to be_closed
sevent_obligation
seventh_obligation
loan.cluster
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
200 * seventh_obligation.interest_rate
200 * seventh_obligation.rate
200 * seventh_obligation.interest_rate
200 * seventh_obligation.daily_rate
loan.accountant.rate
loan.accountant.interest_rate
loan.accountant.interest_rate * 200 * 3
loan.accountant.interest_rate.to_r * 200 * 3
loan.accountant.interest_rate.apr * 200 * 3
loan.accountant.interest_rate.apr
loan.accountant.interest_rate
loan.accountant.interest_rate.daily
loan.accountant.interest_rate.daily * 200
loan.accountant.interest_rate.daily * 200 * 3 
loan.accountant.interest_rate.daily * 200 
(loan.accountant.interest_rate.daily * 200).floor(2)
(loan.accountant.interest_rate.daily * 200).floor(places: 2)
print-accounting loan
print-accounting loan -b
obligation
whereami
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
create_end_of_cycle amount: 100, obligation: 4
print-accounting loan
create_end_of_cycle amount: 100, obligation: 5
print-accounting loan
create_end_of_cycle amount: 100, obligation: 6
exit!
print-accounting loan
loan.obligations
loan.obligations.sort
loan.obligations.sort[5]
loan.obligations.sort[5].amount.should eq loan.accountant.balances[:outstanding] - 10
loan.obligations.sort[5].amount.should eq loan.accountant.balances[:outstanding] - 110
exit!
print-accounting loan
sixth_obligation
loan.obligations
sixth_obligation.reload
sixth_obligation.reload.amount.should eq loan.balances[:outstanding] - 10 - 119.32
sixth_obligation.reload.amount.should eq loan.accountant.balances[:outstanding] - 10 - 119.32
exit!
expect(sixth_obligation.reload.amount).to eq loan.accountant.balances[:outstanding] - accounted_for
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
-6487.35 - 175
exit!
balance
actual
print-accounting loan
print-accounting loan -b
loan.obligatoins
loan.obligations
loan
exit!
balance
actual
print-accounting loan
print-accounting loan -b
652.52 - 122.8
print-accounting loan
exit!
print-accounting loan
balance
actual
exit!
balance
actual
print-accounting loan
exit!
print-accounting loan
balance
actual
loan.obligations
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loan
obligation
loan.obligations
adjusting
whereami
print-accounting
adjusting
obligation
loan.obligations
default_calculator
@default_calculator
71.08 + 73.16
whereami
print-accounting loan
exit!
obligation_amount
print-accounting loan
loan.obligations
adjusting
obligation_amount
loan.obligations
adjusting
print-accounting loan
loan.obligations
exit!
print-accounting
whereami
balance(:outstanding)
adjusting
print-accounting loan
print-accounting 
adjusting
print-accounting 
whereami
update_obligation_amounts(:charge_off, obligation_amount, today)
loan.obligations
adjusting
print-accounting
loan.obligations
exit!
print-accounting loan
adjusting
loan.obligations
exit!
amount
amount -= obligation.amount if activity_type == :charge_off
adjusting
amount
amount -= obligation.amount if activity_type == :charge_off
adjusting
amount
activity_type
adjusting
loan.obligations
obligation
amount
adjusting
amount -= obligation.amount if activity_type == :charge_off
exit!
amount
obligation.amount
print-accounting
adjusting
amount
activity_type
adjusting
amount
obligation.amount
amount
disable-pry
print-accounting loan
loan.obligation
loan.obligations
fifth_obligation = loan.obligations.sort[5]
exit!
exit!
print-accounting
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
forward date + 2
print-accounting loan 
print-accounting loan
date + 3
print-accouting loan
print-accounting loan
date + 3
wehereami
whereami
charge_off date: date + 3
charge_off date: (date + 3), amount: 1
print-accounting loan
exit!
print-accounting loan
loan.obligations
exit!
loan.obligations
exit!
loan.obligations
exit!
exit!
print-accounting loan
exit!
print-accounting loan
loan.obligations
exit!
gs
.clear
balance
actual
print-accounting loan -b
loan
435.76 + 212.31 + 490.1
principal = _
fees = 52.5 + 302.37 + 68.72
fees - 52.50 - 112.50
principal + fees - 52.50 - 112.50 - 1184.45 - 10.08 - 212.31
principal + fees - 52.50 - 112.50 - 1184.45 - 212.31
(principal + fees - 52.50 - 112.50 - 1184.45 - 212.31).round(2)
balance
actual
print-accounting loan
loan
loan.obligations
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
whereami
reconcile_amount
amount
reconcile_amount
print-account
print-accounting
print-accounting -b
exit!
amount
print-accounting loan
4.27 * 4
4.27 * 5
whereami
amount
adjusting
print-accounting loan
print-accounting loan -b
exit!
print-accounting
amount
exit!
interest
relevant_activities
loan.obligations
obligation
loan.obligations.first
loan.obligations.first.closed?
current_activity
adjusting
print-accounting loan
loan.obligations
exit!
today
exit!
print-accounting loan
end_of_cycle_date?(today)
obligation = previous_obligation(today)
print-accounting loan
whereami
end_of_cycle(obligation.target_date)
rules.roll_interest_over_after_early_payment?
amount = reconcile_interest(today - 1)
exit~
exit!
$its_pry_time = true
interest
adjustments
relevant_activities
today
obligation
today
exit!
$its_pry_time = true
date
obligation = current_obligation(date)
loan.obligations
loan
exit!
[1,2,3] & [4,5,6]
exit
obligations.values.map { |v| v[:start_date] }
obligations
obligations.map { |_, v| v[:start_date] }
obligations.map { |k| puts k, v }
obligations.map { |hash| hash[:start_date] }
exit!
start_dates
start_dates & target_dates
intersecting_dates = start_dates & target_dates
intersecting_dates.join(","
)
intersecting_dates.join(", ")
loan_id
loan_id = obligations.first[:loan_id]
exit!
intersecting_dates = start_dates & target_dates
raise Error::InvalidStatmentDates.new(loan_id, intersecting_dates) if interesecting_dates.any?
raise Error::InvalidStatmentDates.new(loan_id, intersecting_dates) if intersecting_dates.any?
exit!
balance
actual
print-accounting loan -b
loan
print-accounting loan
loan.accountant
exit!
print-accounting loan
balance
print-accounting loan -b
-792.1 - 192.76
print-accounting loan 
loan
print-accounting loan -a end_of_cycle
print-accounting loan 
exit!
print-accounting loan
balance
actual
print-accounting loan -b
.59 + 6.91 + 4.25
0.59 + 6.91 + 4.25
print-accounting loan 
0.59 + 6.91 + 4.25 - 11.43
0.59 + 6.91 + 4.25
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting 
print-accounting -b
adjusting_activity
print-accounting loan
print-accounting 
whereami
@adjustment_entries
print-accounting simulator
print-accounting simulator -b
whereami
print-accounting
exit!
edit
activities
print-accounting loan
activities.find(300)
activities.find(300).first
activities[3]
activities.select { |act| act.activity_id == 300 }
activities.find { |act| act.activity_id == 300 }.
me
activities.find { |act| act.activity_id == 300 }
act = activities.find { |act| act.activity_id == 300 }
act.type?(:cancel) && act.effective_date >= start_date - 1
act.cancels_activity.effective_date <= start_date - 1
act.cancels_activity
start_date
start_date - 1
exit!
print-accounting simulator
act = activities.find { |act| act.activity_id == 300 }
act.type?(:cancel) && act.effective_date >= start_date - 1
act.cancels_activity.effective_date <= start_date
amount_change_in_activity(act, :unrecognized_interest_income, :interest_income).abs > FinanceXL::ZERO
print-accounting simulator
print-accounting -b
print-accounting loan -b
406.3 - 64.5 - 63.53 - 228.33
406.3 - 64.5 - 63.53 - 228.33 + 192.76 - 51.60 - 36.47 
exit!
print-accounting loan
print-accounting loan -b
64.5 + 228.33
64.5 + 228.33 - 192.76 - 188.14
64.5 + 228.33 + 51.6 - 192.76 - 188.14
64.5 + 228.33 + 51.6 + 36.47 - 192.76 - 188.14
balance
actual
balance
print-accounting loan
exit!
print-accounting
start_date
whereami
act = activities.find { |act| act.activity_id == 300 }
act.type?(:cancel) && act.effective_date >= start_date - 1
act.cancels_activity.effective_date <= start_date
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
loan
second_obligation = loan.obligations.sort[1]
forward second_obligation.target_date + 1
initial_accounts = loan.accountant.accounts.dup
print-accounting loan
print-accounting loan -b
whereami
new_draw amount: 100, date: second_obligation.target_date + 1
whereami
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
[100 - interest, fees].min + 40,
[100 - interest, fees].min + 40
[100 - interest - fees, principal].min
[100 - interest - fees, principal].min + 200
print-accounting loan
print-accounting loan -b
principal
[100 - interest - fees, principal]
[100 - interest - fees, principal].min
[100 - interest - fees, principal].min + 460
principal - [100 - interest - fees, principal].min + 200
balance
actual
print-accounting loan -b
-948.84 -7.23
balance
interest_to_reconcile
accounts[:co_unrecognized_interest]
amount
print-accounting loan
print-accounting loan -b
whereami
adjusting
print-accounting
print-accounting -b
exit
print-accounting 
print-accounting simulator
print-accounting simulator -b
print-accounting
print-accounting -b
print-accounting simulator 
print-accounting
whereami
@additional_activities
@adjustment_entries
print-accounting simulator
print-accounting simulator -b
print-accounting -b
print-accounting 
print-accounting loan 
print-accounting loan -b
whereami
accounts[:co_unrecognized_interest]
print-accounting simulator
print-accounting 
print-accounting -b
print-accounting loan
print-accounting
whereami
exit!
simulator
print-accounting
exit!
activities.any { adjustment_options[:introduces].include?(activity.activity_type) && act.effective(start_date) }
activities.any? { adjustment_options[:introduces].include?(activity.activity_type) && act.effective(start_date) }
adjustment_options
adjustment_options[:introduces]
activities.any { adjustment_options[:introduces].include?(activity.activity_type) }
activities.any? { adjustment_options[:introduces].include?(activity.activity_type) }
activties.all
activties.select { adjustment_options[:introduces].include?(activity.activity_type) }
activities.select { adjustment_options[:introduces].include?(activity.activity_type) }
activities
print-accounting
FinanceXL::Activity.find(149)
FinanceXL::Activity.find(149).activity_type
adjustment_options[:introduces].include?(FinanceXL::Activity.find(149).activity_type)
activities.select { adjustment_options[:introduces].include?(activity.activity_type) }
activities.select { |activity| adjustment_options[:introduces].include?(activity.activity_type) }
exit!
balance
actual
print-accounting loan
balance
actual
print-accounting loan -b
exit!
balance
actual
print-accounting loan -b
475 + 120
475 + 120 + 85
5.67 + 9.01
5.67 + 9.01 + 1.71
93.01 + 685.01
93.01 + 685.01 + 13.01
93.01 + 685.1 + 13.01
80 + 685.1 + 13.01
475 + 120
475 + 120 + 85
date
@first_obligation
contractual_obligations
exit!
self
exit!
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
whereami
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
interest
adjustments
print-accounting loan
obligation
exit!
print-accounting loan
print-accounting loan -b
disable-pry
print-accounting loan
exit!
print-accounting loan
forward third_obligation.target_date + 1
third_obligation = loan.obligations.sort[2]
print-accounting loan
whereami
third_obligation
forward third_obligation.target_date + 2
print-accounting loan
whereami
exit!
print-accounting loan
print-accounting loan -b
exit!
exit!
print-accounting loan
exit
print-accounting loan
print-accounting loan -b
exit!
$its_pry_time = true
reconcile_amount
interest_accrued
obligation
interest_accrued
exit!
$its_pry_time = true
interest
relavant_activities
relevant_activities
obligation
print-accounting loan
obligation
date
obligation
current_activity
reconcile_amount
print-accounting loan
charged_off?
print-accounting loan -b
exit!
memo
activity
entry
print-accounting
exit!
print-accounting loan
print-accounting loan -b
whereami
assert_accounts interest_income: -current_interest, interest_ar: 0
print-accounting loan
print-accounting loan -b
5.28 - 0.96
whereami
exit!
print-accounting simulator
print-accounting loan
print-accounting
whereami
print-accounting simulator
exit!
$its_pry_time = true
exit!
$its_pry_time = true
exit!
print-accounting simulator
print-accounting loan
exit!
print-accounting loan
loan.obligations
exit!
whereami
current_activity
interest
adjustments
print-accounting loan
whereami
print-accounting loan
adjusting
current_activity
edit reverse_interest
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
whereami
entry
memo
balance
actual
print-accounting loan
print-accounting loan -b
exit!
edit check_diverging_balances
print-accounting loan
print-accounting
print-accounting @accountant
diff
exit!
diff
print-accounting loan
print-accounting 
print-accounting @accountant
loan
@accountant.loan
whereami
diff
exi!
exit!
past_due_obligations(date).map(&:due_date)
edit earliest_default
print-accounting loan
default_calculator_as_of
default_calculator
@default_calculator
print-accounting loan
print-accounting loan -b
@default_calculator
whereami
print-accounting loan
caller
whereami
print-accounting loan
print-accounting loan -a call_due
exit!
print-accounting loan
loan
loan.defaults
loan.defaults.last
exit!
whereami
print-accounting loan
loan.defaults
exit!
print-accounting loan
loan.defaults
print-accounting loan -b
whereami
past_due_obligations
whereami
loan.obligations
whereami
past_due_obligations
@default_calculator
whereami
invalidate_default_calculator
past_due_obligations(today + 1)
edit default_calculator_as_of
whereami
invalidate_default_calculator
past_due_obligations(today + 1)
today + 1
loan.contractual_obligations
whereami
loan.obligations
loan.obligations.find(15)
loan.obligations.find(15).early_payment_amount
print-accounting loan
whereami
exit!
edit default_calculator_as_of
exit!
print-accounting loan
past_due_obligations
exit!
whereami
exit!
amount = amount_change_in_activity(activity, :customer_balance).abs
past_due_obligations
print-accounting loan
loan.obligations
loan.obligations.find(15)
loan.obligations.find(15).early_payment_amount
print-accounting loan
print-accounting loan -a reconcile
exit!
print-accounting loan
whereami
obligation
obligation.early_payment_amount
activity
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
amount_change_in_activity(activity.cancels_activity, :fees_due, :interest_due, :principal_due)
exit!
amount
amount = amount_change_in_activity(activity, :customer_balance).abs
activity
activity.entries
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
activity.entries
amount = amount_change_in_activity(activity, :customer_balance).abs
activity
amount
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
print-accounting loan
current_activity
whereami
activity
obligation.early_payment_amount
exit!
amount = amount_change_in_activity(activity, :customer_balance).abs
print-accounting loan
amount
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
activity.enties
activity.entries
amount = amount_change_in_activity(activity, :customer_balance).abs
print-accounting loan
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
print-accounting
whereami
activity
adjusting
print-accounting
whereami
activity
caller
whereami
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
activity
amount = amount_change_in_activity(activity, :customer_balance).abs
exit!
amount = amount_change_in_activity(activity, :customer_balance).abs
obligation.early_payment_amount
actvity.cancelled?
activity.cancelled?
obligation.early_payment_amount
amount = amount_change_in_activity(activity, :customer_balance).abs
past_due_obligations
print-accounting loan
exit!
print-accounting loan
balance[:past_due
]
loan.accountant.balances
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
loan.defaults
print-accounting loan
loan.defaults(true)
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
loan.defaults
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]loan
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
exit!
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
exit!
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
exit!
assert_defaults size: 1, defaults: [{ default_date: first_obligation.target_date + 5, end_date: nil, start_date: first_obligation.target_date + 5 }]
print-accounting loan
exit
print-accounting loan
create_end_of_cycle obligation: 3, amount: 100
print-accounting loan
loan.defaults
loan.defaults(true)
exit!
should_be_aging? && !aging?
should_be_aging?
!aging?
aging?
loan.defaults
loan.defaults(true)
print-accounting loan
exit!
print-accounting loan
loan.obligations
loan.defaults
payfoff amount: 119.32, date: Date.parse('2014-11-26')
payoff amount: 119.32, date: Date.parse('2014-11-26')
loan.defaults
print-acccounting loan
print-accounting loan
loan.defaults
loan.defaults(true)
.clear
exit
print-accounting loan
lloan.obligations
loan.obligations
loan.defaults
loan.defaults(true)
exit!
edit check_balance
print-accounting loan
exit!
date
task_args[:date]
ls
caller
date
args[2]
args
ls
date
edit date
let(:date) = Date.today
let(:date) { Date.today }
described_class
exit!
name
ls
whereami
caller
name
date
ls
@__memoized
@example
args
name
caller
exit!
date
example
exit!
example
date = example.example_group.description
name
date
ls
exit!
name
ls
@date
exit!
print-accounting loan
date
print-accounting loan
date
loan.simulated_to
eix!
exit!
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit
date
date == first_obligation.target_date + 5
date == first_obligation.target_date + 7
date
first_obligation.target_date + 7 - date
first_obligation.target_date + 7
date
exit!
first_obligation.target_date + 5
exit!
def 1st_method; puts 'hi'; end;
1.ordinalize
exit!
1.ordinalize
exit!
1.ordinalize
1.ordinalise
1.ordinalize
exit!
[1..10].each { |num| def #{num.ordinalise}_obligation; num; end }
    ;
[1..10].each { |num| def #{num.ordinalise}_obligation; num; end; }
edit
name
caller
exit!
name
caller
exit!
name
exit!
second_obligation
second_obligation()
exit!
edit method_missing
print-accounting loan
create_end_of_cycle amount: 100, obligation: 2
cancel 5, first_payment, second_obligation.target_date + 2
print-accounting loan
exit!
loan
print-accounting loan
loan.obligations
loan.obligations.find(2)
loan.obligations.find(2).early_payment_amount
loan.obligations.find(2).reload.early_payment_amount
exit!
amount
exit!
print-accounting loan
second_obligation.early_payment_amount
second_obligation.reload.early_payment_amount
exit!
expect(second_obligation.reload.early_payment_amount).to eq 0
exit!
amount = amount_change_in_activity(activity, :customer_balance).abs
act
activity
amount = amount_change_in_activity(activity, :customer_balance).abs
obligation.early_payment_amount
activity
print-accounting loan
whereami
activity
amount
amount = amount_change_in_activity(activity, :customer_balance).abs
obligation.early_payment_aount
obligation.early_payment_amount
exit
exit!
second_obligation.reload.early_payment_amount
print-accounting loan
expect(second_obligation.reload.early_payment_amount).to eq 50
exit!
exit!
print-accounting loan
assert_obligations size: 1, obligations: [{ amount: 220, due_date: date, target_date: date, fee_accrual_enabled: true }]
exit!
date
loan.obligations
loan.obligations.first 
loan.obligations.first.fee_accrual_enabled
date
Date.today
Date.tomorrow
exit!
adjusting
balance(:interest)
print-accounting loan
exit!
due_amounts = due_amounts_of_obligation(credit_accounts, obligation_target_date)
print-accounting
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
entries
current_activity.entries.sum
current_activity.entries
current_activity.entries.map(:amount)
current_activity.entries.map(&:amount)
current_activity.entries.map(&:amount).sum
exit!
print-accounting loan
print-accounting loan -b
whereami
balance(:interest)
exit!
print-accounting loan
print-accounting loan -b
exit
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
loan.obligations
print-accounting loan -b
exit!
print-accounting loan
whereami
adjusting
print-accounting
print-accounting -b
whereami
balance(:interest)
whereami
print-accounting
whereami
interest_reconciled?(today)
current_activity
reconcile_interest(today - 1) unless interest_reconciled?(today)
exit!
balance
actual
print-accounting loan
print-accounting loan -b
loan
0.92 * 3
0.92 * 4
.clear
loan
print-accounting loan
balance
exit
exit!
print-accounting loan
print-accounting loan -b
283.46 + 579.81
42.43 + 7.08
42.43 + 7.08 - 0.24
42.43 + 7.08 
42.43 + 7.08 - 0.48
283.46 + 579.81 + 50  - 50 - 73.69 - 697.46 - 92.12
test_suite[loan_type]['loan_tasks']
loan_type
test_suite
exit!
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting @accountant
diff
exit!
diff
print-accounting loan
3653.15 - 3112.89
print-accounting loan
@accountant
print-accounting @accounting
print-accounting @accountant
exit!
balance
actual
exit!
diff
print-accounting loan
print-accounting @accountant
whereami
diff
@accountant.loan
print-accounting @accountant
diff
362.94 - 235.86
whereami
print-accounting loan
print-accounting @accountant
@accountant.loan
exit!
balance
actual
print-accounting loan
balance
print-accounting loan
exit!
print-accounting loan
date
loan.obligations
print-accounting loan
whereami
caller
current_activity
print-accounting loan
print-accounting loan -b
exit!
balance
actual
disable-pry
print-accounting loan
print-accounting loan -b
print-accounting loan -a call_due
exit!
balance(:current) + balance(:currently_due)
print-accounting loan
past_due_obligations
30.6 + 58.8
420 + 120 + 12
420 + 120 + 96.32
420 +  96.32
420 +  96.32 + 12
420 +  96.32 + 12 + 60
print-accounting loan -b
whereami
print-accounting loan 
past_due_obligations
whereami
30.6 + 58.8
print-accounting loan -b
whereami
@default_calculator_as_of
@default_calculator
(206.35 + 123.92 + 152.04 + 195.76 + 209.55)
(206.35 + 123.92 + 152.04 + 195.76 + 209.55) - (206.35 + 123.92 + 152.04 + 963.03)
print-accounting loan 
@default_calculator
(206.35 + 123.92 + 152.04 + 195.76 + 209.55) - (206.35 + 123.92 + 152.04 + 963.03)
96.32 + 60 + 420
96.32 + 60 + 420 + 12
balances
963.03 - (195.76 + 209.55) 
588.3199999999999 - 557.72
96.32 + 29.4
(195.76 + 209.55)
261.31 + 12 + 12 + 60
(195.76 + 209.55) - (261.31 + 12 + 12 + 60)
(195.76 + 209.55) - (261.31 + 12 + 12 + 60 + 60)
exit!
obligation_amount
print-accounting loan
whereami
current_obligation(today)
print-accounting loan
loan.current_obligation(Date.parse('2014-06-25'))
exit!
amount
obligation.amount
amount
print-accounting loan
exit!
amount
exit!
amount
print-accounting loan
loan.obligations.
find(6)
edit update_obligation_amounts
edit 
edit self
edit accountant
edit @accountant
amount
caller
current_activity
exit!
amount
exit!
print-accounting loan
whereami
adjusting
print-accounting
whereami
interest_reconciled?(today)
entries
whereami
reconcile_interest(today - 1)
current_obligation(today)
current_obligation(today).interest_due
calculate_interest_accrued(current_obligation(today - 1))
exit!
print-accounting loan
adjusting
whereami
interest_accrued = calculate_interest_accrued(obligation)
obligation.interest_due
adjusting
interest_accrued = calculate_interest_accrued(obligation)
FinanceXL::ZERO if obligation.billing_fee_assessed && interest_accrued == FinanceXL::ZERO
reconcile_amount = obligation.interest_due - interest_accrued
obligation.interest_due
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
activity
whereami
exit!
entry
exit!
balance
actual
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
balace
whereami
balance
actual
print-accounting loan -b
1973.01 + 113.78
1973.01 + 113.78 + 101.67
12 + 528.81 + 101.67 - (349.86 + 150.17 + 24 + 118.45)
entry
memo
activity
print-accounting loan
print-accounting loan -b
exit!
amount
accounts[:fees_ar]
print-accounting loan
print-accounting loan -b
adjusting
print-accounting loan
print-accounting loan -b
exit!
whereami
.clear
print-accounting 
accounts
current_activity
caller
print-accounting
print-accounting -n
print-accounting -b
accounts
print-accounting loan
accounts
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
whereami
changes = finalize_due_amounts
accounts
exit!
accounts
caller
exit!
task_name
accounts
exit!
activity
print-accounting loan
print-accounting loan -b
exit!
print-accouning loan
print-accounting loan
exit!
print-accounting loan
whereami
print-accounting loan -b
accounts
adjusting
whereami
exit!
print-accounting 
current_activity
adjusting_activity
print-accounting simulator
print-accounting simulator -b
print-accounting simulator 
print-accounting 
print-accounting -b
print-accounting simulator
print-accounting simulator -b
print-accounting simulator 
whereami
print-accounting loan
print-accounting loan -b
whereami
amount
exit!
current_activity
activity
accounts
exit!
accounts
print-accounting
print-accounting -b
whereami
current_accounts
initial_accounts
caller
whereami
exit!
accounts
caller
exit!
print-accounting loan
print-accounting loan -b
exit!
whereami
caller
whereami
accounts
print-accounting loan
print-accounting 
print-accounting -b
exit!
book
whereami
accountant.accounts
exit!
@original_activities = accountant.activities.all.dup.tap { |acts| acts.push adjusting_activity }
whereami
simulator.accounts
accountant.accounts
whereami
@simulated_activities = simulator.activities
whereami
introduce_types = accountant.adjustment_options[:introduces] || []
diff = Diff.new(accountant.books, @original_activities, @simulated_activities, introduce_types)
whereami
@additional_activities = diff.additional_activities
@adjustment_entries    = diff.adjustment_entries
exit!
incorrect_sums
whereami
@original
whereami
simulated - @original
print-accounting 
@original - simulated
exit!
@adjustment_entries
exit!
@adjustment_entries
accountant.balances
simulator.balances
accountant.accounts
simulator.accounts
accountant.accounts
simulator.accounts
print-accounting 
print-accounting simulator
print-accounting simulator -b
.clear
print-accounting simulator -b
print-accounting simulator 
print-accounting 
print-accounting -b
@adjustment_entries
whereami
@adjustment_entries
print-accounting simulator
print-accounting simulator -b
print-accounting 
print-accounting -b
accountant.accounts
whereami
exit!
accountant.accounts
exit!
accountant.accounts
exit!
accountant.accounts
exit!
print-accounting
exit!
print-accounting loan
balance
print-accounting loan -b
437.5 + 139.69 
1104.79 + 437.5
(437.5 + 139.69 + 15 + 1372.33) - (724.57 + 1475.26 + 17.02)
print-accounting loan 
print-accounting loan -a payoff
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
exit!
print-accounting loan -b
exit!
diff
exit!
print-accounting @accountant
loan
@accountant.loan
exit!
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
print-accounting loan -a payoff
exit!
whereami
current_activity
remaining_for_due
print-accounting -b
balance(:currently_due)
whereami
exit!
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
loan.obligations
whereami
current_obligation(today)
current_obligation(today - 1)
whereami
print-accounting loan
previous_obligation(today - 1)
wherami
whereami
past_unpaid_obligations
whereami
past_unpaid_obligations(today)
invalidate_default_calculator
past_unpaid_obligations(today)
invalidate_default_calculator
@default_calculator
past_unpaid_obligations(today)
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
whereami
@default_calculator
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
@default_calculator.past_unpaid_obligations
@default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
invalidate_default_calculator
@default_calculator
@default_calculator = default_calculator_as_of(today)
whereami
edit @default_calculator_as_of
edit @default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
obligation
payments
edit past_unpaid_obligations
whereami
edit past_unpaid_obligations
whereami
invalidate_default_calculator
currently_paid
total_payoff_amount
total_payoff_amount - amount > FinanceXL::ZERO
total_payoff_amount - amount
past_unpaid_obligations(today, extra_payments: currently_paid)
obligations
payments
obligations
payments
whereami
edit pay_down_past_due_obligations
obligation
payment
unpaid_obligations
payments
obligation.remaining_balance
print-accounting loan
whereami
@default_calculator
whereami
print-accounting loan -b
wherami
whereami
unpaid = past_unpaid_obligations(today, extra_payments: currently_paid)
unpaid
print-accounting loan
print-accounting loan -b
unpaid
112.5 + 150.27
336.87 - 262.77
print-accounting loan
current_obligation(Date.parse('2013-08-28') - 1) 
current_obligation(Date.parse('2013-08-28') - 1).early_payment_amount
exit!
edit past_unpaid_obligations
amount
activity
obligation.early_payment_amount
print-accounting loan
amount
activity
amount
amount = amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
print-accounting loan
amount
activity
print-accounting loan
exit!
amount
activity
print-accounting loan
whereami
obligation.early_payment_amount += amount
obligation.early_payment_amount -= amount
current_obligation(filter_activity.effective_date + 1)
current_obligation(filter_activity.effective_date + 1).early_payment_amount
exit!
amoun
amount
wherami
amount
with_amount_check([early_payments, amount.abs].min) { }
amount
obligation
amount
exit!
print-accounting loan
amount
obligation
obligation.early_payment_amount
amount
early_payments
edit update_early_payments
obligation
exit!
obligation
new_amount
obligation.early_payment_amount
print-accounting loan
whereami
new_amount
loan.obligations.find(77)
loan.obligations.find(77).early_payment_amount
amount
new_amount
amount
print-accounting loan
loan.obligations.find(88)
loan.obligations.find(88).early_payment_amount
loan.obligations.find(87).early_payment_amount
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
whereami
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
amount
whereami
print-accounting loan
exit!
amount
exit!
entry
entry.entry_type
entry.entry_type.id
cancelled_early_payment_entries.include?(entry.entry_type.id)
sum += entry.amount if entry.dr == :customer_balance
exit!
sum
entry.dr == :customer_balance
entry
cancelled_early_payment_entries.include?(entry.entry_type.id)
sum
exit!
entry.d
entry.dr
sum += entry.amount if entry.dr == :customer_balance
cancelled_early_payment_entries.include?(entry.entry_type.id)
sum
exit!
amount = early_payment_change_in_cancellation(activity)
obligation.early_payment_amount
exit
amount = early_payment_change_in_cancellation(activity)
expect(third_obligation.reload.early_payment_amount).to eq 0
print-accounting loan
exit!
print-accounting loan
whereami
edit loan.accountant
exit!
print-accounting 
activity
amount
activity
activity.entries
entry
cancelled_early_payment_entries.include?(entry.entry_type.id)
sum
entry
cancelled_early_payment_entries.include?(entry.entry_type.id)
exit!
entry
cancelled_early_payment_entries.include?(entry.entry_type.id)
amount
early_payments = obligation.early_payment_amount
[early_payments, amount.abs].min
whereami
amount
early_payments = obligation.early_payment_amount
print-accounting loan
whereami
obligation
amount
obligation
exit!
print-accounting loan
whereami
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
919.61 - 21.33
balance
print-accounting loan
exit
cancel 10, reconciler
cancel 50, reconciler
reconciler
print-accounting loan
cancel 500, reconciler
loan.accountant.activities.map(&:task_id)
loan.accountant.activities.map { |a| [a.task_id, a.activity_type])
loan.accountant.activities.map { |a| [a.task_id, a.activity_type] }
exit!
task_id
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loan
loan.obligations
whereami
exit!
expect(seventh_obligation.amount).to eq 50
expect(seventh_obligation.reloadamount).to eq 50
expect(seventh_obligation.reload.amount).to eq 50
exit!
print-accounting loan
current_obligation(date)
loan.current_obligation(date)
loan.current_obligation(date).interest_due
loan.current_obligation(date - 1 ).interest_due
exit!
current_interst
current_interest
print-accounting loan
exit!
print-accounting loan
current_itnerest
current_interest
loan.current_obligation(date - 1)
loan.current_obligation(date - 1).interest_due
print-accounting loan -b
print-accounting loan 
exit!
print-accounting loan
loan.current_obligation(date - 1).interest_due
exit!
reconcile_amount = reconcile_interest(today - 1)
edit reconcile_amount
edit reconcile_amount()
edit reconcile_amount(today)
edit @accountant
edit finalize_due_amounts
reconcile_amount = reconcile_interest(today - 1)
interest_accrued
obligation.interest_due
adjustments
exit!
interest_reversal
extra_adjustments
print-accounting loan
exit!
print-accounting loan
extra_adjustments
whereami
reconcile_amount = obligation.interest_due - interest_accrued + extra_adjustments
interest_accrued = calculate_interest_accrued(obligation)
reconcile_amount = obligation.interest_due - interest_accrued + extra_adjustments
print-accounting loan
reconcile_amount
called_due?
charged_off?
activity :unrecognized_interest, date, reconcile_amount
print-accounting loan
current_activity
whereami
me = activity :unrecognized_interest, date, reconcile_amount
print-accounting
print-accounting loan
print-accounting loan -b
whereami
assert_accounts interest_income: -initial_interest, interest_ar: 0
assert_accounts unrecognize_interest_income: -current_interest, unrecognized_interest: 0, co_unrecognized_interest: current_interest
account
loan.accountant.accounts.key?(account)
account
loan.accountant.accounts.key?(account)
account
loan.accountant.accounts.key?(account)
print-accounting loan
loan.accountant.accounts
print-accounting loan
whereami
assert_accounts interest_income: -current_interest, interest_ar: 0, unrecognized_interest_income: 0, unrecognized_interest: 0
create_billing_fee amount: 70, obligation: 3
print-accounting loan
whereami
charge_off amount: 1
print-accounting loan
whereami
create_end_of_cycle amount: 100, obligation: 3
edit loan.accountant.set_memos
create_end_of_cycle amount: 100, obligation: 3
memo
entry
activity
exit!
$its_pry_time
$its_pry_time = true
reconcile_amount
print-accounting loan
whereami
obligation.interest_due - interest_accrued + extra_adjustments
obligation.interest_due
interest_accrued
extra_adjustments
exit!
disable-pry
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
balance(:interest)
with_amount_check(balance(:interest)) { fail Error::InterestReversalFailed.new(loan.id) }
print-accounting loan
cancel cancel_new_draw
cancel_new_draw
exit!
balance
actual
print-accounting loan -b
exit
exit!
diff
print-accounting loan
print-accounting @accountant
diff
print-accounting loan
print-accounting @accountant
diff
548.7 - 445.07
exit!
print-accounting @accountant
diff
445.07 - 528.7
print-accounting @accountant -b
445.07 - 528.7
whereami
@accountant.past_due_obligations
@accountant.invalidate_default_calculator
@accountant.past_due_obligations
print-accounting loan
print-accounting @accountant
print-accounting @accountant -b
past_due_obligations
whereami
@accountant.invalidate_default_calculator
@accountant.past_due_obligations
print-accounting @accountant
loan
@accountant.loan
exit!
balance
actual
print-accounting loan -b
49.03 - 7.08
42.43 - 0.48
73.69 + 697.46 + 92.12 - 283.46 - 579.81
print-accounting loan
print-accounting loan -a end
exit!
adjusting
print-accounting 
loan
whereami
print-accounting -b
exit!
print-accounting loan
interest_reconciled?(today)
exit@
exit!
interest_reconciled?(today)
balance
actual
print-accounting loan
loan.current_obligation(Date.parse('2014-09-10'))
loan.current_obligation(Date.parse('2014-09-10')).interest_amount_due
loan.current_obligation(Date.parse('2014-09-10')).interest_due
exit!
amount
activity
activity_type
amount
activity_type
print-accounting loan
whereami
amount
caller
exit!
interest
print-accounting loan
obligation
adjustments
whereami
exit!
amount
interest
adjustments
whereami
exit!
interest_due_amount
task_name
edit perform_task
interest_due_amount
exit!
obligation
print-accounting loan
loan.obligations
loan.obligations.find(4)
loan.obligations.find(4).closed
whereami
obligation
obligations
obligations.interest_due
obligations.first.interest_due
print-accounting loan
loan.obligations.select(&:closed)
loan.obligations
exit!
interest_start_date
interest_start_date(obligation)
print-accounting loan
interest_start_date(obligation)
exit!
interest_start_date(obligation)
balance
actual
print-accounting loan
print-accounting loan -b
253.89 - 153.39
exit!
interest_start_date(obligation)
print-accounting loan
whereami
interest
adjustments
relevant_activities.select { |act| act.type?(:interest, :unrecognized_interest) }
relevant_activities.select { |act| act.type?(:interest, :unrecognized_interest) }.map(&:activity_amount)
relevant_activities.select { |act| act.type?(:interest, :unrecognized_interest) }.map(&:activity_amount).sum
whereami
print-accounting loan
print-accounting loan -b
exit!
balance
print-accounting loan
exit!
print-accounting loan
current_interest
print-accounting loan -b
whereami
print-accounting loan
loan.obligations
clear
.clear
print-accounting loan
eighth_obligation.interest_due
eighth_obligation.reload.interest_due
seventh_obligation.reload.interest_due
print-accounting loan -b
exit!
assert_accounts uncollected_interest: current_interest, interest_income: current_interest_income
print-accounting loan
loan.simulated_to
print-accounting loan
whereami
balance(:interest)
current_obligation(today - 1)
current_obligation(today - 1).interest_due
exit!
disable-pry
exit!
balance(:interest)
charged_off?
interest_due
print-accounting loan
whereami
adjusting
print-accounting
print-accounting -b
edit check_balance
print-accounting
whereami
current_activity
print-accounting -b
whereami
adjusting
current_activity
loan
exit!
running_daily
balance(:current) + balance(:currently_due)
print-accounting loan
exit!
whereami
paspast_unpaid_obligations(today, extra_payments: currently_paid)
past_unpaid_obligations(today, extra_payments: currently_paid)
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
provisional?
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
exit!
amount
amount_change_in_activity(activity, :principal, :fees_ar)
exit!
amount
edit calculate_early_payment
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
balance
actual
balance
actual
edit pay_due_amounts
print-accounting loan
print-accounting @accountant
diff
exit!
print-accounting loan
print-accounting @accountant
exit!
print-accounting loan
whereami
exit!
print-accounting loan
whereami
today
print-accounting
print-accounting loan
adjusting
current_activity
exit!
today
print-accounting loan
accounts
print-accounting loan -b
exit!
due_amounts
edit default_due_amounts
exit!
entries
due_amounts
exit!
amount
due_amounts
exit!
default_calculator.default_amount_on(today + 1)
default_calculator.past_due_obligations
@default_calculator
loan.obligations.first
loan.obligations.first.early_payment_amount
loan.obligations.find(2).early_payment_amount
whereami
current_obligation(Date.parse('2012-10-30'))
current_obligation(Date.parse('2012-10-30')).early_payment_amount
63.83 + 29.11
exit!
default_calculator.default_amount_on(today + 1)
edit amount_to_call_due
gs
balance
actual
balance
actual
balance
actual
print-accounting loan
loan
exit!
balance
actual
balance
actual
balance
actual
print-accounting loan
exit!
default_calculator.default_amount_on(today + 1)
default_calculator.past_due_obligations
@past_due_obligations
@default_calculator
print-accounting loan
@default_calculator
exit!
default_calculator.default_amount_on(today + 1)
print-accounting ;
print-accounting 
@default_calculator
exit!
balance
actual
balance
actual
obligation
print-accounting
whereami
amount
activity
exit!
balace
balance
actual
balance
actual
exit!
fees_ar_payment
whereami
accounts[:fees_ar]
whereami
fees_ar_payment
provisional
provisional?
print-accounting -b
whereami
[1,2,1].uniq
exit!
print-accounting loan
entry_types
print-accouting loan
print-accounting loan
blance
balance
print-accounting loan
.clear
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
default_calculator.default_amount_on(today + 1)
default_calculator.past_due_obligations
print-accounting 
print-accounting -b
whereami
print-accounting loan
print-accounting 
whereami
print-accounting loan
whereami
adjusting
print-accounting
end_of_cycle(today)
print-accounting
print-accounting loan
whereami
current_obligation(Date.parse('2014-07-18')
)
current_obligation(Date.parse('2014-07-18').interest_due
)
current_obligation(Date.parse('2014-07-18')).interest_due
loan
whereami
print-accounting loan
print-accounting
current_obligation(Date.parse('2014-07-18')).interest_due
current_obligation(Date.parse('2014-07-18'))
whereami
print-accounting loan
print-accounting
whereami
caller
.clear
@default_calculator
29.4 * 2
whereami
print-accounting loan
whereami
current_obligation(Date.parse('2014-07-18'))
exit!
amount
caller
whereami
activity_type
amount
activity_type
amount
caller
whereami
exit!
interest
adjustments
realized_interest
print-accounting 
amount
activity_type
amount
print-accounting
exit!
obligation
create_activity_and_reconcile_interest
whereami
obligation
exit!
amount
$its_pry_time = true
obligation
obligation.interest_due
interest_accrued = calculate_interest_accrued(obligation)
reconcile_amount = obligation.interest_due - interest_accrued + extra_adjustments
edit calculate_interest_accrued
interest_accrued = calculate_interest_accrued(obligation)
whereami
called_due?
charged_off?
exit!
obligatino
obligation
interest_start_date(obligation)
exit!
edit calculate_interest_accrued
interest - adjustments + realized_interest
interest
adjustments
realized_interest
print-accounting loan
balance
actual
whereami
disable-pry
loan.region
balance
actual
balance
actual
balance
actual
print-accounting loan
loan
exit!
rules
provisional_states
rules
exit!
provisional?
rules
Loaner::Config.accountant.oec.provisional_states
rules[:provisional] = Loaner::Config.accountant.oec.provisional_states
rules
exit!
provisional?
edit pay_customer_balance_first
edit pay_customer_balance_first?
print-accounting loan
whereami
print-accounting loan
\
;
.clear
exit!
print-accounting loan
exit!
print-accounting loan
loan.country
loan.accountant.provisional?
loan.accountant.rules.provisional?
exit!
print-accounting loan
loan.cluster
exit!
print-accounting loan
balance(:interest)
interest_due
print-accounting loan
exit!
today
loan.obligations
print-accounting
exit!
print-accounting
loan.obligations
exit!
obligation.billing_fee_assessed
adjusting && interest_assessed?(today) && accounts[:interest_ar] != FinanceXL::ZERO
obligation.use_discounted_interest_rate?(today)
daily_interest
accounts
exit!
loan.accountant.rules.provisional?
rules[:statement_interest_rate]
rules
daily_interest
edit daily_interest
exit!
loan.interest_rate
rules
whereami
accountant.interest_rate
interest_rate
exit!
loan
loan.interest_rate
loan.accountant.interest_rate
exit!
print-accounting loan
whereami
adjusting
print-accounting loan
exit!
adjusting
print-accounting
whereami
current_activity
reconcile_amount
interest_due
interest_due - reconcile_amount
print-accounting -b
197.18 -373.59
197.18 - 373.59
interest_due
exit!
today
exit!
interest
adjustments
realized_interest
interest - adjustments + realized_interest
adjusting
interest - adjustments + realized_interest
interest
print-accounting 
loan.obligations
whereami
obligation
loan.obligations.find(3).closed?
exit!
balance
adjusting
print-accounting loan
exit!
adjusting
print-accounting loan
balance
whereami
balance(:interest) == interest_due
balance(:interest)
interest_due
balance(:interest) - interest_due
adjusting
loan
exit!
adjusting
print-accounting loan
loan
balance
actual
pricipal
loan.accountant.accounts
whereami
print-accounting loan
loan.accountant.provisional?
loan.accountant.rules.provisional?
exit!
JSON.parse(File.read('/export/loaner/lib/exported_loans/test_suite/us_oec.json'))
JSON.parse(File.read('/export/loaner/lib/loans_to_export/test_suite/us_oec.json'))
loans = _
loans.each { |l| `git add mocks/mock_us_#{l}` }
JSON.parse(File.read('/export/loaner/lib/loans_to_export/test_suite/gb_oec.json'))
loans.each { |l| `git add mocks/mock_gb_#{l}` }
loan_ids = JSON.parse(File.read('/export/loaner/lib/loans_to_export/test_suite/gb_oec.json'))
loan_ids.each { |l| `git add mocks/mock_gb_#{l}` }
product
cluster
exit!
disable-rpy
disable-pry
exit
{a: 1, b: 2, c: 3}
hash = _
hash.any? { |m| m == 2 }
hash.any? { |m| puts m }
hash.any? { |_,m| m == 2 }
scope
scope.to_a
scope.class
edit initialize
activities
activities.group_by(&:effective_date)
activities
scope
scope.class
.group_by(&:effective_date)
scope.group_by(&:effective_date)
scope.group_by(:effective_date)
hash
hash.values.each { |v| v = 1 }
hash
hash.each_value { |v| v = 1 }
hash
hash.values
hash
a = 1
b = 2
c = 3
hash = {a: a, b: b, c: c}
hash.values.each { |v| v = 1 }
hash
a
b
c
hash.rehash
a = 2
hash.rehash
hash = {a: a, b: b, c: c}
a = 1
hash.rehash
exit!
disable-pry
&block
block
block.arity
block.methods
whereami
block.source
block.source_locatoin
block.source_location
block.to_s
exit!
disable-pry
act
exit!
act
exit!
@activities
@activities.values
exit!
@activities.values.flatten.each(&block)
disable-pry
@activities
loaded?
@activities.class?
@activities.class
caller
exit!
@activities = @activities.group_by(&:effective_date) unless loaded?
@activities.kind_of?(Hash)
loaded?
@activities
caller
exit!
activities
ActivitySet.new(@source_id, nil, activities)
exit!
activities
activities.delete_if { |_,act| act.effective_date > as_of }
loaded?
activities
loaded
loaded?
exit!
activities
ActivitySet.new(@source_id, nil, activities)
exit!
@activities
loaded?
as_of
@activities.delete_if { |date,_| date > as_of }
exit!
set = ActivitySet.new(@source_id, nil, activities)
loaded? && as_of
set
caller
whereami
!!
;
wtf!
wtf!?!
print-backtrace
print-back_trace
back_trace
exit!
caller
whereami
set
pry-backtrace
exit!
set
set.class
set.activities
set.instance_variable_get(&:activities)
set.instance_variable_get(:@activities)
exit!
set
exit!
disable-pry
loaded?
@activities
caller
exit!
@activities
caller
whereami
exit!
@activities
exit!
@activities
whereami
@activities
@activities.class
@activities = @activities.group_by(&:effective_date)
@activities
@activities.class
@activities = @activities.group_by(&:effective_date) unless loaded?
@activities.class
@activities.values.flatten
@activities
@activities.class
@activities
caller
whereami
@activities
loaded?
@activities.group_by(&:effective_date)
@activities.class
print-accounting
exit!
@activities.class
@activities = @activities.group_by(&:effective_date) unless loaded?
@activtities
@activities
caller
exit!
entries
entries.activities
entries.activities.all
caller
exit!
accountant
date
entries
@activities
exit
date
accountant.activities.effective_by(date)
accountant.activities.effective_by(date).activities
accountant.activities.effective_by(date).activities.to_a
accountant.activities.effective_by(date).loaded
accountant.activities.effective_by(date).loaded?
edit accountant.activities
edit accountant.activities.effective_by(date)
edit accountant.activities.effective_by
accountant.activities.effective_by(date)
edit accountant.activities.effective_by
accountant.activities.effective_by(date)
entries
disable-pry
exit!
print-accounting
current_obligation(today)
current_obligation(today).interest_due
current_obligation(today-1).interest_due
whereami
print-accounting -b
loan
exit!
today
exit!
accounts
print-accounting loan
print-accounting loan -b
print-accounting 
print-accounting
adjusting
exit!
print-accounting
adjusting
print-accounting loan
print-accounting
whereami
print-accounting loan
print-accounting
whereami
print-accounting loan
:wq
print-accounting
exit!
amount_to_charge_off
edit amount_to_charge_off
amount_to_charge_off
obligation = past_unpaid_obligations(today + 1).first
(today + 1) - obligation.due_date >= charge_off_days
balance(:charged_off)
end_of_cycle(date)
end_of_cycle(today + 1)
exit!
amount_to_charge_off
print-accounting
print-accounting loan
print-accounting
print-accounting loan
print-accounting
exit!
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
target_dates?
target_dates
whereami
date
todya
today
exit!
whereami
calculate_interest_accrued(current_obligation(today - 1)
)
print-accounting
whereami
calculate_interest_accrued(current_obligation(today - 1)
)
print-accounting
$its_pry_time = true
adjustments
edit
act = adjustments.first
amount_change_in_activity(act, :unrecognized_interest_income, :interest_income, :interest_income_recoveries)
act.entries
amount_change_in_activity(act, :unrecognized_interest_income, :interest_income_recoveries)
amount_change_in_activity(act, :unrecognized_interest_income, :interest_income, :interest_income_recoveries)
whereami
interest
act = adjustments.last
amount_change_in_activity(act, :unrecognized_interest_income, :interest_income, :interest_income_recoveries)
FinanceXL::ZERO.positive?
exit!
balance
actual
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
1973.01 + 208.97 + 107.85 - 1605.98
(1973.01 + 208.97 + 107.85) - 1605.98
(1973.01 + 208.97 + 107.85) - 2188.46
print-accounting loan
print-accounting loan -b
exit
exit!
amount
interest
print-accounting
whereami
adjustments
realized_interest
amount
edit
relevant_activities
edit
adjustments.size
print-accounting 
exit!
assert_loan_status :charged_off
print-accounting loan
forward date + 1
print-accounting loan
forward date + 2
print-accounting loan
forward date + 5
print-accounting loan
obligation = accountant.past_unpaid_obligations(date).first
today - obligation.due_date >= charge_off_days
date - obligation.due_date >= charge_off_days
date - obligation.due_date >= loan.accountant.rules.charge_off_days
date - obligation.due_date
obligation.due_date
obligation.due_date + 61
obligation.due_date + 61 - Date.today
Date.today + 86
loan
charge_off_date?(today)
charge_off_date?(today + 1)
charge_off_date?(today + 2)
loan.due_dates
Date.today + 86
Date.today + 89
charge_off_date?(Date.today + 89)
charge_off_date?(Date.today + 90)
charge_off_date?(Date.today + 88)
charge_off_date?(Date.today + 89)
charge_off_date?(Date.today + 90)
charge_off_date?(Date.today + 91)
charge_off_date?(Date.today + 92)
today
charge_off_date?(today)
charge_off_date?(today+3)
charge_off_days
charge_off_days + 1
loan.due_dates.first + 62
today + 1
charge_off_date?(today + 1)
today + 1
today - charge_off_dates + 1
today - charge_off_days + 1
loan.due_dates.include?(today - charge_off_days + 1)
loan.due_dates.include?(today - charge_off_days)
charge_off_date?(today -1)
charge_off_date?(today - 1)
print-accounting
whereami
obligation = past_unpaid_obligations(today - 1).first
today - obligation.due_date >= charge_off_days
balance(:outstanding) - balance(:charged_off)
exit!
loan
print-accounting loan
max
whereami
date + 1
loan.accountant.forward(date + 1)
today
loan.obligations
loan.obligations.sort
loan.obligations.sort.first
loan.obligations.sort.first.due_date
loan.obligations.sort.first.due_date + 60
loan.obligations.sort.first.due_date + 61
exit!
assert_loan_status :charged_off
obligation = past_unpaid_obligations(today).first
today - obligation.due_date >= charge_off_days
balance(:outstanding) - balance(:charged_off)
print-accounting loan
whereami
adjusting
reconcile_interest
whereami
balance(:interest)
print-accounting
whereami
exit!
balance(:interest)
print-accounting
whereami
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation)
calculate_interest_accrued(current_obligation(today))
interest
adjustments
interest - adjustments + realized_interest
whereami
reconcile_interest(today)
print-accounting loan
exit!
edit calculate_interest_accrued
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
loan.obligations
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
balance
actual
print-accounting loan
adjusting
whereami
current_activity
whereami
balance(:interest)
balance(:interest) / 0.24
reconcile_interest(today)
edit reconcile_interest
reconcile_interest(today)
obligation
calculate_interest_accrued(obligation)
print-accounting loan
whereami
obligatoin
obligation
date
exit@
exit!
edit reconcile_interest
print-accounting loan
exit
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
whereami
accounts[:interest_income] + accounts[:unrecognized_interest_income]
itnerest_accrued
interest_accrued
exit!
print-accounting loan
whereami
print-accounting loan
assert_accounts co_unrecognized_interest: after_charge_off[:co_unrecognized_interest] + 10
after_charge_off
after_charge_off[:co_unrecognized_interest]
print-accounting -b
after_charge_off[:co_unrecognized_interest]
exit!
print-accounting 
exit!
print-accounting loan
print-accounting
whereami
interest_accrued
obligation.billing_fee_assessed
adjusting
obligation.interest_due
options[:extra_adjustments]
obligation
exit!
interest_accrued
print-accounting
current_activity
interest_accrued
print-accounting
whereami
edit calculate_interest_accrued
calculate_interest_accrued(obligation)
interest
adjustments
exit!
interest_accrued = calculate_interest_accrued(obligation)
print-accounting
whereami
options[:extra_adjustments]
exit!
print-accounting loan -b
whereami
current_activity
whereami
loan.obligation
current_obligation(today)
current_obligation(today).closed
reconcile_interest(today)
print-accounting 
exit!
print-accounting
exit!
balance
actual
print-accounting loan
exit
exit!
print-accounting
print-accounting -b
whereami
entry_types = [[:disbursement_account, :late_fees_called_due],[:disbursement_account, :fees_called_due],[:disbursement_account, :principal_called_due]]
remaining_for_current =  waterfall! remaining_for_called_due, entry_types, limit: :credit
exit!
whereami
print-accounting loan
print-accounting 
today
whereami
today
current_activity
exit!
print-accounting loan
print-accounting loan -b
whereami
currently_paid
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
loan.obligations
exit!
amount
print-accounting
@default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
exit!
amount
activity
print-accounting 
loan.obligations
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
whereami
print-accounting 
print-accounting loan
exit!
print-accounting 
print-accounting loan
balance
print-accounting 
print-accounting loan
exit!
print-accounting laon
print-accounting loan
print-accounting loan -b
exit!
args.first[:amount]
override_amount(name, args.first[:amount])
loan
balance(:current) + balance(:currently_due)
print-accounting loan
exit!
whereami
balance(:current) + balance(:currently_due)
print-accounting loan
exit!
override_amount(name, args.first[:amount])
exit!
override_amount(name, args.first[:amount])
print-accounting loan
disable-pry
print-accounting loan
balance
actual
print-accounting loan
loan
loan.obligations
exit!
default_date?(today)
default_calculator = default_calculator_as_of(today + 1)
past_due_obligations = default_calculator.default_history && default_calculator.past_due_obligations
@default_calculator
default_calculator.default_amount_on(today + 1)
default_calculator.default_amount_on(today + 2)
exit!
disable-pry
print-accounting loan -b
disable-pry
balance
actual
print-accounting loan
print-accounting -h
print-accounting -b
print-accounting loan-b
print-accounting loan -b
print-accounting loan -a payoff
loan
exit!
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
balance
actual
print-accounting loan
balance
actual
print-accounting loan
loan
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit
exit!
cluster
LoanTester.test_cluster_and_loan_type(Cluster[cluster], 'oec')
LoanTester.test_cluster_and_loan_type(cluster, 'oec')
Rake::Task
Rake::Task[:default]
Rake::Task[:default].prerequisites
Rake::Task[:default].prerequisites.unshift :spec
exit!
Rake::Task[:default]
Loaner::Application.load_tasks
Rake::Task[:default]
exit!
print-accounting balance
print-accounting loan -b
balance
actual
loan
print-accounting loan -a end_of_cycle
print-accounting loan 
print-accounting loan -a payoff
.clear
print-accounting loan -a payoff
print-accounting loan -b
balance
actual
939.27 - actual
print-accounting loan -a reconcile
exit!
diff
print-accounting loan
print-accounting @accountant
loan.obligaitons
loan.obligations
@accountant.loan.obligations
@accountant.loan.obligations(true)
exit!
print-accounting loan
@accountant.loan.obligations
@accountant.current_obligation(Date.parse('2014-07-25'))
print-accounting loan -b
print-accounting @accountant.loan -b
print-accounting @accountant -b
exit!
print-accounting loan
exit!
print-accounting loan
reconcile 50
print-accounting loan
current_interest
interest_start_date(current_obligation(date))
loan.accountant.interest_start_date(loan.accountant.current_obligation(date))
pay_interest_in_reconcile?(date)
loan.accountant.pay_interest_in_reconcile?(date)
exit!
loan.accountant.pay_interest_in_reconcile?(date)
print-accounting loan
loan.accountant.pay_interest_in_reconcile?(date)
print-accounting loan
reconcile 50
print-accounting loan
exit!
exit
loan
print-accounting 
balance
whereami
balance(:interest)
interest_due
interest_due - 11.2
print-accounting loan
print-accounting loan -b
whereami
current_obligation(today - 1).billing_fee_assessed
current_activity
reconcile_amount = reconcile_interest(today - 1, accounting_date: today)
calculate_interest_accrued(current_obligation(today - 1))
print-accounting loan -b
print-accounting loan 
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today - 1))
amount
interest
adjustments
realized_interest
relevant_activities.select { |act| !act.cancelled? && act.type?(:reconcile) } 
print-accounting loan
lona
loan
exit!
adjusting
balance(:interest
)
balance(:interest)
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today - 1)
)
whereami
adjustments
realized_interest
relevant_activities.select(:cancel)
relevant_activities.select { |a| a.type?(:cancel) }
relevant_activities.select { |a| a.type?(:cancel) }.last
act = relevant_activities.select { |a| a.type?(:cancel) }.last
entry_type = FinanceXL::EntryType.find_by_accounts(:interest_ar, :customer_balance)
rules.pay_interest_in_reconcile?
act.entries.map { |e| e.entry_type_id == entry_type.id ? amount : FinanceXL::ZERO }
act.entries.select { |e| e.entry_type_id == entry_type.id ? amount : FinanceXL::ZERO }
act.entries.select { |e| e.entry_type_id == entry_type.id ? amount : FinanceXL::ZERO }.first
act.entries.select { |e| e.entry_type_id == entry_type.id ? amount : FinanceXL::ZERO }.first.amount
exit!
print-accounting loan
exit!
edit calculate_interest_accrued
current_obligation(today - 1)
edit calculate_interest_accrued
whereami
exit!
realized_interest
adjustments
whereami
exit!
adjustments
adjustments + realized_interest
interest
interest - adjustments + realized_interest
print-accounting 
exit!
interest
adjustments
interest - adjustments + realized_interest
exit!
interest - adjustments + realized_interest
print-accounting loan
whereami
balance
actual
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
exit!
exit!
file_name
exit!
balance(:interest)
interest_due
.billing_fee_assessed
current_obligation(today - 1).billing_fee_assessed
print-accounting loan
loan
whereami
reconcile_interest(today - 1, accounting_date: today)
calculate_interest_accrued(current_obligation(today - 1))
current_obligation.interest_due
current_obligation(today - 1).interest_due
edit reconcile_interest
reconcile_interest(today - 1, accounting_date: today)
reconcile_amount
reconcile_amount = reverse_interest_entry(reconcile_amount.abs)
reverse_interest_entry(reconcile_amount.abs)
edit reverse_interest_entry
reverse_interest_entry(reconcile_amount.abs)
edit reverse_interest_entry
reverse_interest_entry(reconcile_amount.abs)
reconcile_amount
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
whereami
balance(:interest) == interest_due
balance(:interest)
interest_due
reconcile_amount
current_obligation(today - 1).billing_fee_assessed
reconcile_interest(today - 1, accounting_date: today)
print-accounting loan
exit!
edit check_diverging_balances
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -a charge_off
print-accounting loan -a call_due
loan
print-accounting loan
whereami
@default_calculator
default_calculator_as_of(today)
default_calculator_as_of(today).past_unpaid_obligations
whereami
print-accounting loan
whereami
loan
activity
amount
activity.effective_date
result[:obligation]
loan.obligations.sort
whereami
print-accounting loan
obligation.early_payment_amount
result[:obligation].early_payment_amount
result[:obligation]
result[:obligation].reload.early_payment_amount
exit
amount
activity
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
whereami
obligation
exit!
obligation
early_payments
obligation = previous_obligation(obligation.start_date) if apply_early_payment_to_previous_obligation?(filter_activity, early_payments.last)
obligation = current_obligation(filter_activity.effective_date)
amount
obligation
result[:obligation]
exit!
balance
actual
print-accounting loan
whereami
disable-pry
obligation
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
early_payment
print-accounting
whereami
obligation
activity
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
amount
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
amount
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
early_payment
obligation
exit!
reconciles
print-accounting loan
whereami
early_payments
print-accounting
adjusting
whereami
caller
current_activity
whereami
activity
results
early_payments
reconciles
early_payments
results
arr = [1,2,3]
arr[1..-1]
arr.unshift[6]
arr
arr.unshift[nil]
exit!
early_payments
results
results.flatten
print-accounting loan
results
print-accounting
results
print-accounting 
whereami
results
print-accounting loan
whereami
balance(:interest)
interest_due
current_activity
whereami
print-accounting loan -b
.clear
whereami
print-accounting loa
print-accounting loan
exit!
activity
obligation
amount
early_payments
early_payments.last
amount
obligation
early_payment
obligation = previous_obligation(early_payment)
whereami
obligation = previous_obligation(early_payment.effective_date)
previous_obligation(obligation.start_date)
obligation.start_date
previous_obligation(obligation.start_date)
current_obligation(obligation.start_date)
exit!
obligation
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
print-accounting 
whereami
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
filter_activity
early_payment
apply_early_payment_to_previous_obligation?(filter_activity, early_payment)
filter_activity.type?(:payoff)
amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due).abs > FinanceXL::ZERO
amount_change_in_activity(activity, :fees_ar, :principal, :principal_called_due, :fees_called_due).abs > FinanceXL::ZERO
print-accounting loan
exit!
obligation
exit!
result[:obligation]
result[:obligation].id
activity
unreconciled_early_payments(activity)
current_obligation(unreconciled_early_payments(activity))
current_obligation(unreconciled_early_payments(activity).last)
unreconciled_early_payments(activity).last
current_obligation(unreconciled_early_payments(activity).last.effective_date)
exit!
print-accounting loan
exit!
print-accounting loan
date
exit!
print-accounting loan
date
exit!
print-accounting loan
example
exit!
example
whereami
example.example_group
example.example_group.description
Date.parse(example.example_group.description)
@date
ls
exit!
@date
create_end_of_cycle amount: 100, obligation: 1
loan.obligations
exit!
loan.obligations
exit!
loan.obligations
exit!
loan.obligations
print-accounting loan
exit!
loan
print-accounting loan
loan.obligations
exit!
print-accounting loan
first_obligation.early_payment_amount
exit!
print-accounting loan
exit!
print-accounting
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
expect(first_obligation.reload.early_payment_amount).to eq initial_early_payment_amount + early_payment_amount +  50
print-accounting loan
accountant.unreconciled_early_payments(reconcile_activity)
loan.accountant.activities.find((reconcile_activity)
)
loan.accountant.activities.find(reconcile_activity)
loan.accountant.activities.find(reconcile_activity).first
loan.accountant.activities.find { |a| a.activity_id == reconcile_activity)
loan.accountant.activities.find { |a| a.activity_id == reconcile_activity }
loan.accountant.activities.find { |a| a.task_id == reconcile_activity }
reconcile_activity = loan.accountant.activities.find { |a| a.task_id == reconcile_activity }
accountant.unreconciled_early_payments(reconcile_activity)
exit!
results
print-accounting
exit!
results
results.select! { |payment, amount| amount == activity.activity_amount }
results.select! { |(payment, amount)| amount == activity.activity_amount }
results.flatten
results
exit!
results
results.flatten
results.flatten(1)
results.select { |payment, amount| amount == activity.activity_amount }
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }
results.flatten(1).select! { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
exit!
results
activity.activity_amount
activity
print-accounting
activity
results
results.flatten(1).select! { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
activity.activity_amount
results.flatten(1).select! { |payment, amount| amount == activity.activity_amount }
exit!
caller
activity
results
activity
caller
activity
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }
results
results.flatten(1).last { |payment, amount| amount == activity.activity_amount }
results.flatten(1).last 
results.flatten(1) 
results.flatten(1).last { |payment, amount| amount == activity.activity_amount }
results
early_payments
early_payments[pos..-1]
early_payments[1..-1]
exit!
reconciles
results
early_payments[pos..-1]
[early_payment, amount]
exit!
edit unreconciled_early_payments
results
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
results
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
results
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
results
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
activity.activity_amount
print-accounting loan
exit!
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
print-accounting loan
whereami
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
results
disable-pry
print-accounting loan
results
results.flatten(1).select { |payment, amount| amount == activity.activity_amount }.map { |payment, amount| payment }
results
print-accounting loan
whereami
current_activity
print-accounting loan
print-accounting loan -b
whereami
activity
obligation
early_payments
results
exit!
balance
actual
print-accounting loan
exit!
print-accounting loan -b
balance
actual
exit!
print-accounting loan
print-accounting @accountant
loan
@accountant.loan
exit!
results
exit!
result[:obligation]
print-accounting loan
activity
unreconciled_early_payments(activity)
edit unreconciled_early_payments
unreconciled_early_payments(activity)
early_payments
results
previous_obligation(obligation.start_date)
early_payments
reconciles = activities.select do |act| act != activity && act.type?(:reconcile) && !act.cancelled? && act.effective?(obligation.start_date..activity.effective_date) end
reconcile = reconciles.find { |act| act.activity_amount == amount && act.effective_date >= early_payment.effective_date }
results
results.flatten(1).select { |_, amount| amount == activity.activity_amount }.map { |payment, _| payment }
results
activity
exit!
print-accounting loan
whereami
first_obligation.reload.early_payment_amount
initial_early_payment_amount + early_payment_amount
exit!
unreconciled_tasks
print-accounting loan
exit!
print-accounting
exit!
caller
whereami
print-accounting
print-accounting loan
current_activity
whereami
caller
whereami
print-accounting
print-accounting loan
loan
print-accounting loan -b
print-accounting loan 
exit!
print-accounting loan
whereami
task_id
activity_to_cancel
exit!
balance
actual
print-accounting loan
print-accounting loan -a call_due
exit!
print-accounting loan
whereami
interest_due
balance(:interest)
print-accounting loan -b
whereami
balance(:interest)
accounts
exit!
print-accounting
whereami
print-accounting loan -b
accounts
print-accounting 
print-accounting -b
print-accounting
exit!
chages
changes
print-accounting 
accounts
exit!
print-accounting
accounts
print-accounting
accounts
print-accounting
accounts
print-accounting
accounts
print-accounting
accounts
accounts -b
print-accounting -
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
print-accounting -b
accounts
current_activity
current_activity.entries
id
date
today
exit!
print-accounting loan
whereami
balance(:interest)
interest_due
current_obligation(today - 1).interest_due
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today - 1))
whereami
interest
realized_interest
adjustments
print-accounting loan
whereami
interest
adjustments
whereami
print-accounting loan -b
102.27 - 91.07
print-accounting loan
whereami
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today - 1))
relevant_activities
.clear
edit
amount
whereami
amount
whereami
.clear
whereami
edit
whereami
today
edit
print-accounting loan
whereami
interest
10.4 + 0.8
whereami
activity = FinanceXL::Activity.find(101)
act = FinanceXL::Activity.find(101)
amount = amount_change_in_activity(act, :unrecognized_interest_income, :interest_income, :interest_income_recoveries)
rules.pay_interest_in_reconcile? && act.cancels_activity.type?(:payoff)
act.entries.map { |e| e.entry_type_id == entry_type.id ? -e.amount : FinanceXL::ZERO }.sum
entry_type = FinanceXL::EntryType.find_by_accounts(:interest_ar, :customer_balance)
act.entries.map { |e| e.entry_type_id == entry_type.id ? -e.amount : FinanceXL::ZERO }.sum
print-accounting loan
exit!
edit calculate_interest_accrued
activity
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
whereami
edit unreconciled_early_payments
unreconciled_early_payments(activity)
results
results.flatten(1).select do |payment, amount|
  amount == activity.activity_amount ||
  activity.entries.any? { |e| e.amount == amount }
end.map { |payment, _| payment }
whereami
result[:obligation]
amount
edit unreconciled_early_payments
edit update_early_payments
unreconciled_tasks
accountant.unreconciled_early_payments(reconcile_activity)
print-accounting loan
exit!
unreconciled_tasks
print-accounting loan
print-accounting loan -b
reconcile = reconcile 75
reconcile_activity = accountant.activities.find { |a| a.task_id == reconcile }
unreconciled_tasks = accountant.payments_to_reconcile(reconcile_activity).map(&:task_id)
print-accounting loan
exit!
unreconciled_tasks
expect(unreconciled_tasks).to eq [first, second, third]
print-accounting loan
reconcile = reconcile 75
whereami
edit accountant.payments_to_reconcile(reconcile_activity)
edit accountant.payments_to_reconcile
reconcile_activity = accountant.activities.find { |a| a.task_id == reconcile }
print-accounting loan
unreconciled_tasks = accountant.unreconciled_early_payments(reconcile_activity).map(&:task_id)
exit!
arr = [[1,2], [3,4], 5,6]]
arr = [[1,2], [3,4], [5,6]]
arr.each { |(a,b),name| puts name }
arr.each { |(a,b),name| puts a,b, name }
arr.each { |a| puts a }
arr.each { |(a)| puts a }
arr.each { |a,b| puts a,b }
arr.each { |(a,b)| puts a,b }
arr.each { |(a,b)| puts b }
arr.each { |(a,b)| puts a }
arr.each { |(a,b)| binding.pry }
ls
to_s
a
b
exit!
arr = [[1,2], [3,4], 5,6]]
arr = [[1,2], [3,4], [5,6]]
a = [1,2]
b = [3,4]
arr.delete(a,b)
arr.delete(a)
arr
exit!
pending_reconciles
print-accounting loan
whereami
unreconciled_payments
exit!
unreconciled_payments
print-accounting loan
exit!
print-acounting loan
print-accounting loan
edit accountant.payments_to_reconcile
accountant.payments_to_reconcile(reconcile_activity)
unreconciled_payments
print-accounting loan
whereami
unreconciled_payments
pending_reconciles
exit!
reconciles
[results.flatten(1), reconciles]
results
[results.flatten, reconciles]
exit
edit accountant.payments_to_reconcile
accountant.payments_to_reconcile(reconcile_activity)
pending_reconciles
pending_reconciles.uniq
exit!
print-accounting loan
reconciles
pending_reconciles
activity
exit!
reconciles
activity
reconcile.first
reconciles.first
early_payments
edit unreconciled_early_payments
exit!
reconcile
reconciles.unshift(reconcile)
reconciles
exit!
reconciles
reconcile
print-accounting
whereami
unreconciled_tasks
first
print-accounting loan
loan
print-accounting loan
whereami
balance(:interest)
interest_due
current_activity
caller
whereami
current_obligation(today - 1).billing_fee_assessed
reconcile_amount = reconcile_interest(today - 1, accounting_date: today)
print-accounting loan
whereami
balance(:interest) - 0.88
interest_due
exit!
interest
adjustments
realized_interest
rules.pay_interest_in_reconcile? && act.cancels_activity.type?(:payoff)
rules.pay_interest_in_reconcile? 
exit!
edit calculate_interest_accrued
print-accounting loan
balance(:interest)
interest_due
110.19 - 108.75
print-accounting loan -b
110.19 - 108.75
exit!
balance(:interest)
interest_due
print-accounting loan
loan
exit!
balance(:interest)
exit!
print-accounting loan
exit!
print-accounting loan
loan.obligations(Date.parse('2014-07-15'))
loan.current_obligation(Date.parse('2014-07-15'))
loan.current_obligation(Date.parse('2014-07-15')).interest_due
loan.current_obligation(Date.parse('2014-07-15') - 1).interest_due
print-accounting loan -b
whereami
balance(:interest)
interest_due
current_activity
today
exit!
print-accounting loan
whereami
interest_due
interest_due = current_obligation(today - 1).interest_due
edit calculate_interest_accrued
current_obligation(today - 1)
calculate_interest_accrued(current_obligation(today - 1))
interest
adjustments
realized_interest
relevant_activities
exit!
print-accounting loan
print-accounting loan -b
interest_accrued
exit!
interest_accrued
interest_paid
print-accounting loan
entry_type = FinanceXL::EntryType.find_by_accounts(:interest_ar, :customer_balance)
reconcile_activity.entries.map { |e| e.entry_type_id == entry_type.id ? -e.amount : FinanceXL::ZERO }.sum
reconcile_activity
reconcile_activity.entries
print-accounting loan
exit!
jprint-accounting loan
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
forward second_obligation.target_date + 2
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting
print-accouning
print-accounting
current_activity
whereami
print-accounting
future_reconciles
exit!
print-accounting loan
exit!
interest_already_accrued
interest_already_paid
[initial_accounts[:interest_ar] - interest_already_paid, remainder].min
print-accountin gloan
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit
print-accounting loan
exit!
print-accounting loan
whereami
balance(:interest)
exit~
!
exit!
edit check_balance
print-accounting loan
adjusting
current_activity
exi!
exit!
print-accounting loan
exit!
print-accounting loan
whereami
payments_to_reconcile(current_activity).first
payments_to_reconcile(current_activity)
current_activity
edit payments_to_reconcile
payments_to_reconcile(current_activity).first
unreconciled_payments
pending_reconciles
find_early_payments(today)
exit!
print-accounting
whereami
adjusting
current_activity
print-accounting loan
exit!
edit payments_to_reconcile
print-accounting loan
loan.country
loan.accountant.rules.pay_interest_in_reconcile?
loan.cluster
print-accounting -b
whereami
create_end_of_cycle amount: 200, obligation: 1
exit!
print-accounting loan
current_activity
current_activity.entries
whereami
current_obligation(today - 1)
balance(:interest)
interest_due
exit!
print-accounting loan
balance
actual
exit!
balance
actual
print-accounting loan
exit!
loan.accountant.rules.pay_interest_in_reconcile?
exit!
pay_interest
exit!
balance
actual
print-accounting balance
print-accounting loan
print-accounting loan -b
exit!
balance
actual
print-accounting loan
exit!
print-accounting accountant
print-accounting loan
whereami
payment_activity
payments_to_reconcile(current_activity)
current_activity
print-accounting loan
print-accounting accountant
print-accounting accountant -b
wherami
whereami
[accountant.accounts[:interest_ar], remainder, accounts[:interest_ar]].min
accountant.accounts[:interest_ar]
accountant
accountant.calculate_account_valuees
accountant.calculate_account_values
[accountant.accounts[:interest_ar], remainder, accounts[:interest_ar]].min
print-accounting loan
exit!
print-accounting loan
whereami
exit@
exit!
print-accounting loan
[accountant.accounts[:interest_ar], remainder, accounts[:interest_ar]].min
print-accounting loan
print-accounting -b
exit!
print-accounting 
print-accounting loan
whereami
balance(:interest)
exit!
print-accounting loan
@default_calculator
default_calculator_as_of(today).past_due_obligations
@default_calculator
dc = default_calculator_as_of(today).default_history
wherami
whereami
dc.past_due_obligations
dc = default_calculator_as_of(today)
whereami
pritn-accounting loan
print-accounting 
whereami
dc.past_due_obligations
dc = default_calculator_as_of(today)
today
dc = default_calculator_as_of(today)
dc = default_calculator_as_of(today).default_history
dc = default_calculator_as_of(today)
print-accounting loan
dc
dc = default_calculator_as_of(today)
dc.default_history
dc
print-accounting
dc
whereami
print-accounting loan
dc
dc = default_calculator_as_of(today)
dc.default_history
dc
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
unpaid_obligations
@default_calculator
dc.default_history
invalidate_default_calculator
dc = default_calculator_as_of(today)
whereami
dc.default_history
dc
current_activity
invalidate_default_calculator
unpaid_obligations = past_unpaid_obligations(today - 1, extra_payments: [{ date: today, amount: amount }])
invalidate_default_calculator
unpaid_obligations = past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
invalidate_default_calculator
unpaid_obligations = past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
amount
@default_calculator
unpaid_obligations = past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
today
whereami
invalidate_default_calculator
unpaid_obligations = past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])
@default_calculator
whereami
exit!
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
77.25 + 1.28
3821.78 + 2068.27
3821.78 + 2068.27 + 267.28
636.30 + 73.43 + 436.31 + 26.57 - 1044.47
636.30 + 73.43 + 436.31 + 26.57 + 139.14 - 1044.47 
balance
actual
print-accounting loan
print-accounting loan -b
67.86 + 19.32
6223.93 + 450 + 1957.72
450.0 + 1341.02 - 124.88 - 225 - 166.5 - 225 - 1049.64
exit
print-accounting loan
loan.defaults
assert_defaults size: 1
edit assert_defaults
assert_defaults size: 1
defaults = loan.defaults.dup.to_a if params[:defaults]
return unless size > 0
size
params[:defaults]
params[:defaults].each
exit!
loan.payments
loan.payments(true)
exit!
print-accounting loan
activity
whereami
result[:obligation]
activity
print-accounting loan
loan
whereami
edit payments_to_reconcile
payments_to_reconcile(activity)
whereami
pending_reconciles
reconciled_payments
unreconciled_payments
payments
result[:obligation]
exit!
edit payments_to_reconcile
early_payment
obligation = current_obligation(early_payment.effective_date)
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
print-accounting loan
whereami
obligation.early_payment_amount
amount
print-accounting loan
whereami
amount
print-accounting loan
whereami
result[:amount]
print-accounting loan
whereami
amount
loan.obligations
loan.obligations.map(&:early_payment_amount)
result[:obligation]
loan.obligations
amount
print-accounting loan
print-accounting loan -b
interest_to_pay_in_reconcile(remainder)
print-accounting loan
whereami
adjusting
activity
whereami
current_activity
print-accounting 
amount
loan
current_activity
whereami
print-accounting -b
print-accounting 
print-accounting -b
whereami
balance(:interest)
print-accounting loan
current_activity
current_activity.entries
print-accounting loan
loan
print-accounting loan -b
53.17 + 110.4 + 100.96
53.17 + 110.4 + 100.96 + 2.86
53.17 + 110.4 + 100.96 - 2.86
whereami
balance(:interest)
print-accounting loan
print-accounting loan -b
whereami
balance(:interest)
current_activity
current_activity.entries
adjusting
print-accounting
print-accounting -b
print-accounting loan
whereami
loan.obligations
today
current_activity
print-accounting
print-accounting -b
whereami
adjusting
exit!
print-accounting
print-accounting loan
exit!
print-accounting accountant
adjusting_activity
adjusting_activity.cancels_activity
print-accounting accountant
adjusting_activity.cancels_activity
whereami
@start_date
print-accounting loan
print-accounting 
whereami
print-accounting 
adjusting_activity
adjusting_activity.cancels_activity
print-accounting
whereami
print-accounting loan
print-accounting accountant
loan.obligaitons
loan.obligations
accountant.loan.obligations
print-accounting
interest_to_pay_in_reconcile(remainder)
exit!
interest_to_pay_in_reconcile(remainder)
print-accounting loan
adjusting
current_activity
loan
whereami
interest_to_pay_in_reconcile(remainder)
edit interest_to_pay_in_reconcile
interest_to_pay_in_reconcile(remainder)
print-accounting accountant
print-accounting accountant -b
wheram
wherami
whereami
exit!
[accountant.accounts[:interest_ar], remainder, accounts[:interest_ar]].min
print-accounting loan
whereami
reconcile_amount = reconcile_interest(today)
print-accounting
print-accounting loan
print-accounting
print-accounting loan 
print-accounting 
print-accounting -b
print-accounting loan
print-accounting 
whereami
calculate_interest_accrued(current_obligation(today)
)
current_obligation(today).interest_due
reconcile_amount = reconcile_interest(today)
[accountant.accounts[:interest_ar], remainder, accounts[:interest_ar]].min
print-accounting loan
print-accounting loan 
print-accounting loan -b
exit!
amount
print-accounting 
print-accounting loan
print-accounting 
whereami
print-accounting loan
current-activity
current_activity
loan
exit!
print-accounting loan
balance
actual
pritn-accounting loan
print-accounting loan
print-accounting loan -b
balance
1450 + 12 + 49.39 + 256.5 + 12 
balance
actual
print-accounting loan
loan.provisional
loan.provisional?
loan.accountant.provisional?
loan.accountant.rules.provisional?
exit!
balance
actual
print-accounting loan
exit!
fee_payment
rules.billing_fees
loan.region
exit!
fee_payment
disable-pry
balance
actual
print-accounting loan
loan
print-accounting loan  -b
print-accounting loan 
print-accounting loan -b
exit!
print-accounting loan 
print-accounting loan -b
balance
actual
print-accounting loan
print-accounting loan -b
loan
print-accounting loan -a reconcile
print-accounting loan 
exit
balance
actual
print-accounting loan
print-accounting loan -b
loan.accountant.rules.billing_fees?
loan
print-accounting loan
loan.accountant.rules.provisional?
loan.accountant.rules.billing_fees?
exit!
print-accounting lona
print-accounting loan
loan.accountant.provisional?
loan.accountant.rules.provisional?
loan.region
print-accounting loan
loan
print-accounting loan
balance(:interest)
interest_due
rules.provisional
wherami
whereami
current_obligation(today - 1).billing_fee_assessed
print-accounting loan
whereami
interest_due = current_obligation(today - 1).interest_due
loan
reconcile_interest(today - 1, accounting_date: today)
called_due
called_due?
charged_off?
print-accounting loan -b
print-accounting loan
@default_calculator
dc = default_calculator_as_of(Date.today)
dc = default_calculator_as_of(today)
dc.default_history
dc
print-accounting loan
loan.obligations
whereami
dc
loan.obligations
loan.obligations.sort
whereami
print-accounting loan
adjusting
loan.current_obligation(today)
loan.current_obligation(today).early_payment_amount
loan.current_obligation(today).reload.early_payment_amount
loan.current_obligation(today-1).early_payment_amount
today
dc
invalidate_default_calculator
dc = default_calculator_as_of(today)
dc.default_history
dc
called_due
called_due?
print-accounting loan
print-accounting loan -b
in_default?
current?
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
a,b,c = nil
c
b
a
print-accounting loan
exit
print-accounting loan b-
print-accounting loan -b
print-accounting loan 
print-accounting loan -a charge_off
print-accounting loan 
print-accounting loan -a charge_off
print-accounting loan 
print-accounting loan -b
print-accounting loan 
print-accounting loan -a charge_off
print-accounting loan -b
exit!
print-accounting loan
balance
actual
print-accounting loan -b
print-accounting loan
loan
balance
actual
print-accounting loan -b
1120.5 - 71.96
3221.02 - 82.85
3210.13 - 71.96
balance
print-accounting loan -b
exit!
diff
print-accounting loan
print-accounting @accountant
diff
exit!
balances[loan_id][ar_account][:account]
balances[loan_id][ar_account]
balances[loan_id]
balances
correct_balance = balances.find { |balance| balance[:cnuapp_loan_id] == loan_id && balance[:account] == ar_account }
correct_balance[:amount] = correct_balance[:amount].to_d + ignored_balance[:amount].to_d
balances.delete(ignored_balance)
diff
print-accounting loan
disable-pry
transformed_balances
.first
transformed_balances.first
transformed_balances.first.amount
transformed_balances.first[:amount]
transformed_balances.first[:amount].to_d
expect(transformed_balances.first[:amount].to_d).to eq(provisional_balance[:amount].to_d + ar_balance[:amount].to_d)
provisional_balance[:amount].to_d + ar_balance[:amount].to_d
provisional_balance
ar_balance
exit~
!
exit!
transformed_task
expect(transformed_task[:amount]).to eq(task[:principal_amount])
transformed_task[:amount]
exit!
balance
actual
print-accounting loan
print-accounting loan -b
865.95 + 450.94
290 + 95.49 + 323.35
290 + 95.49 + 323.35 - 10
balance
actual
print-accounting loan
exit!
loan.accountant.rules.provisional?
loan.accountant.rules.billing_fees?
loan.accountant.rules.billing_fee?
loan.accountant.rules.billing_fees
exit~
exit!
balance
actual
print-accounting loan
print-accounting loan -b
exit!
balance
actual
print-accounting loan
loan
loan.accountant.rules.provisional?
exit!
print-accounting loan
balance
actual
loan.accountant.accounts
exit!
loan
print-accounting loan
exit!
print-accounting loan
options
print-accounting loan
loan.accountant.rules.provisional?
exit!
fees_called_due_payment
rules.billing_fees?
exit!
fee_payment
balance
actual
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
balance
708.84 - 698.84
balance
actual
loan.accounts
loan.accountant.accounts
balance
actual
print-accounting loan
print-accounting loan -b
balance
actual
print-accounting loan
loan
print-accounting loan -b
print-accounting loan 
loan
balance
actual
balance
actual
print-accounting loan -b
balance
actual
print-accounting loan
edit accountant.payments_to_reconcile
accountant.payments_to_reconcile(reconcile_activity)
reconciled_payments
pending_reconciles
unreconciled_payments
exit!
unreconciled_payments
pending_reconciles
whereami
print-accounting loan
unreconciled_payments
activity
unreconciled_payments
print-accounting
whereami
unreconciled_tasks
edit payments_to_reconcile
edit
exit
edit
exit!
chunks
chunks * 10
chunks = [[]] * 10
chunks
end_position
loan.obligations
obligations
middle
date
date < obligation.start_date
obligation
middle
obligation
date < obligation.start_date
date > obligation.target_date
caller
whereami
date
start_position
end_position
date < obligation.start_date
date > obligation.target_date
date
obligation
date
caller
whereami
obligation
print-accounting
caller
whereami
date
date > obligation.target_date
date < obligation.start_date
end_position
middle
loan.obligations
obligations
loan = Loan.first
loan.obligations
loan.obligations.first.amount = 100
loan.obligations
loan.obligations.first.save
loan.obligations
clear
.clear
ob = loan.obligations.first
ob.amount = 200
ob.save
ob.save!
loan.obligations
ob
whereami
loan.contractual_obligations
ob = loan.contractual_obligations.first
ob.amount = 200
ob.save!
loan.contractual_obligations
exit!
contractual_obligations
@current_obligation
contractual_obligations
contractual_obligaitons
contractual_obligations
date
whereami
start_position
end_position
obligation = contractual_obligations[middle]
exit!
date
contractual_obligations
obligation
date < obligation.start_date
end_position
obligaiton
obligation
date
start_position
end_position
middle
loan.obligations
contractual_obligations[middle]
date < obligation.start_date
date > obligation.target_date
exit!
disable-pry
contractual_obligations
edit previous_obligation
exit!
contractual_obligations
date
current_obligation_number(date) - 1
exit!
obligation
date
contractual_obligations
obligation
date
contractual_obligations
date
obligation
date
whereami
date
contractual_obligations
obligation
date
print-accounting loan
exit!
date
contractual_obligations
caller
whereami
contractual_obligations
middle
caller
whereami
date
contractual_obligations
middle
obligation = contractual_obligations[middle]
exit!
caller
ls
whereami
current_activity
date
print-accounting loan
print-accounting 
whereami
caller
exit!
whereami
caller
whereami
date
contractual_obligations
middle
date
print-accounting
whereami
date
caller
exit!
caller
date
print-accounting loan
print-accounting
whereami
middle
start_position
obligation = contractual_obligations[middle]
date
date < obligation.start_date
end_position
date > obligation.target_date
exit!
date
caller
whereami
date
contractual_obligations
date
middle
end_position
start_position
end_position
middle >= end_position
middle
middle >= end_position
date
obligation = contractual_obligations[middle]
date
middle
exit!
@last_obligation
$its_pry_time
caller
exit!
obligation
date
obligation
date
obligation = previous_obligation(date)
print-accounting loan
date
contractual_obligations
whereami
loan.obligations
loan.contractual_obligations
date
loan.in_obligations_window?(date)
loan.current_obligation_number(date)
date
whereami
exit!
date
whereami
date
obligation = previous_obligation(date)
loan.obligations
@last_obligation
date
whereami
date
obligation.closed
date
print-accounting 
exit!
date
contractual_obligations
loancontractual_obligations
loan.contractual_obligations
date
exit!
date
loan.contractual_obligations
obligation = previous_obligation(date)
obligation = current_obligation(date)
loan.in_obligations_window?(date)
loan.current_obligation_number(date)
obligation = previous_obligation(date)
exit!
caller
pritn-accounting loan
print-accounting 
whereami
exit!
type
amount
caller
print-accounting loan
loan
whereami
adjusting
exit!
print-accounting loan
exit!
print-accounting loan
whereami
print-accounting loan
accountant.activities
call_due
whereami
call_due
whereami
edit call_due
exit!
call_due
print-accounting loan
exit!
tye
type
adjusting
exit!
type
print-accounting loan
exit!
balance(:interest)
interest_due
obligation.billing_fee_assessed
obligation
obligation.interest_due
obligation.reload.interest_due
print-accounting loan
print-accounting 
today
whereami
billing_fee_assesed
obligation.billing_fee_assesed
obligation.billing_fee_assessed
obligation
loan.obligations
loan.contractual_obligations
loan.contractual_obligationstoday
today
loan
print-accounting loan
exit!
transformed_balances
exit!
balance(:interest)
interest_due
reconcile_amount
252.03 - 3.91
print-accounting loan
exit!
balance
actual
1483.14 - 1479.77
print-accounting loan -b 
print-accounting print-accounting loan
print-accounting loan -b 
loan
print-accounting loan 
exit!
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
today
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
print-accounting 
exit!
amount_to_default
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
whereami
accounts
with_amount_check(amount_to_default)               { |amount| activity :default,               today + 1, amount }
current_activity
activities.last
activities
exit!
amount_to_default
whereami
accounts
exit!
amount
due_amounts
obligation_target_date
past_due_obligations(today)
obligation = past_due_obligations(today).last
due_amounts = due_amounts_of_obligation(credit_accounts, obligation.target_date)
exit!
due_amounts
print-accounting loan
balance
actual
print-accounting loan
balance
actual
1483.14 - 1479.77
33.09 - 33.15
exit!
print-accounting
whereami
start_date = latest_interest_payment_date(obligation.start_date, activity.effective_date)
applied_on = obligation.discounted_rate_applied_on
obligation.discounted_rate_enabled = true
obligation.save! && invalidate_default_calculator
save!
print-accounting loa
print-accounting loan
whereami
start_date
start_date = latest_interest_payment_date(obligation.start_date, activity.effective_date)
exit!
start_date = latest_interest_payment_date(obligation.start_date, activity.effective_date)
default_date?(start_date)
default_date?(start_date - 1)
exit!
balance
print-accounting loan
exit!
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
exit!
discounted_rate_effective_on && date >= discounted_rate_effective_on
edit use_discounted_interest_rate?
print-accounting loan
print-accounting
print-accounting simulator
print-accounting loan
loan.obligations
loan.obligations.find(2)
loan.obligations.find(2).discounted_rate_applied_on
applied_on
loan.invalidate_obligations
loan.contractual_obligations
loan.obligations.find(2).discounted_rate_applied_on
activity
loan.obligations.find(2).discounted_rate_applied_on
applied_on && activity.effective_date == applied_on
applied_on
loan.invalidate_obligations
obligation.discounted_rate_applied_on
obligation = current_obligation(activity.effective_date)
obligation.discounted_rate_applied_on
loan.obligations.find(2).discounted_rate_applied_on
loan.obligations.find(2)
loan.invalidate_obligations
loan.contractual_obligations
loan.contractual_obligations[1].discounted_rate_applied_on
current_obligation(activity.effective_date)
current_obligation(activity.effective_date).discounted_rate_applied_on
loan.reload.contractual_obligations[1].discounted_rate_applied_on
current_obligation(activity.effective_date).discounted_rate_applied_on
exit!
applied_on
current_obligation(activity.effective_date)
current_obligation(activity.effective_date).reload.discounted_rate_applied_on
current_obligation(activity.effective_date).discounted_rate_applied_on
exit!
current_obligation(activity.effective_date).discounted_rate_applied_on
loan.obligations
exit!
activity
applied_on
activity
applied_on
discounted_interest_rate
discounted_obligations
index
exit!
discounted_obligations
discounted_obligations.include?(index - 1)
index
discounted_obligations.include?(index - 1)
index - 1
index
exit!
applied_on
applied_on && activity.effective_date == applied_on
applied_on
activity.effective_date
obligation.start_date + 5
expect(second_obligation.discounted_rate_effective_on).to eq(reconcile_date)
expect(second_obligation.reload.discounted_rate_effective_on).to eq(reconcile_date)
print-accounting loan
date
default_date
exit!
print-accounting loan
@start_date
print-accounting loan
print-accounting loan -b
loan.obligations
exit!
obligation
print-accounting loan
whereami
obligation
previous_obligation(today)
obligation.closed?
exit!
in_obligations_window?(date)
date == Date.parse('2012-07-27')
current_obligation_number(date)
contractual_obligations[obligation]
obligation = current_obligation_number(date)
contractual_obligations[obligation - 1]
contractual_obligations[obligation]
contractual_obligations
exit!
middle
middle >= end_position
middle < start_position
obligation = contractual_obligations[middle]
date
date < obligation.start_date
date > obligation.target_date
middle
end_position
start_position
middle >= end_position
middle < start_position
obligation = contractual_obligations[middle]
date < obligation.start_date
middle
start_position
end_position
obligation = contractual_obligations[middle]
exit!
loan.obligations
exit!
loan.current_obligation(date)
loan.obligations
loan.current_obligation_number(date)
loan.current_obligation(date)
loan.in_obligation_window?(date)
loan.in_obligations_window?(date)
loan.invalidate_obligations
loan.in_obligations_window?(date)
loan.current_obligation(date)
exit!
expect(loan.current_obligation(date)).to be_nil
loan.obligations
loan.previous_obligation(date)
print-accounting loan
loan.obligations
date
loan.previous_obligation(date + 100)
date
loan.current_obligation_number(date)
loan.previous_obligation(date)
exit!
whereami
loan.previous_obligation(date)
contractual_obligations
obligation
contractual_obligations[obligation - 1]
edit previous_obligation
exit!
date
contractual_obligations
obligation = current_obligation_number(date)
middle
start_position
end_position
contractual_obligations
date < obligation.start_date
whereami
obligation = contractual_obligations[middle]
date
start_position
end_position
obligation = contractual_obligations[middle]
whereami
contractual_obligations[obligation - 1]
date
loan.obligaitons
loan.obligations
obligations
contractual_obligations
date
whereami
obligation
contractual_obligations[obligation]
pproposed_obligation = contractual_obligations[obligation]
proposed_obligation = contractual_obligations[obligation]
date
proposed_obligation.target_date
date > proposed_obligation.target_date
exit!
obligation
contractual_obligations[obligation]
obligation
current_obligation(today)
exit!
obligation
exit!
current_obligation_invalide
current_obligation_invalid
@current_obligation && @current_obligation.changed?
in_obligations_window?(date)
proposed_obligation
(proposed_obligation.start_date..proposed_obligation.target_date).cover?(date)
exit!
print-accounting
activity
whereami
activity_type
date
print-accounting loan
adjusting
running_daily
print-accounting loan -b
loan
exit!
balance
actual
print-accounting loan
balance
actual
print-accounting loan
print-accounting loan -b
2.13 + 7.27
303.07 - (269.43 + 31.51 + 2.12)
(269.43 + 31.51 + 2.12)
(269.43 + 31.51 + 2.13)
interest_to_pay_in_reconcile(remainder)
print-accounting loan
print-accounting 
adjusintg
adjusting
current_activity
print-accounting -b
whereami
edit interest_to_pay_in_reconcile
whereami
interest_to_pay_in_reconcile(remainder)
accountant.accounts[:interest_ar]
remainder
accounts[:interest_ar]
print-accounting accountant
print-accounting accountant -b
print-accounting
whereami
accountant = @accountant.simulating_accountant(start_date: payment_activity.effective_date)
print-accounting accountant
whereami
print-accounting 
whereami
@accountant.simulating_accountant(start_date: payment_activity.effective_date)
print-accounting accountant
payment
whereami
payment_activity
payment_activity.effective_date
print-accounting loan
@accountant.simulating_accountant(start_date: payment_activity.effective_date)
print-accounting accountant
whereami
edit interest_to_pay_in_reconcile
whereami
interest_to_pay_in_reconcile(remainder)
accountant.accounts[:interest_ar]\
;
!
accountant.accounts[:interest_ar]
print-accounting accountant
print-accounting 
print-accounting accountant -b
whereami
print-accounting loan
print-accounting loan -b
balance
actual
562.25 - actual
loan
exit!
balance
actual
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan -b
loan
print-accounting loan
balance
loan
loan.cluster
exit!
balance(:interest
)
print-accounting loan
print-accounting loan -b
loan
exit!
balance
actual
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -b
balance
actual
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.obligations
print-accounting loan -b
whereami
result[:obligation]
print-accounting loan
result[:obligation]
result[:obligation].early_payment_amount
whereami
obligations
edit calculate_early_payment
calculate_early_payment(activity)
early_payments
loan
print-accounting loan
loan
exit!
edit calculate_early_payment
balance
actual
print-accounting loan
print-accounting loan -b
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit!
balance
actual
print-accounting loan
print-accounting loan -b
loan
exit!
amount
obligation
print-accounting loan
whereami
activity
print-accounting 
whereami
result[:obligation]
result[:obligation].early_payment_amount
date
loan.obligations.find { |ob| ob.early_payment_amount > FinanceXL::ZERO }
loan.obligations.find { |ob| ob.early_payment_amount > FinanceXL::ZERO }.early_payment_amount
loan.obligations.select { |ob| ob.early_payment_amount > FinanceXL::ZERO }
loan.obligations.select { |ob| ob.early_payment_amount > FinanceXL::ZERO }.last.early_payment_amount
result[:obligation]
edit calculate_early_payment
whereami
calculate_early_payment(activity)
early_payments
print-accounting loan
current_obligation(today)
current_obligation(activity.effective_date)
whereami
early_payment = early_payments.first
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
obligation
print-accounting
exit!
activity
print-accounting loan
whereami
amount
edit calculate_early_payment
amount
obligation
print-accounting loan
whereami
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
amount
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
print-accounting
exit!
amount
print-accounting loan
obligation
loan.obligations
amount
print-accounting 
obligation
obligation.early_payment_amount
amount
print-accounting 
whereami
early_payments
exit!
activity
print-accounting loan
whereami
payments
whereami
unreconciled_early_payments
unreconciled_payments
exit!
payments
unreconciled_payments
payments
activity
payments
amount
print-accounting loan
amount
print-accounting
whereami
amount
result[:obligation]
result[:obligation].early_payment_amount
exit!
activity
print-accounting loan
payments
print-accounting loan
payments
activity
adjusting
activity
payments
activity
print-accounting loan
loan.obligations.select { |ob| ob.early_payment_amount != 0 }
loan.obligations.select { |ob| ob.early_payment_amount != 0 }.map(&:early_payment_amount)
activity
whereami
payments
reconcile
activity
adjusting
caller
whereami
activity
payments
print-accounting loan
exit!
disable-pry
print-accounting loan
activity
print-accounting
unreconciled_payment
unreconciled_payments
pending_reconciles
unreconciled_payments
payment
payments
whereami
edit unreconciled_early_payments
unreconciled_early_payments(activity)
obligation
exit!
obligation
unreconciled_payments
disable-pry
unreconciled_payments
payments
unreconciled_payments
activity
caller
payments
caller
activity
unreconciled_payments
pending_reconciles
payments
activity
print-accounting
payments
caller
unreconciled_payments
expect(accountant.calculate_interest_accrued(second_obligation)).to eq current_interest
print-accounting loan
accounts
accounts[:uncollected_unrecognized_late_fees]
print-accounting loan
print-accounting loan -b
loan
exit!
print-accounting loan
exit!
print-accounting loan -b
5499.37 + 102.44
457.79 + 817.64
2122.12 + 3614.97
5499.37 + 102.44
print-accounting loan
whereami
print-accounting @accountant
@accountant.loan
exit!
print-accounting 
whereami
obligation.billing_fee_assessed
balance(:interest)
interest_due
loan
memo
activity
entry
exit!
balance
actual
print-accounting loan 
loan
balance
actual
balance
actual
print-accounting loan
loan
exit!
print-accounting loan
whereami
memo
entry
activity
exit!
activity
entry
balance
atual
actual
balance
actula
actual
print-accounting loan -b
324.77 + 42.48
324.77 + 42.48 + 135.08
72 + 48 + 12
60 + 48 + 12
(250 + 48 + 135.08 + 79.88 + 12) - (214.96 + 170 + 97.37 + 140)
(250 + 48 + 135.08 + 79.88 + 12) - (214.96 + 170 + 140)
balance
actual
print-accounting loan
balance
"752.9".to_d - actual
print-accounting loan -b
exit!
print-accounting loan
activity
current_activity
whereami
adjustments = calculate_interest_adjustments(relevant_activities)
exit!
calculate_interest_adjustments(relevant_activities)
balance
actual
print-accounting loan
balance
actual
1634.36 - 1498.0
print-accounting loan -b
loan
loan.obligations
221.36 - 743.36
print-accounting loan
loan.obligations
loan.obligations.find(6)
exit!
obligation
amount
print-accounting loan
current_activity
current_activity.entries
caller
whereami
adjusting
print-accounting
adjusting
whereami
amount
136.36 + 595
adjusting
print-accounting 
current_activity
595 + 136.36 + 12
obligation.interest_due
print-accounting loan
print-accounting loan -b
whereami
loan.obligations
loan.obligations.find(7).interest_due
exit!
current_activity
interest
adjustments
realized_interest
act.introduced?
current_activity.introduced?
exit!
disable-pry
disable-rpy
disable-pry
print-accounting loan
create_end_of_cycle amount: 100, interest_due_amount: 100
create_end_of_cycle amount: 100, interest_due_amount: 100, obligation: 7
print-accounting loan
exit!
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 100
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 100
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
print-accounting loan
exit!
print-accounting loan
interest_accrued
interest_income
accounts[:interest_income]
interest_income + interest_accrued
print-accounting loan
balance
actual
print-accounting loan -b
138.93 + 10.65
138.93 + 10.65 + 6.33
6609.58 + 1381.06
6609.58 + 1381.06 + 222.75
709.37 - (101.94 + 395.81 + 127.42 + 581.95)
(709.37 + 222.75)- (101.94 + 395.81 + 127.42 + 581.95)
(709.37 + 222.75 + 275)- (101.94 + 395.81 + 127.42 + 581.95)
balance(:interest)
print-accounting loan
loan
whereami
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today-1))
interest
adjustments
obligation
loan.obligations
today
interest_start_date
whereami
start_date
obligation.start_date
loan.obligations
adjustments
print-accounting loan
loan.obligations
loan
disable-pry
balance(:interest)
interest_due
print-accounting loan
print-accounting loan -b
whereami
balance(:interest)
interest_due
whereami
current_activity
exit!
exit!
$its_pry_time = true
interest
relevant_activities
obligation
loan.obligations
exit@
exit!
obligation
index
target_date
next_start_date = obligations[index + 1][:start_date]
exit@
exit!
amount
obligation
exit
exit!
amount
print-accounting loan
loan
loan.accountant.rules.provisional?
loan.accountant.rules.billing_fees?
loan.region
exit!
print-accounting -b
exit!
print-accounting loan
loan.obligations
loan.obligations.sort
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
obligation
due_amounts
accounts
exit!
obligation
current_activity.entries
amount
due_amounts
accounts
amount
obligation
obligation.remaining
obligation.remaining_balance
exit!
due_amounts
due_amounts_left
exit!
account
obligation.remaining_balance
account
due_amount_left
obligation.remaining_balance
due_amounts
due_amounts_left
exit!
print-accounting loan
exit!
print-accounting loan
balance
actual
print-accounting loan
create_end_of_cycle amount: 100, obligation: 2
print-accounting loan
create_end_of_cycle amount: 100, obligation: 3
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
create_end_of_cycle amount: 100, obligation: 2
print-accounting loan
create_end_of_cycle amount: 100, obligation: 3
print-accounting loan
exit!
print-accounting loan
create_end_of_cycle amount: 100, obligation: 3
print-accounting loan
accounts
exit!
print-accounting loan
assert_accounts interest_due: third_obligation[:interest_due] - first_obligation[:interest_due] - 0.5
assert_accounts principal_due: third_obligation[:principal_due] - first_obligation[:principal_due]
assert_accounts interest_due: third_obligation[:interest_due] - first_obligation[:interest_due] - 0.5, principal_due: third_obligation[:principal_due] - first_obligation[:principal_due]
print-accounting loan
99.16 + 0.53
second_obligation[:interest_due] - 0.5 + 50
second_obligation[:interest_due] - 0.5
second_obligation[:interest_due] -first_obligation[:interest_due] - 0.5 + 50
third_obligation[:interest_due]
third_obligation[:interest_due]  - first_obligation[:interest_due]
third_obligation[:interest_due]  - first_obligation[:interest_due] - second_obligation[:interest_due]
third_obligation[:interest_due] - second_obligation[:interest_due]
accounts[:principal_due]
third_obligation[:principal_due] - second_obligation[:principal_due]
assert_accounts interest_due: third_obligation[:interest_due] - second_obligation[:interest_due]
assert_accounts principal_due: third_obligation[:principal_due] - first_obligation[:principal_due] - 50
print-accounting loan
whereami
payoff 99.5 - (second_obligation[:interest_due] -first_obligation[:interest_due] - 0.5 + 50)
print-accounting loan
whereami
assert_accounts interest_due: third_obligation[:interest_due] - second_obligation[:interest_due]
assert_accounts  principal_due: third_obligation[:principal_due] - second_obligation[:principal_due] + 0.5
print-accounting loan
exit!
accountant.rules.billing_fees?
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
changes = accountant.finalize_payoff_amounts
exit!
changes
previous_obligation(today).billing_fee_assessed?
accoounts
accounts
relevant_activities
start_date
today
current_activity
print-accounting
changes
print-accounting loan
expect(accountant).to receive(:finalize_payoff_amounts).and_return(fees_ar: 500)
whereami
payoff balance(:currently_due) + 200
print-accounting loan
balance
actural
actual
balance
actual
print-accounting loan
loAN
loan
exit!
accounts
amount_to_restore
account
due_accounts
uncollected_accounts[0..index]
[amount_to_restore, temp_accounts[credit_account]]
[amount_to_restore, temp_accounts[:uncollected_principal]
]
[amount_to_restore, temp_accounts[:uncollected_principal]].min
entries
account
uncollected_accounts[0..index]
entries
amount_to_restore
due_amounts[account]
62.21 + 0.54
temp_accounts
entries
exit!
balance
actual
print-accounting loan
exit!
obligation
due_amounts
exit!
obligation
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
148.84 + 150.13 + 101.03 - 300
148.84 + 150.13 + 101.03 - (300 + 98.97)
whereami
print-accounting loan -b
print-accounting loan 
exit!
today
print-accounting loan
loan
exit!
print-accounting loan
print-accounting loan -b
exit!
diff
print-accounting loan
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting loan
print-accounting @accountant
diff
print-accounting loan
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting loan
print-accounting @accountant
whereami
diff
exit!
edit payment_amounts_of_obligation
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
whereami
default_calculator.default_amount_on(today + 1)
balance(:currently_due)
print-accounting loan
whereami
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
print-accounting loan
whereami
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
date
todya
today
adjusting
print-accounting
print-accounting loan
print-accounting
print-accounting loan
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
today
default_calculator
148.84 + 150.13
148.84 + 150.13 + 101.03
loan.obligations
exit!
amount
print-accounting loan
activity
activity_type
whereami
obligation.early_payment_amount
exit!
print-accounting loan
amount
whereami
amount
activity
print-accounting loan
whereami
amoun
amount
activity
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
accounts[:customer_balance]
balance(:currently_due)
default_calculator.default_amount_on(today + 1)
reconcile_customer_balance
print-accounting loan
current_activity
whereami
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
past_due_obligations = default_calculator.default_history && default_calculator.past_due_obligations
obligations.map(&:early_payment_amount)
loan.obligations.map(&:early_payment_amount)
exit!
loan.obligations.map(&:early_payment_amount)
reconcile = reconcile_customer_balance
reconcile
update_early_payments(reconcile)
reconcile.entries
loan.obligations.map(&:early_payment_amount)
exit!
reconcile = reconcile_customer_balance
$its_pry_time = true
update_early_payments(reconcile)
result[:amount]
result[:obligation]
print-accounting loan
result[:obligation]
whereami
amount
obligations
whereami
loan.obligations
loan.obligations.map(&:early_payment_amount)
loan.obligations(true).map(&:early_payment_amount)
exit!
$its_pry_time = true
reconcile = reconcile_customer_balance
update_early_payments(reconcile)
early_payments
payments_to_reconcile(filter_activity)
edit payments_to_reconcile
payments_to_reconcile(filter_activity)
reconciled_payments
unreconciled_payments
pending_reconciles
edit payments_to_reconcile
payments_to_reconcile(filter_activity)
pending_reconciles
unreconciled_payments
edit payments_to_reconcile
whereami
payments_to_reconcile(filter_activity)
exit!
reconcile = reconcile_customer_balance
update_early_payments(reconcile)
loan.obligations.map(&:early_payment_amount)
balance
actual
print-accounting loan
exit!
print-accounting loan
whereami
accountant.calculate_interest_accrued(second_obligation)
early_payments
payments.first
early_payments.first
early_payments.first.cancelled?
accountant.calculate_interest_accrued(second_obligation)
early_payments
early_payments.first.cancelled?
act = early_payment.first
act = early_payments.first
act.cancelled_date
activity
exit!
expect(accountant.calculate_interest_accrued(second_obligation)).to eq current_interest
early_payments
cancel_activity.activity_id
activity.activity_id
accountant.persisted?
adjusting
print-accounting loan
activity
print-accounting
print-accounting loan
print-accounting
activity
print-accounting
activity
current_activity
whereami
cancel_activity.object_id < activity.object_id
early_apayments
early_payments
early_payment_cancellations
act
act.cancels?
act
exit!
early_payment_cancellations
exit!
$its_pry_time = true
accountant.calculate_interest_accrued(second_obligation)
print-accounting
whereami
early_payment_cancellations[act] < early_payment_cancellations[activity]
act = early_payments.first
early_payment_cancellations[act] < early_payment_cancellations[activity]
early_payment_cancellations
activity
edit
act
index
act
exit!
balance
print-accounting loan
balance
actual
554.37 - 522.02
loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
expect(sixth_obligation.reload.amount).to eq balances[:outstanding] - accounted_for
print-accounting
print-activity
activity
print-accounting loan
early_payment_cancellations
whereami
early_payment_cancellations[act]
early_payment_cancellations[activity]
adjusting
caller
exit!
balance
actual
print-accounting loan
loan
actual
print-accounting loan
exit!
payment_activity
activty
activity
early_payments
print-accounting loan
end_date
whereami
early_payments
activity
print-accounting
activities
exit!
balance
actual
337.68 - 339.68
print-accounting loan
print-accounting loan -b
due_amounts
obligation
print-accounting loan
loan.obligations.map(&:early_payment_amount)
loan.obligations
exit!
unreconciled_payments
payments
unreconciled_payments
pending_reconciles
adjusting
print-accounting
whereami
unreconciled_payments
pending_reconciles
exit!
results
reconcile
reconciles
exit!
early_payments
reconciles
pending_reconciles
early_payments
reconciles
activity
print-accounting loan
activity
early_payments
activity
reconciles
payments
ureconciled_payments
unreconciled_payments
payments = unreconciled_payments.select { |_, amount| amount == activity.activity_amount }
print-accounting
payments = unreconciled_payments.select { |_, amount| amount == activity.activity_amount }
pending_reconciles
payments = unreconciled_payments.select { |_, amount| amount == activity.activity_amount }
exit!
unreconciled_payments
unreconciled_payments.first.effective_date
unreconciled_payments.first[0].effective_date
exit!
due_amounts
loan.obligations.map(&:early_payment_amount)
exit!
print-accounting
whereami
payments
print-accounting
payments
exit!
payments
unreconciled_payments
print-accounting
unreconciled_payments
exit!
payment
amount
remaining_amount
payment
unreconciled_payments
payment
amount
act
amount
remaining_amount
amount
payment
remaining_amount
reconciled_payments
reconciled_payments  << [payment, amount] if remaining_amount >= amount
unreconciled_payments
reconciled_payments
exit!
unreconciled_payments.reject { |(_, amount)| amount == FinanceXL::ZERO }
balance
actual
print-accounting loan
loan
balance
actual
print-accounting loan -b
print-accounting loan
exit!
amount
print-accounting loa
print-accounting loan
balance
whereami
amount
past_due_obligations
past_due_obligations(today_
  past_due_obligations(today)
past_due_obligations(today)
caller
.clear
whereami
past_due_obligations(today + 1)
@default_calculator
exit!
amount
default_calculator
invalidate_default_calculator
default_calculator = default_calculator_as_of(today + 1)
past_due_obligations = default_calculator.default_history && default_calculator.past_due_obligations
exit!
caller
whereami
default_calculator
today
print-accounting
whereami
today
exit!
default_calculator = default_calculator_as_of(today + 1)
whereami
edit amount_to_default
amount
exit!
@default_calculator_as_of
@default_calculator
amount
exit!
@default_calculator
past_due_obligations(today + 1)
@default_calculator
today
exit!
past_due_obligations = past_due_obligations(today + 1)
loan.current_obligation(Date.parse('2012-11-01')
)
loan.current_obligation(Date.parse('2012-11-01'))
loan.current_obligation(Date.parse('2012-11-01')).early_payment_amount
exit!
amount
activity
print-accounting loan
loan
exit!
balance
actual
print-accounting loan
print-accounting loan -a late_fee
print-accounting loan
exit!
print-accounting loan
balance
actual
exit!
print-accounting loan
date
print-accounting loan
exit!
date
print-accounting loan
loan.obligations
date
Date.today
date
late_fee 10
date = accountant.most_recent_effective_date + 1
late_fee 10
date
late_fee amount: 10, date: date
print-accounting loan
loan.accountant.rules
loan.accountant.rules.accrue_late_fees_due?(date)
date
loan.accountant.rules.late_fees_due?(date)
print-accounting loan
exit!
toda
today
rules.late_fees_due?(today)
today
print-accounting loan
today
date
today
rules.late_fees_due?(today)
print-accounting loan
create_end_of_cycle amount: 100, obligation: 6
print-accounting loan
create_end_of_cycle amount: 100, obligation: 7
print-accounting loan
month_end
Date.business_days_after(month_end, Loaner::Config.reporting.nsf_in_transit_report_day)
Date.today
Date.business_days_after(month_end, Loaner::Config.reporting.nsf_in_transit_report_day)
Timecop.freeze(Date.business_days_after(month_end, Loaner::Config.reporting.nsf_in_transit_report_day))
Date.today
Date.business_days_after(month_end, Loaner::Config.reporting.nsf_in_transit_report_day)
Time.local(Date.today)
Date.today
Date.local
Date.methods
exit!
Date.today
Date.today == Date.business_days_after(month_end, Loaner::Config.reporting.nsf_in_transit_report_day)
"#{Rails.root}/public/reporting/#{cluster}/#{YEAR}/#{MONTH}/payday/test_payday_nsf_in_transit_#{extra_string}.csv"
balance
actual
balance
actual
balance
actual
print-accounting loan
print-accounting loan -b
changes
print-accounting loan
expect(date).to be > Date.parse(Loaner::Config.accountant.oec.rules.pay_customer_balance_first)
print-accounting loan
print-accounting loan -b
whereami
principal_left
principal_left -80
accounts[:principal]
balance(:interest)
interest_due
print-accounting loan
print-accounting loan -b
balance(:interest)
print-accounting 
adjusting
balance(:interest
)
accounts
current_activity
current_activity.entries
today
exit!
Date.parse('03-31-2014')
Date.parse('2014-03-31')
interst
interest
adjustments
realized_interest
interest - adjustments + realized_interest
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
amount
act
print-accounting loan
realized_interest
exit!
amount
print-accounting loan
whereami
act
early_payment
exit!
amount
interest - adjustments + realized_interest
disable-pry
balance
actual
print-accounting loan
print-accounting loan -b
print-accounting loan
balance
actual
actual - 200
balance
actual - 200
actual 
balance
amount
print-accounting loan
@default_calculator
caller
whereami
print-accounting loan
loan
print-accounting loan
print-accounting @accountant
@accountant.loan
exit!
today
print-accounting accountant
today
print-accounting accountant
print-accounting 
today
print-accounting 
print-accounting loan
"#unrecognized_#{recovery.to_s.gsub('recoveries')}income".to_sym
recovery
recovery.to_s
"#unrecognized_#{recovery.to_s.gsub('recoveries','')}income".to_sym
exit!
"unrecognized_#{recovery.to_s.gsub('recoveries', '')}income".to_sym
recovery
"unrecognized_#{recovery.to_s.gsub('_recoveries', '')}".to_sym
print-accounting loan
exit!
print-accounting loan
whereami
assert_accounts co_interest: recognized_interest - 1
recognized_interest
print-accounting loan
whereami
print-accountin gloan
print-accounting loan
credit_account
recoveries[credit_account]
credit_account
print-accounting loan
exit!
recovery
accounts[:recovery]
accounts
accounts[:interest_income_recoveries]
:interest_income_recoveries == :interest_income_recoveries
exi!
exit!
[accounts[recovery].abs, amount].min
unrecognized = "unrecognized_#{recovery.to_s.gsub('_recoveries', '')}".to_sym
accounts
print-accounting loan
whereami
assert_accounts co_interest: 1, co_unrecognized_interest: unrecognized_interest
assert_accounts unrecognized_interest_income: -unrecognized_interest
print-accounting loan
accounts
print-accounting loa
print-accounting loan
print-accounting loan -b
print-accounting loan
cbae
eit hck_lc
deanseka
params[:year]
params[:month]
caller
params[:month]
params[:year]
edit show
ReportMailer.month_end_report_failure.deliver
Loaner::Config.accountant
Loaner::Config.reload
Loaner::Config.methods
exit
.clear
Loaner::Config.accountant
exit
entry
activity
print-accounting loan
balance(:interest)
interest_due
print-accounting loan
exit!
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 100
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
print-accounting loan
whereami
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 100
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
balance(:interest)
interest_due
print-accounting
current_activity
current_activity.entry
current_activity.entries
print-accounting -b
current_activity.entries
whereami
today
interest
adjustments
whereami
act
act.entries
amount
print-accounting loan
exit
exit!
print-accounting loan
exit!
balance
exit!
first_obligation
act
first_obligation || first_end_of_cycle ||= act.type?(:end_of_cycle) && act.effective?(start_date)
act
arr
exit!
print-accounting
interest
adjustments
[interest - adjustments + realized_interest, FinanceXL::ZERO].max
print-accounting loan
whereami
relevant_activities
interest
exit!
act
act.type?(:end_of_cycle) && act.effective?(obligation.target_date + 1)
first_obligation || first_end_of_cycle ||= act.type?(:end_of_cycle) && act.effective?(start_date)
act
print-accounting
act
first_obligation || first_end_of_cycle ||= act.type?(:end_of_cycle) && act.effective?(start_date)
arr
exit!
exit
exit!
relevant_activities
print-accounting loan
disable-pry
balance(:interest)
interest_due
print-accounting loan
current_activity
current_activity.entries
print-accounting loan -b
whereami
interest_due
balance(:interest)
today
exit!
today.to_s
exit!
interest
print-accounting loan
relevant_activities
exit!
start_date
print-accounting loan
whereami
exit!
first_obligation
exit!
act
print-accounting loan
act
print-accounting
start_date
whereami
act
edit calculate_interest_a
edit calculate_interest_accrued
act
print-accounting
act
print-accounting
act
act.type?(:end_of_cycle) && act.effective?(start_date)
act.effective_date
start_date
exit!
interest
relevant_activities
print-accounting loan
exit!
interest
balance(:interest)
interest_due
print-accounting loan
interest_due
balance(:interest)
balance(:interest) - interest_due
exit
print-accounting
interest_start_date
start_Date
start_date
obligation
whereami
obligation
today
exit!
obligation
first_obligation
start_date
caller
current_activity
print-accounting loan
obligation
whereami
print-accounting
obligation
caller
current_activity
whereami
print-accounting
exit!
print-accounting
first_obligation
whereami
activitie
activities
first_end_of_cycle = nil
activities.each_with_object([]) do |act, arr|
  next if act.effective_date < start_date
  if first_end_of_cycle || act.effective_date > start_date
    arr << act
  elsif act.type?(:end_of_cycle) && act.effective?(start_date)
    first_end_of_cycle = act
  elsif act.type?(:interest) && act.effective?(start_date)
    first_end_of_cycle = act
    arr << act
  end
  break if (act.type?(:end_of_cycle) && act.effective?(obligation.target_date + 1)) ||
  act.effective_date > obligation.target_date + 1
end
edit
arr
exit!
print-accounting loan
whereami
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 0
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
edit accountant.calculate_interest_accrued
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
interest
adjustments
exit!
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 0
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
print-accounting laon
print-accounting loan
whereami
edit accountant.calculate_interest_adjustments
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
amount
activity
act
activities
print-accounting loan
activities
edit calculate_interest_accrued
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
relevant_activities
obligation
start_date
whereami
edit calculate_interest_accrued
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
act
print-accounting
start_date
whereami
first_end_of_cycle = act
activities
edit calculate_interest_accrued
edit accountant.calculate_interest_accrued
expect(accountant.calculate_interest_accrued(eighth_obligation)).to eq 0
act
print-accounting loan
adjusting
activities
whereami
activities
whereami
activities
whereami
act
current_activity
caller
whereami
edit calculate_interest_accrued
edit accountant.calculate_interest_accrued
whereami
exit!
edit calculate_interest_accrued
disable-pry
balance(:interest)
print-accounting loan
print-accounting loan -b
whereami
calculate_interest_accrued(current_obligation(today-1))
balance(:interest)
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today-1))
interest
relevant_activities
print-accounting loan
relevant_activities
relevant_activities.size
whereami
edit calculate_interest_accrued
calculate_interest_accrued(current_obligation(today-1))
first_end_of_cycle
irst_end_of_cycle || act.effective_date > start_date
first_end_of_cycle || act.effective_date > start_date
act.type?(:end_of_cycle) && act.effective?(start_date)
act.type?(:interest) && act.effective?(start_date)
exit!
expect(accountant.calculate_interest_accrued(seventh_obligation)).to eq 100
print-accounting loan
exit!
activity
entry
memo="adjust_interest"
wherami
whereami
memo="adjust_interest"
activity
entry
activity
ciit
atvyactivt
iyatt
civyet
nry
eit!
activity
memo
entry
print-accounting loan
whereami
print-accounting
entry
exit!
Loaner::Config
Loaner::Config.accountant
YAML.dump("foo")
YAML.dump(Date.today..Date.tomorrow)
YAML.dump(1..2)
Loaner::Config.accountant
print-accounting loan
Loaner::Config.accountant
3.upto(256)
3.upto(256){|fd| IO::new(fd).close rescue nil}
original =  ["carryover_fees_pmt",
  "carryover_late_fees",
  "carryover_nsf_fees",
  "carryover_principal_pmt",
  "carryover_uncollected_fees_pmt",
  "carryover_uncollected_late_fees_pmt",
  "carryover_uncollected_nsf_fees_pmt",
  "carryover_uncollected_principal_pmt",
  "co_fees",
  "co_fees_pmt",
  "co_late_fees",
  "co_late_fees_pmt",
  "co_nsf_fees",
  "co_nsf_fees_pmt",
  "co_principal",
  "co_principal_pmt",
  "co_uncollected_fees_pmt",
  "co_uncollected_late_fees",
  "co_uncollected_nsf_fees",
  "co_uncollected_principal",
  "default_fees",
  "default_late_fee",
  "default_nsf_fee",
  "default_principal",
  "fee_credit_ach",
  "fee_credits",
  "fee_discount",
  "fee_pmt",
  "late_fee",
  "late_fee_pmt",
  "new_loan",
  "new_loan_fee",
  "new_loan_fee_top_up",
  "nsf_fee",
  "nsf_fee_pmt",
  "other_credit",
  "overpayment",
  "principal_pmt",
  "reconcile_co_fees_pmt",
  "reconcile_co_late_fees_ar_pmt",
  "reconcile_co_late_fees_pmt",
  "reconcile_co_nsf_fees_pmt",
  "reconcile_fee_pmt",
  "rec   "rec   "rec   "rec    "   "rec   "rec   "rec  
nc             nc,
es                  es d_                                    eses                 ected_principal_pmt"]
edit
orig
edit
new - orig
edit
payday - orig
edit
payday - orig
orig - payday
edit
oec
edit
payday
oec
payday + oec
edit
develop - (oec+payday)
develop.size
(payday + oec).size
develop.sort - (payday+oec).sort
(develop.sort - (payday+oec).sort).size
(payday+oec).size
develop
(payday+oec).size
(payday+oec)
(payday+oec).sort
edit 
oec
(develop.sort - (payday+oec).sort).size
(develop.sort - (payday+oec).sort)
config
config.paths
config.paths['db/migrate']
whereami
config.paths['db/migrate'] << 'db/migrate/oec_migrations'
config.paths['db/migrate']
config.paths['app/controllers']
config.paths['db/migrate']
whereami
migrations_paths
exit!
config.paths['db/migrate'] << 'db/migrate/oec_migrations'
migrations_paths
migrations_paths(["/export/loaner/db/migrate"])
migrations(["/export/loaner/db/migrate"])
exit!
edit up
exit!
Loaner::Config.clusters
product
cluster
clusters
clusters.each { |cluster| reporting_for_cluster_and_product(cluster, product, month, year, day) }
args
ar_by_loan_report(args)
edit ar_by_loan_report
klass
klass.send(query, *query_args)
whereami
exit!
output
whereami
write_query_output(file_name, output, cluster.name, product, month, year)
edit write_query_output
write_query_output(file_name, output, cluster.name, product, month, year)
CSV.open(file_name, 'w+')
whereami
edit output_csv
edit run_all_reports
report
exit!
output
cluster
cluster.name
run_report("import_#{cluster.name}", cluster, product, month_start, month_end, cluster.id)
edit run_report
run_report("import_#{cluster.name}", cluster, product, month_start, month_end, cluster.id)
product
query
klass.send(query, *query_args)
edit run_report
loan_tasks
loan_tasks.group_by { |t| t[
"cnuapp_loan_id"] }
exit@
exit!
success_rate = LoanTester.check_accountant_balances(cluster, product, balances[loan_id])
disable-pry
test_suite
wherami
exit!
disable-pry
exit!
print-accounting loan
exit!
loan.obligations
default_calculator = default_calculator_as_of(today + 1)
past_due_obligations = default_calculator.default_history && default_calculator.past_due_obligations
loan
616.19 + 191.86 + 225.72 + 243.74
print-accounting loan
balance
print-accounting loan -b
950.08 + 366.81
print-accounting lona
print-accounting loan
e
exit!
print-accounting loan
print-accounting loa
print-accounting loan
exit!
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan -b
exit!
print-accounting loan 
loan
exit!
print-accounting loan
loan
exit!
diff
print-accounting loan
print-accounting @accountant
exit!
print-accounting loan -a end_of_cycle
print-accounting @accountant
print-accounting accountant
print-accounting loan
print-accounting accountant -b
print-accounting loan -b
exit!
print-accounting loan
loan
print-accounting loan -b
674.51 + 11.78
exit!
amount
account
[accounts[account]
]
account
accounts
:exit!
exit!
[accounts[account], amount].min
disable-pry
income_account
recovery_account
exit!
recovery_account
print-accounting loan
exit
exit!
print-accounting loan
loan
print-accounting loan
exit!
obligation
print-accounting 
print-accounting -b
whereami
obligaiton
obligation
past_due_obligations
past_unpaid_obligations(today)
@default_calculator
exit!
print-accounting loan
@default_calculator
whereami
past_unpaid_obligations
today
loan.obligatinos
loan.obligations
loan.obligations.map(&:early_payment_amount)
(1..5).inject(1)(&:+)
(1..5).inject(&:+)
(1..5).inject (1) { |sum, a| a + sum }
(1..5).inject (2) { |sum, a| a + sum }
a = 'abc'
b = 'def'
c = "#{a}#{b}"
h  = { a: 1, b: 2 }
h[a]
h[:a]
s = "a b c".split(/ /)
.clear
exit!
print-accounting lona
print-accounting loan
current_obligation(Date.parse('2013-01-18'))
current_obligation(Date.parse('2013-01-18')-1)
current_obligation(Date.parse('2013-01-18')-1).early_payment_amount
exit!
amount
activity
activity.entries
print-accounting loan
loan
exit
amount
obligation
print-accounting loan
@default_calculator
print-accounting loan
print-accounting loan -b
@default_calculator
263.89 + 10 + 10 + 10 + 10 + 30 - (58.78 * 4)
(263.89 + 10 + 10 + 10 + 10 + 30) - (58.78 * 4)
(263.89 + 10 + 10 + 10 + 10 + 30) - (58.78 * )
(263.89 + 10 + 10 + 10 + 10 + 30) - (58.78 * 5)
print-accounting loan
exit!
print-accounting loan
exit!
edit amount_to_default
amount = balance(:current) + balance(:currently_due)
print-accounting loan
whereami
past_due_obligations
amount = balance(:current) + balance(:currently_due)
print-accounting loan
print-accounting loan -b
called_due?
past_due_obligations
whereami
print-accounting loan
exit!
print-accounting loan
edit amount_to_call_due
amount
print-accounting loan
amount
print-accounting loan
whereami
@default_calculator
print-accounting loan
default_calculator_as_of(today)
loan.accountant.default_calculator_as_of(Date.parse('2014-09-26'))
current_obligation(Date.parse('2014-01-02')
)
loan.current_obligation(Date.parse('2014-01-02'))
exit!
edit update_early_payments
caller
whereami
activity_type
amount
obligation.amount
activity_type
date
print-accounting loan
whereami
adjusting
activity_type
date
current_activity
print-accounting loan
loan.accountant.default_calculator_as_of(Date.parse('2014-09-26'))
loan.accountant.default_calculator_as_of(Date.parse('2014-09-27'))
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-09-27'))
loan.obligations
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-10-10'))
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-10-11'))
print-accounting loan
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).obligations.size
loan.obligations.size
loan.contractual_obligations
loan.contractual_obligations.size
whereami
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).obligations.size
load 'lib/default_calculator.rb'
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
require 'lib/default_calculator.rb'
require DefaultCalculator
require 'export/loaner/lib/default_calculator.rb'
load 'lib/default_calculator.rb'
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
whereami
print-accounting loan
whereami
assert_accounts late_fees_ar: 10
exit!
print-accounting loan
whereami
accounts
print-accounting loan
exit!
Loaner::Config.accountant.rules.consider_draws_on_oec_date
Loaner::Config.accountant.consider_draws_on_oec_date
Loaner::Config.accountant.oec.consider_draws_on_oec_date
Loaner::Config.accountant.oec.rules.consider_draws_on_oec_date
exit!
activity
edit set_memos
print-accounting loan
whereami
activity
caller
whereami
exit!
accounts[:customer_balance].abs
print-accounting 
loan.region
exit!
print-accounting loan
print-accounting loan -b
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
whereami
print-accounting loan
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).default_history
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
whereami
print-accounting loan
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount)
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
loan.accountant.balance(:outstanding)
print-accounting loan
print-accounting loan -b
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
print-accounting loan
145.94
282.06 + 145.94
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount)
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
balance(:outstanding)
loan.accountant.balance(:outstanding)
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14'))
whereami
print-accountign loan
print-accounting loan
exit!
amount
print-accounting loan
amount
print-accounting loan
amount
whereami
past_due_obligations
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount)
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
balance(:outstanding)
amount
balance(:outstanding) - balance(:current_ar)
balance(:outstanding) - balance(:current)
print-accounting loan
print-accounting loan -b
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
405.08 + 33.73
124.9 + 405.08 + 33.73
whereami
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
past_due_obligations
print-accounting 
263.89
162.06 + 263.89
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
accounts
124.9 + 405.08 + 33.73
162.06 + 263.89 + 137.76
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum + 137.76
563.71 - 552.73
print-accounting loan
exit!
invalidate_default_calculator
loan.accountant.default_calculator_as_of(today).past_due_obligations.map(&:amount).sum
exit!
print-accounting loan
whereami
exit!
print-accounting loan
exit!
print-accounting loan
amount
print-accounting loan
amount
print-accounting loan
whereami
past_due_obligations
print-accounting loan
past_due_obligations
print-accounting loan
past_due_obligations
149.54
149.54 - 3.6
past_due_obligations
print-accounting loan
past_due_obligations
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
print-accounting loan
print-accounting loan -b
loan.accountant.default_calculator_as_of(Date.parse('2014-10-14')).past_due_obligations.map(&:amount).sum
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).default_history
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
print-accounting loan
balance(:outstanding)
loan.accountant.balance(:outstanding)
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
print-accounting loan
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
print-accounting loan
loan.obligations.map(&:early_payment_amount)
loan.obligations.select { |o| o.early_payment_amount > 0 }
print-accounting loan
loan.obligations.select { |o| o.early_payment_amount > 0 }
exit!
print-accounting loan
print-accounting loan -b
loan.obligations.select { |o| o.early_payment_amount > 0 }
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).default_history
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:amount).sum
balance(:outstanding)
loan.accountnt.balance(:outstanding)
loan.accountant.balance(:outstanding)
443.48 - 428
print-accounting loan
print-accounting loan -b
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15'))
print-accounting loan
exit!
amount
past_due_obligations
print-accounting loan
past_due_obligations
263.89 - 224.31
past_due_obligations
print-accounting loan
past_due_obligations
accounts
balance(:past_due)
190.66 + 162.06 + 73.23
190.66 + 162.06 + 73.23 + 137.76
past_due_obligations
balance(:past_due)
past_due_obligations.map(&:remaining_balance)
past_due_obligations.map(&:remaining_balance).sum
edit amount_to_call_due
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:remaining_balance).sum
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).default_history
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:remaining_balance).sum
edit amount_to_default
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).default_history
loan.accountant.default_calculator_as_of(Date.parse('2014-10-15')).past_due_obligations.map(&:remaining_balance).sum
print-accounting loan
balance
actual
balance
actual
(312.21 + 114.76) - (237.21 + 189.76)
print-accounting loan -a end_of_cycle
loan
print-accounting loan -a end_of_cycle
exit!
diff
print-accounting @accountant
diff
@accountant.accounts
diff
@accountant.accounts
print-accounting loan
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting @accountant
diff
print-accounting @accountant
diff
@accountant.accounts
print-accounting loan
print-accounting @accountant
print-accounting @accountant -b
print-accounting @accountant
exit!
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
due_amounts = due_amounts_of_obligation(due_accounts, obligation.target_date)
obligation = past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }]).first
due_amounts = due_amounts_of_obligation(due_accounts, obligation.target_date)
due_accounts
due_amounts = due_amounts_of_obligation(due_accounts, obligation.target_date)
edit due_amounts_of_obligation
due_amounts = due_amounts_of_obligation(due_accounts, obligation.target_date)
end_of_cycle
end_of_cycle.entries
edit
due_accounts
due_accounts.to_a
due_accounts.to_a.flatten
exit!
edit due_amounts_of_obligation
amount_to_restore = due_amounts[account] + due_amounts.values_at(*unrecognized_accounts)
index
account
unrecognized_accounts
due_amounts.values_at(*unrecognized_accounts)
due_amounts.values_at(*unrecognized_accounts).sum
due_amounts[account]
account
exit!
disable-pry
print-accounting loan
exit!
print-accounting
accounts
print-accounting -b
accounts
current_activity.entries
print-accounting
accounts
print-accounting @accountant
diff
accounts
@accountant.accounts
83.42 + 98.97
whereami
diff
balances
balances["fees_due"] != @accountant.accounts.values_at(:fees_due, :uncollected_fees).sum
balances["fees_due"] == @accountant.accounts.values_at(:fees_due, :uncollected_fees).sum
exit!
print-accounting @accountant
balances["fees_due']
"]
balances["fees_due"] == @accountant.accounts.values_at(:fees_due, :uncollected_fees).sum
balances["fees_due"]
exit!
balances["fees_due"]
@accountant.accounts.values_at(:fees_due, :uncollected_fees).sum
print-accounting
print-accounting @accountant
whereami
balances["fees_due"]
exit!
print-accounting @accountant
whereami
balances["fees_due"]
balances["fees_due"] != @accountant.accounts[:fees_due]
@accountant.accounts[:fees_due]
balances["fees_due"] != @accountant.accounts[:fees_due]
balances["fees_due"]
@accountant.accounts[:fees_due]
balances["fees_due"] != @accountant.accounts[:fees_due]
balances["fees_due"] != @accountant.accounts.values_at(:fees_due, :uncollected_fees).sum
exit!
print-accounting @accountant
balances["fees_due"]
exit!
print-accounting @accountant
balances["fees_due"]
@accountant.accounts
diff
whereami
exit!
print-accounting loan
balance
actual
189.76 - actual
exit!
print-accounting loan
exit!
rules.consider_draws_on_oec_date?(today)
exit!
rules.consider_draws_on_oec_date?(today)
!rules.consider_draws_on_oec_date?(today)
v
relevant_activities = activities.select { |act| act.type?(:new_draw, :new_draw_fee) && !act.cancelled? && act.effective?(today) }
today
print-accounting loan
current_activity
!rules.consider_draws_on_oec_date?(today)
print-accounting loan
current_activity
wheremai
whereami
!rules.consider_draws_on_oec_date?(today)
relevant_activities = activities.select { |act| act.type?(:new_draw, :new_draw_fee) && !act.cancelled? && act.effective?(today) }
modifications = relevant_activities.each_with_object(Hash.new(FinanceXL::ZERO)) do |act, changes|
  entry = act.entries.first
  accounts[entry.dr] -= entry.amount
  changes[entry.dr] += entry.amount
end
print-accounting loan
print-accounting loan -b
whereami
exit!
modifications
accounts
print-accounting loan
old = [36174159, 36767370, 36172722, 34113425, 32110199, 34846481, 32140581, 29234651, 32486271, 30385146, 29792109, 32923250, 35538149, 37145627, 35547477, 36326972, 35909091, 35837123,33881076, 36818261, 31935624, 37288719]
new = [36174159, 36767370, 36172722, 34113425, 34846481, 32140581, 29234651, 32486271, 30385146, 29792109, 32923250, 35538149, 35547477, 36326972, 35909091, 35837123,33881076, 36818261, 31935624, 37288719]
old - new
print-accounting loan
print-accounting @accountant
ls
print-accounting @loans.first
@loans
print-accounting @loans.values.first
@loans.values.first
print-accounting @loans.values.first
diff
92.79 + 82.7
97.29 + 82.7
loan.obligations
@loans.values.first.obligations
loan.forward(Date.today)
@loans.values.first.forward(Date.today)
@loans.values.first.accountant.forward(Date.today)
print-accounting @loans.values.first
balances
exit!
diff
print-accounting @loans.values.first
exit!
exit!
print-accounting
third_obligation
third_obligation.reload
print-accounting
whereami
third_obligation.reload
non_recognized
exit!
print-accounting loan
print-accounting loan -b
balance(:called_due)
exit!
print-accounting loan
loan.obligations
exit!
print-accounting loan
amount
print-accounting loan
whereami
past_due_obligations
caller
whereami
today
exit!
past_due_obligations
print-accounting loan
print-accounting loan -
print-accounting loan -b
whereami
past_due_obligatins
past_due_obligations
print-accounting loan 
whereami
past_due_obligations
@default_calculator
whereami
exit!
print-accounting loan
@default_calculator
loan.obligatinos
loan.obligations
loan.obligations.find 21
loan.obligations.find(21).early_payment_amount
loan.obligations.find(21)
loan.obligations.map(&:early_payment)
loan.obligations.map(&:early_payment_amoun)
loan.obligations.map(&:early_payment_amount)
exit!
activity
print-accountign 
print-accounting
whereami
loan
exit!
@default_calculator
past_unpaid_obligations
past_unpaid_obligations(today)
@default_calculator
amount
whereami
balance(:outstanding)
@default_calculator.obligations
@default_calculator.obligations.map(&:amount).sum
@default_calculator.payments.map(&:amount).sum
@default_calculator.payments.map(&:remaining_balance).sum
@default_calculator.payments.map(&:remaining).sum
@default_calculator.obligations.map(&:remaining).sum
@default_calculator.obligations.map(&:remaining_balance).sum
@default_calculator.payments.map(&:remaining_balance).sum
exit!
transformed_task[:amount]
new_loan_task[:principal_amount]
exit!
Loaner::Config.clusters
exit!
Loaner::Config.clusters
Loaner::Config.clusters.oec
exit!
print-accounting
whereami
memo
whereami
debit_account
memo[loan.product]
memo
exit!
activity
print-accounting loan
whereami
memo[loan.product]
memo[loan.product][credit_account]
memo['oec'][credit_account]
exit!
execute <<-SQL rake aborted! EXISTS "index_accounting.ledgers_on_ledger"; SQL
edit
exit!
balance(:interest)
interest_due
print-accounting loan
exit!
balance(:interest)
interest_due
print-accounting loan
loan
exit!
balance(:interest)
interest_due
print-accounting loan
print-accounting loan -b
loan
exit!
balance(:interest)
interest_due
print-accounting loan
loan
exit
balance(:interest)
interest_due
print-accounting loan
loan
exit!
balance(:interest)
interest_due
print-accounting loan
loan
balance
balance(:interest)
interest_due
print-accounting loan
exit!
print-accounting loan
loan
balance(:interest)
interest_due
print-accounting loan
loan
exit!
balance(:interest)
interest_due
print-accounting loan
balance(:interest)
today
whereami
balance(:interest)
interest_due
calculate_interest_accrued(obligation)
loan.obligatoins
loan.obligations
balance(:interest)
print-accounting loan
loan
exit!
print-accounting loan
whereami]
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
loan
loan.current_obligation(Date.parse('2013-11-13'))
loan.obligations
exit!
activity_type
amount
activity_type
amount
activity_type
amount
activity_type
amount
print-accounting loan
activity_type
amount
obligation
amount -= obligation.amount
obligation
exit!
print-accounting loan
caller
whereami
current_activity
activity_type
print-accounting loan
past_unpaid_obligations(today, extra_payments: currently_paid)
amount
edit update_obligation_amounts
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
@loans.keys
pp loan
loan
loan = @loans.keys.first
pp loan
print-accounting loan
exit!
pp loan
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
loan.obligations
print-accounting loan
loan
loan.obligations
print-accounting loan
balance(:interest)
interest_due
whereami
.clear
print-accounting loan
print-accounting 
whereami
print-accounting 
current_activity
whereami
print-accounting loan
loan
print-accounting loan
whereami
balance(:interest)
exit
diff
print-accounting loan
create_end_of_cycle amount: 500, obligation: 2
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
forward third_obligation.target_date + 1
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
create_end_of_cycle amount: 300, obligation: 3
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan -b
print-accounting loan 
exit!
print-accounting lona
print-accounting 
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
create_end_of_cycle amount: 200, obligation: 4
print-accounting loan
loan.past_due_obligations
loan.accountant.past_due_obligations
print-accounting -b
loan.accountant.past_due_obligations
accounts.values_at(:uncollected_interest, :uncollected_fees, :uncollected_principal, :uncollected_principal_called_due)
print-accounting loan -b
exit!
accounts.values_at(:uncollected_interest, :uncollected_fees, :uncollected_principal, :uncollected_principal_called_due).sum
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
assert_accounts uncollected_unrecognized_interest: 0, uncollected_unrecognized_late_fees: 5
assert_accounts interest_income_recoveries: initial_accounts[:unrecognized_interest_income]
assert_accounts unrecognized_interest_income: -0, unrecognized_late_fee_income: -5
assert_accounts unrecognized_interest_income: 0, unrecognized_late_fee_income: -5
print-accounting loan
print-accounting loan -b
print-accounting loan
forward second_obligation.target_date + 1
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
185 + 266.16
print-accounting loan -b
loan.accountant.balances
185 + 266.16
whereami
balances
print-accounting loan
diff
exit!
print-accounting loan
exit!
print-accounting loan
loan.obligations
loan.obligations.find(2).early_payment_amount
loan.obligations
loan.obligations(true)
loan.obligations(true).map(early_payment_amount)
loan.obligations(true).map(&:early_payment_amount)
print-accounting loan
exit!
activity
print-accounting loan
whereami
activity
print-accounting loan
exit!
amount
print-accounting loan
amount
print-accounting loan
print-acounting loan
print-accounting 
print-accounting  -b
exit!
amount
activity
exit!
print-accounting loan
loan.obligations
loan.obligations.mp(&:early_payment_amount)
loan.obligations.map(&:early_payment_amount)
print-accounting 
loan.obligations.map(&:early_payment_amount)
print-accounting loan
print-accounting loan -b
exit!
early_payment
print-accounting loan
print-accounting loan -b
loan
laon
loan
amount
exit!
amount
early_payment
print-accounting lona
print-accounting loan
loan.obligations.map(&:early_payment_amount)
exit!
early_payment
amount
early_payment
amount
early_payment
print-accounting loan
filter_activity.cancelled
filter_activity.cancelled?
filter_activity
filter_activity.cancelled_date
whereami
activity
exit!
activity
filter_activity
filter_activity.cancelled_date
print-accounting loan
print-accounting
activities.find { |a| a.activity_id == 62 }
activities.find { |a| a.activity_id == 62 }.cancelled_date
activity.cancels_activity
activity.cancels_activity == activities.find { |a| a.activity_id == 62 }
activity.cancels_activity
activity.cancels_activity.cancelled_date
activity.cancels_activity.reload.cancelled_date
activity.cancels_activity.cancelled_date
activity.cancels_activity == activities.find { |a| a.activity_id == 62 }
activities.find { |a| a.activity_id == 62 }.cancelled_date
exit!
early_payment
amount
early_payment
activity.effective_date
filter_activity.effective_date
early_payments
edit payments_to_reconcile
payments_to_reconcile(filter_activity, activity.effective_date)
unreconciled_payments
pending_reconciles
find_early_payment_reconciles(activity, start_date, date)
edit find_early_payment_reconciles
print-accounting loan
print-accounting loan -b
exit!
edit payments_to_reconcile
early_payment
amount
print-accounting loan
whereami
early_payment
[early_payment, amount.abs]
edit update_early_payments
amount
print-accounting loan
whereami
early_payment = obligation.early_payment_amount
early_payment, amount.abs
[early_payment, amount.abs]
amount
exit!
print-accounting loan
loan.obligations.map(&:early_payment_amount)
exit!
amount
early_payment
print-accounting loan
activity
whereami
print-accounting loan
loan.obligations.map(&:early_payment_amount)
print-accounting loan
loan.obligations.map(&:early_payment_amount)
exit!
amount
print-accounting loan
whereami
past_due_obligations
@default_calculator
exit!
amount
print-accounting loan
exit!
print-accounting loan
print-accounting loan = Loan.finder(@loans.keys.first, cluster)
loan.obligation
loan.obligations
loan.obligations.first
loan.obligations.first.fee_amount
print-accounting loan -b
amount
@default_calculator
exit!
print-accounting
fee_amount
params[:fee_amount]
caller
exit!
params
fee_amount
edit fee_amount
print-accounting loan
print-accounting fee_amount
params
fee_amount
loan.obligations
loan.obligations.first.fee_adjustment
exit!
print-accounting loan
loan = Loan.finder(@loans.keys.first, cluster)
print-accounting loan
edit amount_to_default
disable=pry
disable-pry
type
children
properties
caller
edit '/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/ast-2.0.0/lib/ast/node.rb'
edit '/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/astrolabe-1.3.0/lib/astrolabe/builder.rb'
type
children 
source_map
caller
"/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/parser-2.2.0.pre.7/lib/parser/builders/default.rb"
edit _
edit "/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/parser-2.2.0.pre.7/lib/parser/builders/default.rb"
exit!
begin_t
end_t
elements
caller
edit "/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/racc-1.4.12/lib/racc/parser.rb"
type
children
children = []
children
edit initialize
caller
edit '/Users/cmwesigwa/.rbenv/versions/rbx-2.3.0/gems/gems/ast-2.0.0/lib/ast/node.rb'
disable-pry
diff
print-accounting loan
exit!
print-accounting
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
print-accounting loan -b
@default_calculator
loan.obligations
loan.obligations.find(9)
loan.obligations.find(9).early_payment_amount
print-accounting loan
print-accounting loan -a interest
print-accounting loan -A interest
exit!
amount
print-accounting loan
amount
print-accounting loan
whereami
activity
amount
print-accounting loan
exit!
activity
print-accounting loan
amount
print-accounting loan
whereami
early_payment
exit!
amount
print-accounting loan
amout
amount
print-accounting loan
whereami
obligation
obligation = current_obligation(early_payment.effective_date)
obligation.early_payment_amount
activity
print-accounting loan
obligation = current_obligation(early_payment.effective_date)
obligation = current_obligation(early_payment.effective_date).early_payment_amount
early_payment
whereami
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
obligation = previous_obligation(obligation.start_date)
obligation
obligation = current_obligation(early_payment.effective_date)
loan.obligations
loan.obligations.map(&:early_payment_amount)
loan.obligations.sort.map(&:early_payment_amount)
print-accounting loan
whereami
exit!
activity
obligation
whereami
print-accounting loa
print-accounting loan
early_payment
amount
print-accounting loan
obligation
loan.obligations.sort.map(&:early_payment_amount)
amount
early_payment
amount
obligation
loan.obligations.sort.map(&:early_payment_amount)
exit!
amount
obligations
amount
obligations
amount
loan.obligations.sort.map(&:early_payment_amount)
print-accounting loan
loan.obligations.sort.map(&:early_payment_amount)
whereami
activity
obligation
obligation.early_payment_amount
print-accounting loan
amount
loan.obligations.sort.map(&:early_payment_amount)
activity
print-accounting
amount
obligation
loan.obligations.sort.map(&:early_payment_amount)
exit!
print-accounting loan
whereami
print-accounting loan
obligations
activity
print-accounting loan
whereami
obligations
result[:amount]
result[:obligation]
print-accounting loan
whereami
exit!
obligation
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
activity
filter_activity
early_payment
obligation
exit!
activity
obligations
loan.obligations.sort.map(&:early_payment_amount)
amount
print-accounting loan
loan.obligations.sort.map(&:early_payment_amount)
whereami
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
disable-pry
print-accounting loan
exit!
print-accounting loan
whereami
expect(third_obligation.reload.early_payment_amount).to eq 50
loan.obligations.sort.map(&:early_payment_amount)
loan.obligations(true).sort.map(&:early_payment_amount)
exit!
amount
entry
entry.cr
accounts
print-accounting loan
amount
accounts
exit!
amount
cancelled_early_payment_entries
entry
print-accounting loan
amount
whereami
amount
sum
amount
print-accounting loan
whereami
disable-pry
print-accounting loan
whereami
expect(second_obligation.reload.early_payment_amount).to eq 50
exit!
print-accounting loan
amount
whereami
amount
print-accounting loan
amount
activity
amount
amount_change_in_activity(activity, :fees_due, :interest_due, :principal_due)
exit!
exit
expect(second_obligation.reload.early_payment_amount).to eq 50
diff 
diff
print-accounting loan
activity
print-accounting loan -b
print-accounting loan
loan
disable-pry
exit!
print-accounting loan
print-accounting loan -b
whereami
diff
306.46 - 171.22
loan
diff
print-accounting loan
diff
exit!
accounts[:customer_balance]
print-accounting loan
whereami
amount
reconcile_customer_balance
print-accounting loan
print-accounting
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting
amount
exit!
print-accounting 
whereami
account
unrecognized_accounts
amount_to_restore
account
amount_to_restore
account
unrecognized_accounts
due_amounts
due_amounts = due_amounts_of_obligation(due_accounts.to_a.flatten, obligation.target_date)
exit!
due_amounts = due_amounts_of_obligation(due_accounts.to_a.flatten, obligation.target_date)
edit due_amounts_of_obligation
exit
exit!
account
amount_to_restore
account
amount_to_restore
account
amount_to_restore
print-accounting 
exit!
amount_to_restore
uncollected_accounts[0..index].reverse
exit!
amount_to_restore
uncollected_accounts[0..index]
print-accounting loan
exit!
diff
print-accounting loan
24.months.ago
RUBY_PLATFORM
RUBY_ENV
RUBY_VERSION
ENV
ruby
.ruby
.ruby --version
print-accounting loan
loan.defaults
loan.defaults.sort
statement
statemet
statement
exit!
query
klas
klass
klass.send(query, *query_args)
statements
loan
exit!
loan.defaults
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
print-accounting loan -A(interest)
print-accounting loan
print-accounting loan -b
loan
exit!
email
eamil.deliver
email.deliver
email.delivered?
email.methods
email.delivery_method
exit!
Rails.env.test?
email = ReportMailer.month_end_reporting.deliver
ActionMailer::Base.delivery_method = :test
email = ReportMailer.month_end_reporting.deliver
exit!
expect(ActionMailer::Base.deliveries).to_not be_empty
email = ReportMailer.month_end_reporting.deliver
ActionMailer::Base.deliveries
expect(ActionMailer::Base.deliveries).to_not be_empty
read_fixture('month_end_reporting')
@current_obligation
@current_obligation.amount
@current_obligation.save! if @current_obligation
accountant.save! unless accountant.persisted?
accountant.activities
accountant.activities.mp(&:amount)
accountant.activities.map(&:amount)
accountant.activities.map(&:activity_amount)
accountant.activities.map(&:activity_amount).max
accountant.save! unless accountant.persisted?
accountant.activities.select { |a| a.activity_id == 876 }
accountant.activities.select { |a| a.activity_id == 876 }.save
accountant.activities.find { |a| a.activity_id == 876 }.save!
accountant.activities.find { |a| a.activity_id == 876 }.amount
accountant.activities.find { |a| a.activity_id == 876 }.activity_amount
accountant.activities.find { |a| a.activity_id == 876 }.interest_due
accountant.activities.find { |a| a.activity_id == 876 }.amount
accountant.activities.find { |a| a.activity_id == 876 }.activity_amount
accountant.activities.find { |a| a.activity_id == 876 }.save
wtf?
wtf??
wtf??>
wtf???
accountant.activities.find { |a| a.activity_id == 876 }.save
wtf???
accountant.activities.find { |a| a.activity_id == 876 }.save
$1
$2
accountant.activities.find { |a| a.activity_id == 876 }.save
accountant.activities.find { |a| a.activity_id == 876 }.changes
accountant.activities.find { |a| a.activity_id == 876 }.save
exit!
e
accountant.activities.find { |a| a.activity_id == 876 }.save
@connection.prepare nextkey, sql
whereami
accountant.activities.find { |a| a.activity_id == 876 }.
entries
print-accounting loan
print-accounting 
exit!
accounts[:fee_income]
accounts[:unrecognized_fee_income]
print-accounting loan
print-accounting loan -b
exit!
current_activity
current_activity.entries
print-accounting
print-accounting -b
print-accounting loan
print-accounting loan -b
billing_fee 100
assert_accounts uncollected_unrecognized_fees: initial_accounts[:uncollected_unrecognized_fees] + 10, unrecognized_billing_fee_income: -10
print-accounting loan -b
create_end_of_cycle amount: 520, obligation: 6, interest: 100
create_end_of_cycle amount: 100, obligation: 6
exit!
assert_accounts uncollected_unrecognized_late_fees: 0
assert_accounts uncollected_unrecognized_fees: initial_accounts[:uncollected_unrecognized_fees] - 100
assert_accounts  unrecognized_late_fee_income: 0, unrecognized_fee_income: initial_accounts[:unrecognized_fee_income] + 100,
0
assert_accounts  unrecognized_late_fee_income: 0, unrecognized_fee_income: initial_accounts[:unrecognized_fee_income] + 100
print-accounting loan
whereami
assert_accounts  unrecognized_late_fee_income: 0
assert_accounts unrecognized_billing_fee_income: initial_accounts[:unrecognized_billing_fee_income] + 100
diff
print-accounting loan
diff
loan
diff
exit!
diff
edit detect
diff
load ' /export/loaner/lib/divergence.rb'
load '/export/loaner/lib/divergence.rb'
diff
exit!
diff
exit!
diff
diff.key?(:disbursement_account)
diff.valueskey?(:disbursement_account)
diff.values.key?(:disbursement_account)
diff.values.firstkey?(:disbursement_account)
diff.values.first.key?(:disbursement_account)
exit!
diff
print-accounting loan
exit!
print-accounting loan
loan
task
diff
whereami
BalanceChecker.check_by_loan(cluster, [cnuapp_loan_id], task_id: task[:task_id])
exit!
query
edit cnuapp_balances
diff
print-accounting loan
diff
task
exit
exit!
diff
print-accounting loan
exit!
task
exit!
diff
print-accounting loan
diff
print-accounting loan
whereami
diff
task_id
task
print-accounting loan
loan.reload
print-accounting loan
loan.accountant = nil
loan = nil
whereami
loan = Loan.finder cnuapp_loan_id, cluster
print-accounting loan
diff
loan
diff
task
loan
exit!
balance(:interest)
print-accounting loan
balance(:interest)
whereami
balance(:interest)
balance(:interest) / 
balance(:interest) / 2
print-accounting loan -b
print-accounting loan
whereami
today
loan
7.81 / 0.71
print-accounting loan -b
print-accounting loan 
exit!
$its_pry_time = true
print-accounting 
print-accounting simulator
print-accounting simulator -b
exit!
print-accounting 
exit!
diff
loan.activities.map { |a| Memo[a.entries.map(&:memo_id)] }
loan.accountant.activities.map { |a| Memo[a.entries.map(&:memo_id)] }
loan.accountant.activities.map { |a| Memo[*a.entries.map(&:memo_id)] }
print-accounting loan
exit!
loan.accountant.activities.map { |a| Memo[*a.entries.map(&:memo_id)] }
exit!
unchanged
print-accounting loan
whereami
today
reconcile_customer_balance
accounts[:customer_balance]
print-accounting loan
print-accounting loan -b
whereami
edit reconcile_customer_balance
reconcile_amount
print-accounting loan
print-accounting loan -b
today
whereami
reconcile_amount
accounts[:customer_balance].abs
whereami
past_due_obligations
@default_calculator
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
diff
diff[loan.cnuapp_loan_id]
loan.cnuapp_loan_id
diff[loan.cnuapp_loan_id.to_s]
exit!
diff[loan.cnuapp_loan_id.to_s]
edit detect
exit!
diff
print-accounting loan
task
print-accounting loan
task
loan.accountant
whereami
loan = Loan.finder cnuapp_loan_id, cluster
print-accounting loan
exit!
@new_order
whereami
exit!
entry
activity
print-accounting loan
previous_obligation(today)
exit!
print-accounting loan
edit finalize_payoff_amounts
print-accounting loan
exit!
print-accounting loa
print-accounting loan
accountant.finalize_payoff_amounts
previous_obligation(today)
today
exit!
previous_obligation(today)
@default_calculator
print-accounting 
whereami
amount
@default_calculator
invalidate_default_calculator
whereami
past_due_obligations(today)
@default_calculator
print-accounting loan
@default_calculator
exit!
obligation
print-accounting loan
whereami
activity_type
amount
current_activity
current_activity.entries
obligation.amount
balances
print-accounting loan -b
balance(:current)
balance[:called_due]\
;
balance(:called_due)
balance(:called_due) + balance(:current)
balance(:called_due) + balance(:current) + balance(:current_unrecognized)
amount
whereami
print-accounting loan
@default_calculator
past_due_obligations(today)
22.67 + 218.0
past_due_obligations(today)
39.67 + 201.0
print-accounting loan
amount
activity_type
exit!
past_unpaid_obligations
@default_calculator
whereami
print-accounting loan
loan.obligations
print-accounting loan
past_unpaid_obligations
past_unpaid_obligations.map(&:remaining_balance)
edit finalize_obligation_amounts
print-accounting loan
whereami
obligation_sum
outstanding_amount
exit!
correction
obligation.amount
correction
print-accounting loan
whereami
edit finalize_obligation_amounts
print-accounting loan
whereami
loan.obligations
loan.obligations.first.amount
first_obligation.amount
exit!
print-accounting loan
exit!
whereami
correction
loan.obligations
past_unpaid_obligations.map(&:remaining_balance).sum
invalidate_default_calculator
past_unpaid_obligations.map(&:remaining_balance).sum
@default_calculator
exit!
whereami
exit!
obligation_sum
print-accounting loan
@default_calculator
today
loan.simulated_to
caller
exit!
date
caller
whereami
loan.simulated_to
print-accounting loan
loan.simulated_to
date
print-accounting loan
whereami
date
loan.simulated_to
date
loan.simulated_to
print-accounting loan
loan.simulated_to
print-accounting loan
loan.simulated_to
print-accounting loan
date
loan.simulated_to
print-accounting loan
loan.simulated_to
date
print-accounting loan
caller
date
loan.simulated_to
print-accounting loan
exit!
date
@date
today
print-accounting loa
print-accounting loan
date
loan.obligations
whereami
obligation_sum
past_unpaid_obligations.map(&:remaining_balance)
past_unpaid_obligations
edit @default_calculator
past_unpaid_obligations
obligations
obligations.first.target_date >= @today
@today
exit!
edit forward
edit past_unpaid_obligations
print-accounting loan
self
current_activity
exit!
correction
print-accounting loan
current_activity
whereami
caller
print-accounting loan
exit!
expect(third_obligation.reload.amount).to eq initial_amount
correction
print-accounting loan
exit!
activity_to_cancel.activity_type,
;
activity_to_cancel.activity_type
exit
obligation_sum
outstanding_amount
correction
correction = outstanding_amount - obligation_sum
print-accounting loan
correction = outstanding_amount - obligation_sum
print-accounting loan
whereami
obligation
exit!
obligation_sum
print-accounting loan
whereami
correction = outstanding_amount - obligation_sum
obligation_sum = past_unpaid_obligations(obligation.target_date + 1).map(&:remaining_balance).sum
correction = outstanding_amount - obligation_sum
obligation_sum
outstanding_amount
obligation
invalidate_default_calculator
obligation_sum = past_unpaid_obligations(obligation.target_date + 1).map(&:remaining_balance).sum
correction = outstanding_amount - obligation_sum
exit!
correction = outstanding_amount - obligation_sum
print-accounting loan
whereami
principal_balance
current_obligation.reload.amount
whereami
exit!
whereami
print-accounting loan
whereami
obligation_sum = past_unpaid_obligations(obligation.target_date + 1).map(&:remaining_balance).sum
outstanding_amount = balance(:currently_due) + balance(:past_due) + balance(:charged_off)
current_activity
current_activity.entries
exit!
correction = outstanding_amount - obligation_sum
edit update_obligation_amounts
print-accounting loan
whereami
accounted_for = loan.obligations.reduce(0) { |a, e| a + e.amount }
forward second_obligation.target_date
print-accounting
loan.obligations
whereami
forward sixth_obligation.target_date
print-accounting
loan.obligations
exit!
correction = outstanding_amount - obligation_sum
obligation_sum
print-accounting loan
print-accounting 
current_activity
current_activity.entries
whereami
outstanding_amount
obligation_sum
@default_calculator
edit update_obligation_amounts
print-accounting loan
loan
whereami
amount
@default_calculator
today
exit!
past_due_obligations(today)
past_due_obligations(today + 1)
today
caller
exit!
amount
print-accounting loan
exit!
amount
print-accounting loan
correction
print-accounting loan
whereami
current_activity
current_activity.amount
current_activity.activity_amount
obligation_sum
outstanding_amount
past_unpaid_obligations(obligation.target_date + 1)
whereami
@default_calculator
obligation.target_date + 1
date
today
current_activity
obligation_sum + 49.78
print-accounting 
whereami
obligation_sum
print-accounting loan
whereami
obligation_sum
obligation_sum + 36.79
outstanding_amount
print-accounting loan -b
obligation_sum
whereami
correction
current_activity
61.78 - 49.78
print-accounting loan 
whereami
print-accounting loan
correction
current_activity
amount
print-accounting loan
exit!
amount
print-accounting loan
amount
whereami
print-accounting
print-accounting -b
whereami
print-accounting loan
amount
whereami
past_due_obligations
amount
past_due_obligations(today)
invalidate_default_calculator
past_due_obligations(today)
17.12 + 26.07
loan.obligations
exit!
date
print-accounting loan
correction
whereami
current_activity
correciton
correction
49.78 - 75.85
75.85 - 49.78
whereami
@default_calculator
exit!
correction
obligation_sum
outstanding_amount
whereami
past_unpaid_obligations(obligation.target_date + 1)
print-accounting loan
whereami
exit
exit!
correction
disable-pry
edit cures_call_due?
print-accounting 
whereami
exit!
whereami
pritn-accounting loan
print-accounting loan
whereami
obligaton
obligation
obligation_sum = past_unpaid_obligations(end_date).map(&:remaining_balance).sum
outstanding_amount = balance(:currently_due) + balance(:past_due) + balance(:charged_off)
correction = outstanding_amount - obligation_sum
end_date
exit!
obligation_sum = past_unpaid_obligations(end_date).map(&:remaining_balance).sum
outstanding_amount = balance(:currently_due) + balance(:past_due) + balance(:charged_off)
correction = outstanding_amount - obligation_sum
disable-pry
exit!
diff
print-accounting loan
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
loan
print-accounting loan
today
@default_calculator
whereami
loan.obligations.sort.select { |o| o.obligation_id <= 55 }
@default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
214.3 - 505.97
print-accounting loan
loan.obligations.find(55)
loan.obligations.find(55).early_payment_amount
loan.obligations.sort.select { |o| o.obligation_id <= 55 }
@default_calculator
@default_calculator.default_history
@default_calculator
@default_calculator.build_default_history
invalidate_default_calculator
whereami
past_unpaid_obligations(today)
print-accounting loan
whereami
past_unpaid_obligations(today)
371.39 - 157.09
whereami
@default_calculator.build_default_history
invalidate_default_calculator
past_unpaid_obligations(today + 1)
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
whereami
today
currently_paid
exit!
print-accounting
correction
current_activity
edit 
edit update_obligation_amounts
correction
current_activity
print-accounting loan
whereami
obligation_sum
oustanding_amount
outstanding_amount
current_activity
past_unpaid_obligations(end_date)
@default_calculator
loan.obligations.
map(&:early_payment_amount)
exit!
edit update_obligation_amounts
print-accounting loan
loan.obligations
loan.obligations.sort
print-accounting loan -b
exit!
print-accounting oan
print-accounting loan
print-accounting loan -b
exit!
loan
exit!
diff
exit!
correction
print-accounting loan
loan.obligations.
map(&:early_payment_amount)
loan.obligations.map(&:early_payment_amount)
loan.obligations.sort.map(&:early_payment_amount)
loan.obligations
loan.obligations.sort
exit!
amount
print-accounting 
print-accounting loan
exit!
activity
print-accounting loa
print-accounting loam
print-accounting loan
early_payment
print-accounting loan
early_payment
print-accounting loan
whereami
early_payments
filter_activity
payments_to_reconcile(filter_activity)
edit payments_to_reconcile
payments_to_reconcile(filter_activity)
unreconciled_payments
pending_reconciles
print-accounting loan
whereami
reconciles = find_early_payment_reconciles(activity, start_date, activity.effective_date)
start_date = unreconciled_payments.first[0].effective_date
whereami
reconciles = find_early_payment_reconciles(activity, start_date, activity.effective_date)
pending_reconciles
exit!
results
exit!
print-accounting loan
whereami
reconcile
reconciles
results
activity
reconciles
early_payments
exit!
early_payments
unreconciled_payments.any?
unreconciled_payments
unreconciled_payments.map(&:values)
unreconciled_payments.values
unreconciled_payments.values.merge
unreconciled_payments.values.each_with_object(Set.new) { |reconciles, set| set.merge(reconciles) }
exit!
early_payments
payments
activity
print-accounting loan
early_payment
payments
activity
payments
activity
print-accounting loan
activity
payments
print-accounting loan
early_payment
edit unreconciled_early_payments
payments
activity
edit payments_to_reconcile
whereami
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
amount
current_activity
diff
print-accounting loan
exit@
exit!
print-accounting loan
whereami
past_unpaid_obligations(today)
@default_calculator
exit!
obligation_sum
outstanding_amount
current_activity
correction = outstanding_amount - obligation_sum
print-accounting loan
activity
current_activity
@default_calculator
current_activity
whereami
@default_calculator
past_unpaid_obligations(today)
@default_calculator
print-accounting loan
@default_calculator
exit!
correction
print-accountign 
print-accounting
whereami
current_activity
correction
161.53 - 159.5
obligation
obligation.early_payment_amount
whereami
loan.obligations.sort
loan.obligations.find(39).early_payment_amount
whereami
print-accounting loan
whereami
obligation_amount
obligation_sum
outstanding_amount
balance(:currently_due)
whereami
exit!
eco
eoc
edit end_of_cycle
exit!
print-accounting loan
whereami
past_unpaid_obligations(today)
whereami
invalidate_default_calculator
diff
pending_reconciles
print-accounting 
actvitiy
activtiy
activity
whereami
unreconciled_payments
print-accounting
whereami
caller
whereami
print-accounting
pending_reconciles
whereami
unreconciled_payments
exit!
pending_reconciles
print-accounting loan
caller
exit!
print-accounting
activity
whereami
activity.cancelled?
exit!
print-accounting loan
whereami
pending_reconciles
start_date = unreconciled_payments.first[0].effective_date
unreconciled_payments
unreconciled_payments.first
exit!
payments
early_payment
print-accounting
amount
whereami
payments
disable-pry
expect(third_obligation.reload.early_payment_amount).to eq 100
print-accounting loan
exit!
disable-pry
print-accounting loan
whereami
payments
amount
unreconciled_tasks
print-accounting loan
exit!
perfectly_reconciled
whereami
unreconciled_payments
print-accounting loan
exit!
whereami
reconcile
early_payments
reconcile
early_payments.each { |_,unreconciled| unreconciled.delete(reconcile) }
early_payments.each { |_,unreconciled| binding.pry ; unreconciled.delete(reconcile) }
unreconciled
unreconciled.delete(reconcile)
reconcile
exit!
reconcile
early_payments.each { |_,unreconciled| unreconciled.delete(reconcile.first) }
exit!
unreconciled_tasks
disable-pry
amount
print-accounting lona
print-accounting loan
amount
exit!
past_unpaid_obligations(today)
print-accounting loan
print-accounting loan -b
whereami
@default_calculator
loan
print-accounting loa
print-accounting loan
exit!
correction
print-accounting loan
whereami
obligation_sum
oustanding_amount
outstanding_amount
outstanding_amount + 20.98 + 13.99
exit!
simulating_accountant
accountant_as_of(end_date: options[:date]
)
accountant = simulating_accountant(start_date: options[:date])
a = false
a ||= true
a
exit!
outstanding_amount
obligation_sum == outstanding_amount
exit!
correction
print-accounting loan
whereami
end_date
exit
exit!
correction
disable-pry
correction
disable-pry
print-accounting loan
whereami
activity_type
exit!
obligation
early_payment
print-accounting loan
early_payment
loan.obligations
exit!
loan.obligations
loan
loan.obligations.sort
activity
obligation
obligation = current_obligation(filter_activity.effective_date)
exit!
balance(:outstanding)
exit!
amount
print-accounting loan
amount
@default_calculator
amount
whereami
past_due_obligations(today)
print-accounting loan -b
loan
@default_calculator
print-accounting loan
exit!
correctoin
correction
print-accounting loan
whereami
outstanding_amount
obligation_sum
whereami
correction
current_activity
@default_calcualator
@default_calculator
exit!
past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])
print-accounting loan
whereami
amount
@default_calculator
today
print-accounting loan
exit!
past_due_obligations = past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])]
past_due_obligations = past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])
@default_calculator
whereami
balance(:outstanding)
balance(:past_due_
)
balance(:past_due)
186.92 + 158.88
accounts
12.22 + 63.93 + 320.6 
balance(:past_due) - amount
whereami
correction
current_activity
print-accounting loan
whereami
balance(:currently_due)
balance(:past_due)
balance(:charged_off)
accounts
166.58 + 127.36
exit!
correction
edit cures_call_due?
correction
current_activity
disable-pry
edit update_obligation_amounts
correction
current_activity
print-accounting loan
current_activity
current_activity.entries
end_of_cycle
current_activity
current_activity.entries
whereami
obligation_sum
whereami
correction
current_activity
today
@default_calculator
adjusting
whereami
obligation
obligation.early_payment_amount
exit!
amount
print-accounting
whereami
activity
amount_change_in_activity(activity, *(early_payment_accounts.push(:customer_balance)))
amount_change_in_activity(activity, :late_fees_ar)
amount_change_in_activity(activity, :late_fees_called_due)
amount_change_in_activity(activity, *(early_payment_accounts.push(:customer_balance,:unrecognized_late_fees)))
exit!
amount
print-accounting
amount
print-accounting
amount
print-accounting
correction
print-accounting loan
whereami
correctoin
correction
obligation_sum
@default_calculator
whereami
correction
@default_calculator
obligation_sum = past_unpaid_obligations(end_date).map(&:remaining_balance).sum
outstanding_amount = balance(:currently_due) + balance(:past_due) + balance(:charged_off)
correction
correction = outstanding_amount - obligation_sum
print-accounting loan
exit!
amount
print-accounting
amount
print-accounting
amount
print-accounting
amount
print-accounting
amount
print-accounting
amount
obligation.early_payment_amount
obligation
obligation.early_payment_amount
whereami
adjusting
correction
print-accounting loan
print-accounting
@default_calculator
print-accounting loan
print-accounting loan -b
exit!
edit update_early_payments
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
print-accounting loan -
print-accounting loan -b
whereami
currently_paid
accounts
balance(:currently_due)
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
amount
obligation = past_unpaid_obligations(today, extra_payments: currently_paid).first
due_amounts = payment_amounts_of_obligation(credit_accounts, obligation)
credit_accounts
print-accounting loan
whereami
amount
due_accounts = { principal_due: [:uncollected_principal_called_due],
  fees_due: [:uncollected_unrecognized_fees, :uncollected_unrecognized_late_fees],
interest_due: [:uncollected_unrecognized_interest] }
due_accounts
due_accounts.to_a
due_accounts.to_a.flatten
exit!
end_of_cycle
exit!
all_amounts
all_amounts.keep_if {|account,_| end_of_cycle_accounts.keys.include?(account) }
edit due_amounts_of_obligation
due_amounts
print-accounting loan
due_amounts
print-accounting loan
whereami
obligation.target_date
print-accounting 
edit restore_due_amounts
correction
print-accounting 
exit!
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
print-accounting loan
obligation
whereami
amount
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
obligation
today
print-accounting 
obligation
due_amounts
obligation
due_amounts
obligation
due_amounts
obligation
print-accounting 
print-accounting loan
whereami
obligation
today
print-accounting loan
print-accounting
obligation
due_amounts
print-accounting
obligation
print-accounting
due_amounts
obligation
print-accounting
due_amounts
print-accounting
obligation
due_amounts
obligation
print-accounting
due_amounts
obligation
due_amounts
print-accounting
due_amounts
whereami
obligation
print-accounting
obligation
due_amount
due_amounts
edit due_amounts_of_obligation
whereami
due_amounts_of_obligation(obligation.target_date)
all_amounts
today
today == Date.parse('11-06-2012')
today == Date.parse('2012-11-06')
today.to_s
exit!
due_amounts
print-accounting loan
whereami
edit due_amounts_of_obligation
due_amounts = due_amounts_of_obligation(obligation.target_date)
end_of_cycle_accounts.keys.each { |account, related_accounts| all_amounts[account] += all_amounts.values_at(*related_accounts).sum }
all_amounts
edit due_amounts_of_obligation
due_amounts = due_amounts_of_obligation(obligation.target_date)
end_of_cycle_accounts.each { |account, related_accounts| all_amounts[account] += all_amounts.values_at(*related_accounts).sum }
all_amounts
due_amounts = due_amounts_of_obligation(obligation.target_date)
edit due_amounts_of_obligation
correction
print-accounting
exit!
print-accounting
due_amounts
print-accounting
due_amounts
print-accounting
exit!
due_amounts
print-accounting
caller
whereami
due_amounts
amount
current_activity
print-accounting
whereami
edit restore_due_amounts
due_amounts
account
exit!
account
amount_to_restore
index
edit restore_due_amounts
print-accounting
print-accounting loan
index
account
index
account
due_amounts
exit!
print-accounting
whereami
due_amounts
current_activity
current_activity.entries
print-accounting
edit restore_due_amounts
due_amounts
print-accounting
due_amounts
correction
print-accounting loan
print-accounting loan -b
whereami
correction
current_activity
obligation.amount
@default_calculator
print-accounting loan
print-accounting 
print-accounting loan
correction
print-accounting 
print-accounting loan
correction
current_activity
whereami
obligation.amount
print-accounting 
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
due_amounts = payment_amounts_of_obligation(obligation)
obligation = past_unpaid_obligations(today, extra_payments: currently_paid).first
due_amounts = payment_amounts_of_obligation(obligation)
amount
print-accounting
whereami
exit!
edit payment_amounts_of_obligation
account
due_amount
[amount, accounts[account], due_amount].min
print-accounting loan
whereami
due_amounts
exit!
due_amounts
account
whereami
print-accounting loan
whereami
amount
current_activity.entries
obligation
obligation.remaining_balance
currently_paid
@default_calculator
whereami
print-accounting
whereami
currently_paid
current_activity
whereami
due_amounts
40 + 19.12 + 10.88
print-accounting -b
due_amounts
accounts
balance(:past_due)
balance(:currently_due)
print-accounting loan -b
accounts
whereami
print-accounting loan
@default_calculator
whereami
current_activity
@default_calculator.payments
@default_calculator.payments.map(&:amount).sum
@default_calculator.obligations.map(&:amount).sum
@default_calculator.obligations.map(&:amount).sum -  @default_calculator.payments.map(&:amount).sum
print-accounting loan
print-accounting loan -a payoff, cancel
print-accounting loan -a payoff|cancel
print-accounting loan -a payoff
whereami
loan.obligations.map(&:early_payment_amount)
print-accounting loan 
whereami
accounts
due_amounts
19.12 + 10.88 + 40
print-accounting loan -b
accounts
current_activity
current_activity.entries
133.28 - 69.12
134.13 - 10.88
today
simulating_accountant(start_date: Date.parse('2012-12-13'))
@accountant.simulating_accountant(start_date: Date.parse('2012-12-13'))
@accountant.simulating_accountant(start_date: Date.parse('2012-12-13')).balances
@default_calculator.obligations.map(&:amount).sum -  @default_calculator.payments.map(&:amount).sum
@default_calculator.obligations.map(&:amount).sum
@default_calculator.obligations.map(&:remaining_balance).sum
@accountant.simulating_accountant(start_date: Date.parse('2012-12-13')).balances
current_activity
whereami
print-accounting
@accountant.simulating_accountant(start_date: Date.parse('2012-11-30')).balances
whereami
exit!
due_amounts
obligation.remaining_balance
end_of_cycle_amounts
end_of_cycle_accounts
exit!
order
due_amounts
exit!
due_amounts_left
exit!
diff
print-accounting loan
print-accounting loan -a default
print-accounting loan 
exit!
obligation
prtint-accounting loan
print-accounting loan
obligation
whereami
due_amounts = payment_amounts_of_obligation(obligation)
edit payment_amounts_of_obligation
due_amounts = payment_amounts_of_obligation(obligation)
due_amounts
obligation.remaining_balance
edit payment_amounts_of_obligation
due_amounts = payment_amounts_of_obligation(obligation)
due_amounts
return due_amounts if due_amounts.empty?
due_amounts_left
obligation.remaining_balance
order
due_amounts[account]
accounts
whereami
edit payment_amounts_of_obligation
due_amounts = payment_amounts_of_obligation(obligation)
due_amounts_left
due_amounts = payment_amounts_of_obligation(obligation, consider_accounts: false)
due_amounts_left
edit payment_amounts_of_obligation
diff
exit!
diff
print-accounting loan
balances
print-accounting loan
loan.obligations
exit!
print-accounting loan
payoff 100
print-accounting loan
diff
print-accounting loan
print-accounting loan =b
print-accounting loan -b
diff
loan.product
exit!
diff
loan.product
print-accounting loan
diff
loan.product
print-accounting loan
diff
print-accounting loan
exit!
activity
print-accounting 
whereami
print-accounting loan -b
loan
print-accounting loan
print-accounting loan -a new_draw
exit!
diff
print-accounting loan
diff
print-accounting loan -b
exit!
task
diff
accounts
accountant.accounts
task
diff
task
diff
task
accounts
accountant.accounts
task
diff
accountant.accoutns
accountant.accounts
task
loan.accountant.accounts
accountant.accounts
print-accounting accountant
print-accounting accountant -b
whereami
diff
edit BalanceChecker.check_by_loan
BalanceChecker.check_by_loan(cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date])
cnuapp_balances
edit balances
print-accounting loan
exit!
print-accounting loan -a late_fee
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
amount
exit!
amount
print-accounting loan
exit!
activity_or_type
current_activity
activity_or_type
exit!
print-accounting loan
exit!
interest_due
print-accounting loan
current_activity
balance(:interest)
loan
diff
print-accounting loan
print-accounting loan -b
diff
loan
print-accounting loan 
balance(:outstanding)
accountant.balance(:outstanding)
loan.accountant.balance(:outstanding)
print-accounting loan -b
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
loan
exit
print-accounting loan
current_activity
current_activity.entries
whereami
balance(:interest)
print-accounting
current_activity
adjusting
caller
whereami
balance(:interest)
exit!
balance(:interest)
print-accounting loan
exit!
balance(:interest)
example
disable-pry
print-accounting lona
print-accounting loan
balance(:interest)
print-accounting lona
print-accounting loan
loan.cluster
exit!
print-accounting loan
diff
print-accounting loan
exit!
print-accounting 
print-accounting simulator
exit!
balance(:interest)
edit reconcile_interest
obligation.interest_due
interest_accrued
obligation
print-accounting lona
print-accounting loan
current_activity
print-accounting loan
print-accounting 
print-accounting
print-accounting loan
print-accounting
whereami
obligation.interest_due
print-accounting
print-accounting loan
obligation.interest_due
exit!
l = Loan.new
l.changed?
l.cluster = "gb"
l.changed?
realized_interest
amount
print-accounting loan
whereami
exit!
diff
print-accounting loan
loan.realized_interest
exit!
interest
print-accounting loan
whereami
loan.realized_interest
exit!
amount
print-accounting loan
current_activity
current_activity.entries
exit!
update_realized_interest(current_activity)
print-accounting 
whereami
current_activity
print-accounting
exit!
print-accounting
loan.realized_interest
exit!
update_realized_interest(current_activity)
edit update_realized_interest
exit!
rules.pay_interest_in_reconcile?
exit!
rules.pay_interest_in_reconcile?
activity
exit!
rules.pay_interest_in_reconcile?
activity
activity.type?(:realize_interest, :payoff, :reconcile, :call_due)
rules.pay_interest_in_reconcile?
edit update_realized_interest
amount
print-accounting 
activity
expect(third_obligation.reload.amount).to eq non_recognized
403.36 + 1.26
print-accounting
loan.realized_interest
exit!
amount
loan.realized_interest
print-accounting loan
exit!
loan.realized_interest
loan.reload.realized_interest
loan
exit!
loan
loan.realized_interest
interest
loan.realized_interest += interest
loan
loan.with_lock
loan.with_lock {}
loan
exit!
loan
third_obligation.reload.amount
loan
print-accounting loan
whereami
exit!
loan
activity
amount
realized_interest_change_in_activity(act)
relevant_activities
whereami
print-accounting loan
print-accounting 
current_activity
current_activity.entries
whereami
realized_interest_change_in_activity(activity)
edit realized_interest_change_in_activity
realized_interest_change_in_activity(activity)
entry
entry.dr
exit!
amount
current_activity.entries
edit realized_interest_change_in_activity
exit!
amount
exit!
loan.realized_interest
third_obligation.reload.amount
expect(third_obligation.reload.amount).to eq non_recognized
non_recognized
print-accounting loan
whereami
third_obligation.reload.amount
initial_balances.values_at(:current, :called_due, :current_unrecognized).sum
initial_balances
exit!
print-accounting loan
exit!
expect(third_obligation.reload.amount).to eq non_recognized
print-accounting loan
exit!
expect(third_obligation.reload.amount).to eq non_recognized
assert_balances current: 0, currently_due: 0, past_due: initial_balances[:past_due] + non_recognized + modification
print-accounting loan
balances
accounts
exit!
initial_amount
print-accounting loan
whereami
third_obligation.reload.amount
expect(third_obligation.reload.amount).to eq initial_amount
expect(third_obligation.reload.amount).to eq non_recognized + modification
exit!
print-accounting loan
exit!
expect(loan.realized_interest).to eq 0
print-accounting loan
assert_accounts uncollected_interest: current_interest
assert_accounts uncollected_interest: current_interest, interest_income: current_interest_income
print-accounting loan
whereami
exit!
assert_accounts uncollected_interest: current_interest, interest_income: current_interest_income
charge_off amount: 1
print-accounting loan
loan.realized_interest
exit!
balance(:interest)
print-accounting loan
print-accounting loan -b
whereami
reverse_interest_entry(interest)
whereami
current_activity
current_activity.entries
reverse_interest_entry(balance(:interest))
edit reverse_interest_entry
reverse_interest_entry(balance(:interest))
amount
charged_off?
called_due?
exit!
amount
print-accounting loan
assert_accounts uncollected_interest: current_interest
interest_income: current_interest_income
assert_accounts uncollected_interest: current_interest, interest_income: current_interest_income
print-accounting loan
exit!
assert_accounts uncollected_interest: current_interest, interest_income: current_interest_income
print-accounting loan
exit!
diff
print-accounting loan
print-accounting loan -a realize
print-accounting loan -A realize
print-accounting loan realize
print-accounting loan
diff
-1030.68 + 955.62
loan.realized_interest
loan
exit!
diff
print-accounting loan
exit!
diff
1624.25 - 1549.19
exit!
diff
print-accounting loan
loan
loan.realized_interest
diff
exit!
loan.realized_interest
edit update_realized_interest
update_realized_interest(current_activity)
loan.realized_interest
diff
print-accounting loan
charge_off 1
print-accounting loan
exit!
exit!
print-accounting loan
exit!
diff
print-accounting loan
diff
print-accounting loan -b
exit!
print-accounting
whereami
adjusting
print-accounting loan
print-accounting 
exit!
print-accounting loan
print-accounting 
whereami
print-accounting 
print-accounting loan
print-accounting 
loan.realized_interest
print-accounting 
print-accounting loan
loan.realized_interest
wherami
whereami
exit!
amount
print-accounting 
amount
activity
print-accounting
print-accounting loan
whereami
exit!
activity
amount
print-accounting
print-accounting loan
whereami
print-accounting loan
current_activity
whereami
options
adjusting
amount
loan.realized_interst
loan.realized_interest
print-accounting loan
exit!
edit update_realized_interest
activity
adjusting
options
activity
print-accounting loan
whereami
amount
print-accounting
activity
print-accounting
activity
options
whereami
activity
adjusting
exit!
activity
activity.task_id
exit!
activity
current_activity
relevant_activities
adjusting
print-accounting
activity.task_id
activity
relevant_activities
relevant_activities.last
relevant_activities.last.task_id
exit!
activity_to_cancel
task_id
date
activity_to_cancel.task_id
exit!
relevant_activities.last.task_id
exit!
activity
exit!
relevant_activities.last
print-accounting
options
print-accounting loan
whereami
loan.realized_interest
exit!
amount
print-accounting
options
activity
relevant_activities
relevant_activities.last.task_id
exit!
activity.task_id
activity
print-accounting loan
activity.cancelled_date
relevant_activities
whereami
exit!
loan.realized_interest
print-accounting
adjusting
exit!
activity
print-accounting
print-accounting loan
whereami
[accrued_amount - realized_amount, FinanceXL::ZERO].max
accrued_amount
realized_amount
relevant_activities
exit!
options
activities.each_with_object([]) do |act, set|
  break if act == activity
  next if act.cancelled?
  next unless activity_type_ids.include?(act.activity_type_id)
  set << act
end
edit
exit!
print-accounting loan
whereami
accrued_amount
relevant_activities
activity
options[:cancelling]
loan.realized_interest
activity
exit!
diff
print-accounting loan
realize_interest_id = FinanceXL::ActivityType[:realize_interest].activity_type_id
exit!
diff
print-accounting loan
exit!
amount
actiivty
activity
edit update_realized_interest
amount
activity
options[:cancelling]
exit!
activity
amount
print-accounting loan
activity
amount
activity
options[:cancelling]
loan.realized_interest
activity
amount
activity
amount
activity
amount
print-accounting 
print-accounting loan
activity
options
loan.realized_interest
print-accounting 
diff
expect(third_obligation.reload.amount).to eq initial_amount
xpect(loan.realized_interest).to eq interest_to_realize
expect(loan.realized_interest).to eq interest_to_realize
loan.realized_interest
print-accounting loan
exit!
print-accounting loan
whereami
loan.realized_interest
initial_balances[:interest] - modification
4.78 - 1.26
realize
exit!
loan.realized_interest
print-accounting loan
whereami
loan.realized_interest
amount
options
exit!
amount
print-accounting loan
whereami
loan.realized_interest = [amount, FinanceXL::ZERO].max
loan.changed?
loan.realized_interest
print-accounting loan
loan.realized_interest
print-accounting loan
amount
options
whereami
amount =  realized_interest_change_in_activity(activity)
exit!
expect(third_obligation.reload.amount).to eq initial_amount
expect(loan.realized_interest).to eq interest_to_realize
interest_to_realize
print-accounting loan
whereami
call_due
exit!
amount
print-accounting loan
exit!
amount
print-accounting loan
expect(third_obligation.reload.amount).to eq initial_amount
expect(loan.realized_interest).to eq interest_to_realize
amount
print-accounting loan
exit
diff
exit!
diff
print-accounting loan
whereami
diff
whereami
diff
-595.52 + 580.04
diff
loan.realized_interest
print-accounting loan -a realize_interest
loan
print-accounting loan
exit!
diff
exit!
diff
print-accounting loan
loan.interest_due
loan.realized_interest
diff
334.58 - 379.10
loan
exit!
loan.realized_interest
print-accounting loan
print-accounting 
loan.realized_interest
print-accounting 
loan.realized_interest
print-accounting 
print-accounting loan
loan.realized_interest
whereami
print-accounting
whereami
exit!
print-accounting
loan.realized_interest
disable-pry
loan.realized_interest
print-accounting
print-accounting loan
print-accounting
loan.realized_interest
print-accounting
loan.realized_interest
diff
-595.52
-595.52 + 580.04
exit!
memo
activity
entry
print-accounting loan
loan
exit!
memo
print-accounting loan
exit!
diff
print-accounting loan
loan
diff
loan
diff
print-accounting loan
exit!
memo
entry
print-accounting
loan
exit!
diff
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan 
whereami
loan.realized_interest
exit!
print-accounting 
loan.realized_interest
21.39 - 20.15
exit!
loan.realized_interest
print-accounting
start_date
exit!
diff
print-accounting loan
exit!
amount
print-accounting loan
exit!
diff
print-accounting loan
exit!
print-accounting loan
start_date
loan.realized_interest
exit!
start_date
loan.realized_interest
start_date
print-accounting loan
loan.realized_interest
print-accounting loan
loan.realized_interest
exit!
end_date
print-accounting loan
whereami
amount
exit!
amount
print-accounting loan
whereami
amount
loan.realized_interest
exit!
print-accounting
adjusting
whereami
finish_date
start_date
print-accounting
print-accounting simulator
print-accounting
whereami
schedule
simulator_schedule
activities
accountant.activities.select(&:task_id)
exit!
accountant.activities.select(&:task_id)
FinanceXL::Adjustment.new
adjustment = FinanceXL::Adjustment.new(self, activity, start_date, activity.effective_date)
adjustment.start_date
exit!
print-accounting loan
whereami
previous_obligatoin
previous_obligation
loan.obligations
exit!
print-accounting loan
current_activity
loan.obligations
loan.obligations.sort
loan
print-accounting loan
loan
diff
print-accounting loan
loan
print-accounting loan
exit!
diff
loan.realized_interest
exit!
memo
entry
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
diff
print-accounting loan
exit!
amount
print-accounting loan
whereami
realized_interest_change_in_activity(nil, activity)
exit!
diff
print-accounting loan
exit!
print-accounting loan
loan.realized_interest
exit!
options
print-accounting loan
accrued_interest
interest_income
interest_income - accrued_interest
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 0
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
principal_amount
print-accounting loan
options[:amount] - principal_amount
principal_amount
options[:amount]
principal_amount < options[:amount]
print-accounting
whereami
print-accounting 
exit!
options[:amount]
current_activity
current_activity.entries
caller
options
exit!
options
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 0
print-accounting loan
whereami
interest_income
5 - accounts[:interest_ar]
accounts[:interest_income]
interest_income - accrued_interest
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 0
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest
print-accounting loan
diff
print-accounting loan
diff
loan.realized_interest
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
loan.realized_interest
print-accounting loan
whereami
assert_accounts customer_balance: 0, fees_ar: 195, interest_income: interest_income - accrued_interest
interest_income
accrued_interest
exit!
print-accounting loan
rules.pay_customer_balance_first?(today)
today
today.to_s
today < Loaner::Config.accountant.oec.rules.pay_customer_balance_first
today
Loaner::Config.accountant.oec.rules.pay_customer_balance_first
rules.pay_customer_balance_first?(today)
exit!
rules.reconcile_principal_first?(today)
exit!
rules.pay_fees_before_principal? || rules.reconcile_principal_last?(today)
assert_accounts customer_balance: 0, fees_ar: 195, interest_income: interest_income - accrued_interest
print-accounting loan
loan.provisional?
rules.provisional?
accountant.rules.provisional?
print-accounting loan
print-accounting loan -b
exit!
diff
loan.realized_interest
print-accounting loan
loan
diff
print-accounting loan -a reconcile
print-accounting loan
exit!
diff
print-accounting loan
interest_entry = FinanceXL::EntryType.find_by_accounts(:interest_ar, :customer_balance)
loan.accountant.activities.select { |act| act.entries.any? { |e| e.entry_type_id == 126 } }
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
exit!
default_calculator.default_amount_on(today + 1)
print-accounting loan
default_calculator
exit!
amount
print-accounting
amount
print-accounting loan
amount
default_calculator
exit!
obligation
amount
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
amount
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
obligation
amount
loan.obligations.map(&:early_payment_amount)
whereami
default_calculator
loan.current_obligation(Date.parse('2012-12-18'))
exit!
obligation_sum
oustanding_amount
outstanding_amount
obligation_sum == outstanding_amount
correction = outstanding_amount - obligation_sum
adjusting
outstanding_amount = balance(:currently_due) + balance(:past_due) + balance(:charged_off)
obligation_sum
correction = outstanding_amount - obligation_sum
print-accounting 
whereami
obligation_sum
outstanding_amount
obligation.amount
obligation
loan.obligations
loan.obligations.sort
loan.obligations.map { |o| [o.obligation_id, o.amount, o.early_payment_amount] }
whereami
print-accounting
print-accounting loan
print-accounting
print-accounting loan
adjusting
current_activity
exit!
activity
exit!
amount
print-accounting loan
whereami
amount
activity
activity.entries
edit update_early_payments
amount
print-accounting loan
start_date
whereami
options[:end_date]
start_date
initial_obligation
whereami
initial_obligation
initial_obligation.early_payment_amount
loan.obligations.each { |obligation| obligation.early_payment_amount = 0 if obligation.id >= initial_obligation.obligation_id }
whereami
initial_obligaiton
initial_obligation
initial_obligation.early_payment_amount
loan.obligations.each { |obligation| obligation.early_payment_amount = 0 if obligation.id >= initial_obligation.obligation_id }
exit!
initial_obligation.early_payment_amount
loan.obligations.map(&:early_payment_amount)
loan.obligations.map { |ob| ob.early_payment_amount, ob.id }
loan.obligations.map { |ob| [ob.early_payment_amount, ob.id] }
whereami
amount
whereami
print-accounting 
loan.obligations.map(&:early_payment_amount)
whereami
560.54/2
print-accounting loan
exit!
amount
print-accounting
activity
whereami
obligations
obligations.first.early_payment_amount
amount
exit!
amount
obligations.first.early_payment_amount
exit!
amount
obligations.first.early_payment_amount
contractual_obligations
obligations
amount
activity
amount
activity
activity.entries
amount
print-accounting loan
edit update_early_payments
exit!
amount
diff
print-accounting loan
diff
print-accounting loan
exit!
obligation
early_payment
obligation = current_obligation(early_payment.effective_date) if early_payment
exit!
amount
print-accounting loan
whereami
current_activity
current_activity.entries
obligation
result[:obligation].early_payment_amount
amount
current_activity.entries
calculate_early_payment(activity)
early_payment
amount
whereami
obligations
obligations.first
obligations.first.early_payment_amount
exit!
result
obligation
cancelling
obligations.any? { |ob| ob.id == 3 }
amount
print-accounting loan
current_activity
current_activity.entries
amount
obligations.any? { |ob| ob.id == 3 }
obligations
print-accounting loan
whereami
obligations
exit!
amount
obligation.early_payment_amount
whereami
amount
print-accounting loan
amount
print-accounting
amount
print-accounting
amount
print-accounting
amount
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
exit!
edit calculate_early_payment
diff
past_unpaid_obligations(today, extra_payments: currently_paid)
whereami
print-accounting
whereami
@default_calculator
loan
@default_calculator.default_history
@default_calculator
print-accounting loan
@default_calculator
loan.contractual_obligations.map(&:early_payment_amount)
whereami
@default_calculator
exit!
amount
print-accounting loan
current_activity
cancelling
amount
obligations
obligations.first.amount
obligations.first.early_payment_amount
amount
edit update_obligation
exit!
amount
print-accounting loan
current_activity
current_activity.entries
obligations
455.27 + 600 - 346.05
obligations.first.amount
obligations.first
obligations.first.early_payment_amount
exit!
amount
obligation_sum
print-accounting loan
whereami
obligation_sum == outstanding_amount
correction = outstanding_amount - obligation_sum
obligation.amount
whereami
print-accounting loan
print-accounting 
whereami
past_unpaid_obligations(end_date)
invalidate_default_calculator
past_unpaid_obligations(end_date)
past_unpaid_obligations(end_date).map(&:remaining_balance).sum
@default_calculator
obligation
obligation.amount
exit!
amount
obligation
amount
obligation
obligation.changed?
obligations
obligations.first.changed?
whreami
whereami
print-accounting loan
whereami
@default_calculator
amount
exit!
edit update_early_payments
correction = outstanding_amount - obligation_sum
current_activity
edit update_obligation
diff
due_amount
due_amounts
print-accounting loan
due_amounts
whereami
print-accounting loan
wherami
whereami
result[:amount]
activity
obligations
obligations.first.early_payment_amount
obligation.changed?
activity
amount
whereami
print-accounting loan
whereami
result
exit!
diff
initial_obligation
print-accounting loan
initial_obligation
print-accounting loan
whereami
initial_obligation
amount
exit!
amount
print-accounting loan
print-accounting 
exit!
diff
due_amounts
diff
print-accounting loan
exit!
diff
due_amounts
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
421.89 + 160.13
diff
print-accounting loan
diff
print-accounting loan
whereami
second_obligation.reload.early_payment_amount
exit!
print-accounting loan
whereami
amount
current_activity
current_activity.entries
amount
print-accounting
whereami
second_obligation.reload.early_payment_amount
print-accounting loan
whereami
third_obligation.reload.early_payment_amount
print-accounting
obligation.changes
current_activity
current_activity.entries
obligation.changes
adjusting
whereami
print-accounting
adjusting
print-accounting loan
current_activity
obligation
adjusting
print-accounting loan
adjusting
print-accounting loan
current_activity
adjusting
whereami
obligation
obligation.changes
current_activity
current_activity.entries
print-accounting loan
obligation
whereami
obligation.changed?
obligation.changes
current_activity
options[:cancelling]
print-accounting 
whereami
end_date
obligation
whereami
edit update_obligation
edit
loan.contractual_obligations.each { |obligation| obligation.early_payment_amount = 0 }
edit
obligation
amount
print-accounting 
whereami
activity
obligations.select(&:changed?)
obligations.find(&:changed?)
obligations.find(&:changed?).changes
activity
whereami
end_date
exit!
edit update_obligation
options
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
changes
obligations.changes
obligation.changes
whereami
edit update_obligation
print-accounting simulator
exit!
print-accounting loan
exit!
loan.contractual_obligations.map(&:changes)
print-accounting
whereami
options[:end_date]
loan.contractual_obligations.map(&:early_payment_amount)
loan.contractual_obligations.map(&:changes)
print-accounting loan
whereami
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 2
loan.realized_interest
initial_fees
print-accounting loan -b
print-accounting loan
loan.obligatoins
loan.obligations
exit!
due_amount
due_amounts
print-accounting
@default_calculator
due_amounts
print-accounting loan
assert_accounts customer_balance: -100
assert_accounts customer_balance: -100, fees_ar: 10
print-accounting loan
whereami
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
loan
exit!
today
edit amount_to_charge_off
amount
today
print-accounting loan
whereami
obligation
@default_calculator
whereami
loan.obligations
exit!
obligation_sum
outstanding_amount
print-accounting loan
obligation.early_payment_amount
whereami
@default_calculator_as_of
@default_calculator
whereami
outstanding_amount - obligation_sum
whereami
@default_calculator
print-accountig
print-accounting
exit!
print-accounting
current_activity
whereami
early_payment
edit payments_to_reconcile
early_payments = payments_to_reconcile(filter_activity)
unreconciled_payments
unreconciled_payments.values.all?(&:empty?)
edit payments_to_reconcile
whereami
exit!
early_payment
diff
print-accounting loa
print-accounting loan
loan
exit!
diff
print-accounting loan
exit!
amount
print-accounting loan
whereami
past_due_obligations
loan.obligations
@default_calculator
loan.obligations
exit!
amount
obligation_sum
outstanding_amount
print-accounting loan
outstanding_amount
obligation_sum
print-accounting 
adjsuting
adjusting
print-accounting
whreami
whereami
obligation_sum == outstanding_amount
amount
print-accounting 
adjusting
print-accounting loan
obligation.amount
obligation.early_payment_amount
print-accounting 
print-accounting loan
print-accounting adjusting
whereami
adjusting
obligation_sum
outstanding_amount
print-accounting
whereami
obligation_sum
outstanding_amount
print-accounting loan
print-accounting loan -b
whereai
whereami
balance(:currently_due)
balance(:past_due)
accounts
current_activity
whereami
current_activity
whereami
correction = outstanding_amount - obligation_sum
obligation.amount + correction
obligation.amount
print-accounting
print-accounting loan
whereami
obligation_sum
outstanding_amount
outstanding_amount - obligation_sum
correction = outstanding_amount - obligation_sum
obligation.amount + correction.to_d
print-accounting
obligation.amount
obligation.early_payment_amount
whereami
activity_type
adjusting
whereami
current_activity
obligation_sum == outstanding_amount
@default_calculator
exit!
edit update_obligation_amounts
obligation.amount
print-accounting loan
whereami
obligation.amount
obligation.early_payment_amount
obligation.amount
whereami
print-accounting loan
@default_calculator
loan.obligations.find(9)
loan.obligations.find(9).early_payment_amount
loan.obligations.find(9).amount
loan.contractual_obligations.find(9).early_payment_amount
loan.contractual_obligations
loan
print-accounting loan
exit!
amount
obligation.amount
early_payment_amount
obligation.early_payment_amount
print-accounting
obligation.early_payment_amount
print-accounting
whereami
obligation
whereami
obligation
obligation.early_payment_amount
print-accounting 
current_activity
whereami
obligation.early_payment_amount
obligation
obligation.amount
print-accounting
current_activity
obligation.early_payment_amount
print-accounting
current_activity
whereami
obligation.amount
obligation.early_payment_amount
obligation.amount
print-accounting
whereami
obligation
obligation.early_payment_amount
obligation
obligation.early_payment_amount
print-accounting 
whereami
adjusting
options
obligation.early_payment_amount
obligation
loan.contractual_obligations.each { |obligation| obligation.early_payment_amount = 0 }
obligation.early_payment_amount
end_date
edit
whereami
obligation.early_payment_amount
edit
edit update_early_payment_for_activity
edit 
activity
print-accounting loan
activity
whereami
activity
exit!
disable-pry
print-accounting
print-accounting loan
diff
print-accounting loan
balance(:interest)
interest_due
print-accounting loan
whereami
reconcile_amount
whereami
balance(:interest)
loan.realized_interst
loan.realized_interest
interest_due
print-accounting loan
print-accounting loan -b
loan
exit!
print-accounting 
whereami
obligation
89.19 * 3
exit!
amount
balance(:outstanding) - balance(:charged_off)
print-accounting loan
loan
diff
print-accounting loan
oan
loan
disable-pry
diff
loan
print-accounting loan
print-accounting loan -b
loan
diff
print-accounting loan
loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
exit!
date
loan.obligations.sort
whereami
obligation
contractual_obligation
contractual_obligations
loan.contractual_obligations
date
whereami
date
loan
exit!
diff
print-accounting loan
diff
print-accounting loan
loan
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
whereami
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
amount
whereami
amount
current_activity
current_activity.entries
@default_calculator
whereami
loan.obligations.map(&:early_payment_amount)
whereami
print-accounting loan
diff
whereami
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
@default_calculator
whereami
print-accounting loan
whereami
invlidate_default_calculator
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
@default_calculator
print-accounting loan
@default_calculator
whereami
due_amounts = payment_amounts_of_obligation(obligation, consider_accounts: false)
obligation = past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }]).first
due_amounts = payment_amounts_of_obligation(obligation, consider_accounts: false)
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan -b
exit!
diff
edit detect
diff
diff.size
edit detect
diff.values
diff.values.size
diff.values
diff.values.first
diff.values.first.keys
edit detect
diff.values.first.keys.keys
edit
edit detect
whereami
diff.values.first.keys.size
diff
diff.values.first.keys.size > 2
diff
diff.values.first.keys.size > 2
exit!
diff.any? && diff.values.first.keys.size > 2
diff.any?
edit detect
diff
exit!
diff
diff.any? && diff.values.first.keys.size > 2
exit!
edit detect
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
exit!
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
default_calculator.default_amount_on(today + 1), balance(:currently_due)
[default_calculator.default_amount_on(today + 1), balance(:currently_due)].min
print-accounting loan
whereami
edit default_due_amounts
obligation
due_amounts
today
today.to_s
exit!
entries
print-accounting
diff
print-accounting loan
exit!
amount
rules.late_fees_due?(obligation.target_date + 1)
print-accounting
whereami
amount
exit!
print-accounting loan
whereami
assert_accounts late_fees_ar: 10
new_amounts = loan.obligations(true).reduce(0) { |a, e| a + e.amount }
expect(accounted_for).to eq new_amounts
print-accounting loan
diff
print-accounting lloan
print-accounting loan
diff
print-accounting loan
exit!
diff
print-accounting loan
diff
print-accounting loan
loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
exit!
diff
print-accounting loan
lloan
loan
20.77 - 0.62
exit!
diff
print-accounting loan
exit!
loan.realized_interest
whereami
print-accounting
whereami
current_activity.entries
exit!
updated
loan.realized_interest
exit!
loan.realized_interest
exit!
loan.realized_interest
print-accounting loan
whereami
activity
prepare_for_adjustment(activity, activity.effective_date)
loan.realized_interest
print-accounting loan
whereami
current_activity
current_activity.entries
loan.realized_interest
exit!
print-accounting loan
whereami
amount
[loan.realized_interest + amount, FinanceXL::ZERO].max
loan.realized_interest
caller
loan.reload.realized_interest
whereami
caller
amount
loan.realized_interest
print-accounting
exit!
loan.realized_interest
amount
loan.realized_interest
exit@
exit!
caller
whereami
current_activity
print-accounting loan
exit!
caller
print-accounting
whereami
current_activity
adjusting
whereami
print-accounting
print-accounting loan
whereami
exit!
loan.realized_interest
start_date
print-accounting loan
whereami
prepare_for_adjustment(activity, start_date, activity.effective_date)
print-accounting loan
loan.realized_interest
prepare_for_adjustment(activity, start_date - 1, activity.effective_date)
loan.realized_interest
exit!
memo
entry
exit!
print-accounting loan
call_due 1
print-accounting loan
assert_balances past_due: 1
print-accounting
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
diff
print-accounting loan
.clear
print-accounting loan
exit!
current_activity.entries
whereami
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
whereami
current_activity.entries
entries
exit!
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
due_amounts
print-accounting loan
whereami
exit!
past_unpaid_obligations(today, extra_payments: [{ date: today, amount: amount }])
past_unpaid_obligations(today)
invalidate_default_calculator
past_unpaid_obligations(today)
print-accounting loan
due_amounts
whereami
entries
whereami
past_unpaid_obligations(today)
invalidate_default_calculator
past_unpaid_obligations(today)
entries
print-accounting loan
current_activity
current_activity.entries
whereami
entries
print-accounting loan
obligation
due_amounts
whereami
print-accounting loan
assert_accounts principal: initial_accounts[:principal], principal_due: 0, interest_due: 0
assert_accounts uncollected_principal: initial_accounts[:principal_due]
print-accounting loan
whereami
current_activity
loan.realized_interest
reconcile_interest(today, loan.realized_interest)
edit reconcile_interest
reconcile_interest(today, loan.realized_interest)
interest_accrued
amount
return FinanceXL::ZERO if obligation.billing_fee_assessed && interest_accrued == FinanceXL::ZERO
reconcile_amount = amount - interest_accrued
reconcile_amount = reverse_interest_entry(reconcile_amount.abs)
current_activity
edit reverse_interest_entry
print-accounting loan
exit!
edit reconcile_interest
whereami
amount
print-accounting loan
whereami
reconcile_interest(today, loan.realized_interest)
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loa
print-accounting loan
whereami
exit!
print-accounting
whereami
balance(:currently_due)
call_due amount: balance(:currently_due), date: date + 3
print-accounting loan
exit!
print-accounting loan
call_due amount: 100, date: date + 3
print-accounting loan
whereami
current_activity
print-accounting loan
charge_off 1
balance(:interest)
amount
print-accounting loan
loan.realized_interest
whereami
fail Error::InterestReconciliationFailed.new(loan.cnuapp_loan_id, current_activity.activity_type)
current_activity.activity_type
edit ensure_correct_interest
print-accounting loan
loan.realized_interest
print-accounting loan
date
print-accounting loan
date + 4
print-accounting loan
accounts
print-accounting loan
print-accounting loan -b
assert_accounts uncollected_interest: loan.realized_interest + initial_accounts[:interest_due], interest_ar: 0
loan.realized_interest
assert_accounts uncollected_interest: loan.realized_interest + initial_accounts[:interest_due], interest_ar: 0
assert_accounts uncollected_interest: interest_to_realize + initial_accounts[:interest_due], interest_ar: 0
{ loan_tasks: [], "token" => "df226311c5d369081ff86a73f59b5c8b" }
_.to_json
{data : { loan_tasks: [], "token" => "df226311c5d369081ff86a73f59b5c8b" } }
{data: { loan_tasks: [], "token" => "df226311c5d369081ff86a73f59b5c8b" } }
thing = _
thing.to_json
{data: { loan_tasks: [], "token" => "df226311c5d369081ff86a73f59c8b" } }
post :create_loan_tasks
get :index
data
whereami
post :index
post :create
require "rails_helper"
exit!
post :create
post 
require 'rails_helper'
post
post :create_loan_tasks
post :create
whereami
response
response.status
expect(response).to render_template("index")
response.methods
response.status
response
exit!
data
post :create, data
response.params
get :index
authenticate
request.params
request
whereami
post :create
request.status
request
request.params
post :create, data
request.params
post :create
whereami
authentication
authenticate_user!
Authentication.turned_on?
exit!
post :create
whereami
exit!
whereami
request
request.url
request
whereami
request.url
response.url
response.path
response
response.stream
response.header
response.header.location
response.header["Location"]
expect(response.headers['Location']).to include?('eligible_loaners')
expect(response.headers['Location']).to_include?('eligible_loaners')
(response.headers['Location'])
expect(response.headers['Location']).to_include?('eligible_loaners')).to be_true
expect(/eligible_loaners/.match(response.headers['Location'])).to eq true
expect(/eligible_loaners/.match(response.headers['Location'])).to be_true
expect(/123/.match(response.headers['Location'])).to be_true
expect(/123/.match(response.headers['Location'])).to eq true
expect(/123/.match(response.headers['Location'])).to be_truthy
expect(/eligible_loaners/.match(response.headers['Location'])).to be_truthy
whereami
@data = JSON.parse params['data']
params
params['data']
JSON.parse params['data']
params['data']
exit!
expect(response.status).to eq 401
data
exit!
loans
loans.values.each_slice(LOANS_PER_WORKER)
loans.values.each_slice(LOANS_PER_WORKER).to_a
loans.values.each_slice(LOANS_PER_WORKER).to_a.first
loans
loan loans.values.each_slice(LOANS_PER_WORKER).to_a.first
loans.values.each_slice(LOANS_PER_WORKER).to_a.first
loans.values.each_slice(LOANS_PER_WORKER).to_a.first.flatten
expect(sidekiq).to have_received(:enqueue_to)
sidekiq
expect(sidekiq).to have_received(:enqueue_to)
post :create, valid_data
loans
Sidekiq::Client.enqueue_to("#{cluster_in_request}_loans", LoanTaskProcessingWorker, tasks.flatten)
sidekiq
expect(sidekiq).to have_received(:enqueue_to)
tasks
tasks.flatten
expect(sidekiq).to have_received(:enqueue_to)
print-accounting loan
whereami
expect(second_obligation.reload.early_payment_amount).to eq 50
print-accounting loa
print-accounting loan
whereami
assert_balances currently_due: 0, current: initial_balances[:current] - 50
balances(:current)
balance(:current)
whereami
print-accounting loan
whereami
assert_balances currently_due: 0
assert_balances currently_due: 0, current: initial_balances[:current] - 50
intial_balances[:current]
initial_balances[:current]
initial_balances[:current] - 50
print-accounting loan
whereami
expect(unreconciled_tasks).to eq [first]
expect(unreconciled_tasks).to eq [second]
expect(unreconciled_tasks).to eq [third]
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting loan
Authentication.turned_on?
obligation[:target_date]
LoanTaskProcessor.pull_oec_statements
LoanTaskProcessor.new.pull_oec_statements
LoanTaskProcessor.new.send(:pull_oec_statements)
RAILS_ENV
Rails.env
Loaner::Config.accountant
Loaner::Config.accountant[@cluster.name]
Loaner::Config.accountant[@cluster.name.to_s]
@cluster
@cluster.name
new_loan_tasks = Loaner::Config.accountant[loan.product].new_loan_tasks
tasks
hash[product][:acceptable_first_tasks]
Loaner::Config.accountant[product].acceptable_first_tasks || []
Loaner::Config.accountant[product].new_loan_tasks
product
_
hash
loan
tasks
task_set
task
task.first
task.first[:task_name]
type
task.first[:task_name] = type
type
task.first[:task_name] = type
task
new_task = task.dup
task
new_task
type
exit!
loans_to_backfill
tasks
exit!
proceed
new_loan_tasks
loan_tasks
exit!
new_loan_tasks
tasks
loan_tasks.any? { |task| new_loan_tasks.include?(task[:task_name]) }
exit!
new_task
expect(backfill_worker).to have_received(:perform_async).with([example_payday_loan], example_cluster.name)
new_task
disable-pry
task_set
TURNED_ON
task_set
existing_activities = lookup_activities(task_set)
tasks
loan = create_loan(cnuapp_loan_id, @cluster)
tasks.each { |task| loan.accountant.map_task(task) }
e
Rails.env
Rails.env.test?
Airbrake.notify(e, error_message: error_message, backtrace: $ERROR_POSITION)
processor
processor.process([task])
expect(processor).to have_received(:report_unprocessed_loan).with(payday_loan)
exit!
HANDSHAKE
exit!
report_unprocessed_loan(cnuapp_loan_id)
tasks
task_set
loans
loan = create_loan(cnuapp_loan_id, @cluster)
cnuapp_loan_id
loan = create_loan(cnuapp_loan_id, @cluster)
cnuapp_loan_id
loan = create_loan(cnuapp_loan_id, @cluster)
e
ApiStatusCheckWorker.perform_async(@cluster.name)
tasks.each { |task| loan.accountant.map_task(task) }
task
tasks.each { |task| loan.accountant.map_task(task) }
tasks
tasks.first
task = _
loan.accountant.map_task(task)
edit process
HANDSHAKE
exit!
report_unprocessed_loan(cnuapp_loan_id)
loan
loan.accountant
allow(accountant).to receive(:map_task).and_raise(SystemCallError)
allow(accountant).to 
allow(accountant)
allow(accountant).to
allow(accountant).to receive(:map_task)
allow(accountant).to receive(:map_task).and_raise(SystemCallError)
SystemCallError
allow(accountant).to receive(:map_task).and_raise(SystemCallError)
allow(accountant).to receive(:map_task)
allow(accountant).to receive(:map_task).and_raise(StandardError)
allow(accountant).to receive(:map_task).and_raise(StandardError('hi'))
allow(accountant).to receive(:map_task).and_raise(SystemCallError('sample'))
allow(accountant).to receive(:map_task).and_raise(SystemCallError.new('sample'))
allow(accountant).to receive(:map_task).and_raise(SystemCallError.new)
Rails.env.test
Rails.env.test?
HANDSHAK
HANDSHAKE
client
Client.request(@cluster.name, timeout: nil)
reported_task_ids = Client.request(@cluster.name, timeout: nil).flag_processed_loan_tasks(processed_task_ids)
verify_data_integrity(processed_tasks, activities)
e
e.backtrace
loan
loan.accountant
tasks
tasks.each { |task| loan.accountant.map_task(task) }
loan.accountant.source
e
e.backtrace
loan.accountant
e
taks
tasks
processed_tasks
failed_loan_ids
HANDSHAKE
Client
Client.request(@cluster.name, timeout: nil).flag_processed_loan_tasks(processed_task_ids)
failed_loan_ids
tasks
activities
activities = lookup_activities(tasks)
processed_task_ids = processed_tasks.map { |task| task[:task_id] }.uniq
HANDSHAKE
processed_task_ids = processed_tasks.map { |task| task[:task_id] }.uniq
reported_task_ids = Client.request(@cluster.name, timeout: nil).flag_processed_loan_tasks(processed_task_ids)
verify_handshaking(processed_task_ids, reported_task_ids)
processed_task_ids - reported_task_ids
reported_task_ids - processed_task_ids
activities
processed_tasks
reported_task_ids = Client.request(@cluster.name, timeout: nil).flag_processed_loan_tasks(processed_task_ids)
processed_tasks
reported_task_ids = Client.request(@cluster.name, timeout: nil).flag_processed_loan_tasks(processed_task_ids)
verify_handshaking(processed_task_ids, reported_task_ids)
loan.accountant
loans.first
filed_loan_ids
failed_loan_ids
task_set
processed_tasks
procesed_task_ids
processed_task_ids
loan
cnuapp_loan_id
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(cnuapp_loan_id, @cluster.id)
loan
cnuapp_loan_id
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(cnuapp_loan_id, @cluster.id)
Loan.all
exit!
Loan.all
loan = Loan.find_by_cnuapp_loan_id_and_cluster_id(cnuapp_loan_id, @cluster.id)
task
exit!
activity
activity.activity_amount
activity
exit!
task
task[:task_name] == :charge_off
activity.activity_amount == BigDecimal.new(task[:amount])
return false unless task[:task_name] == :charge_off || activity.activity_amount == BigDecimal.new(task[:amount])
activity.effective_date == task[:date]
activity.effective_date
task[:date]
return false unless task[:task_name] == :charge_off || activity.activity_amount == BigDecimal.new(task[:amount])
return false unless activity.effective_date == task[:date]
exit!
task[:task_name] == :charge_off || activity.activity_amount == BigDecimal.new(task[:amount])
activity.effective_date == task[:date]
exit!
diff
print-accounting loan
diff
loan
diff
print-accounting loan
loan
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
319.56 - 269.56
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
exit!
task[:task_name]
diff
exit!
end_of_cycle
task
diff
diff.values
diff[loan.cnuapp_loan_id]
diff[loan.cnuapp_loan_id.to_s]
diff[loan.cnuapp_loan_id.to_s][:customer_balance]
diff[loan.cnuapp_loan_id.to_s]
diff[loan.cnuapp_loan_id.to_s].size
diff[loan.cnuapp_loan_id.to_s][:customer_balance]
diff[loan.cnuapp_loan_id.to_s][:customer_balance][:cnuapp]
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
exit!
diff
print-accounting loan
duff
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
whereami
diff
loan.accounts
loan.accountant.accounts
whereami
BalanceChecker.send(:balances, task_id: task[:task_id], date: task[:date], level: options[:level])
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
options
loan.accountant.accounts
459.66 - 7.7
11.57 + 15.13 - 10 - 14.7
print-accounting loan
print-accounting loan -b
whereami
diff
print-accounting loan
print-accounting loan -b
whereami
diff
whereami
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-acccounting loan
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
whereami
loan.current_obligation(Date.parse(task[:date])
)
loan.current_obligation(task[:date])
whereami
diff
print-accounting loan
whereami
print-accounting loan
loan.current_obligation(task[:date])
diff
print-accounting loan
diff
print-accounting loa
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
print-accounting loan
loan
whereami
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accountign loan
print-accounting loan
print-accounting loan -b
print-accounting loan
diff
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
.clear
whereami
diff
print-accounting loan
diff
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
whereami
diff
print-accounting loan
whereami
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
whereami
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
whereami
diff
print-accounting loan
diff
3.88 + 5.8
diff
print-accounting loan
diff
print-acounting loan
diff
print-acounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: 181405018, date: Date.parse('2014-09-12'), level: options[:level])
diff
print-accounting loan
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: 181405018, date: Date.parse('2014-09-12'))
BalanceChecker.send(:check, cluster, cnuapp_loan_id, task_id: 181405018, date: Date.parse('2014-09-12'))
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: 181405018, date: Date.parse('2014-09-12'))
BalanceChecker.send(:balances, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date], level: options[:level])
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date])
print-accounting loan
diff
print-accounting loan
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date])
diff
print-accounting loan
diff
print-accounting loan
diff
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date])
print-accounting loan
diff
print-accounting loan
diff
BalanceChecker.send(:check_by_loan, cluster, cnuapp_loan_id, task_id: task[:task_id], date: task[:date])
diff
print-accounting loan
whereami
diff
75 + 12
print-accounting loan -b
print-accounting loan
diff
loan.obligatoins
loan.obligations
loan.obligations.sort
whereami
diff
print-accounting loan
loan = Loan.finder(@loans.keys.first, cluster)
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
print-accounting loan 
diff
344.77 - 25
diff
print-accounting loan
loan
diff
print-accounting loan
diff
loan.accountant.accounts
whereami
diff
print-accounting loan
print-accounting loan -b
exit!
changes
accounts
exit!
whereami
print-accounting loan
changes
previous_obligation(today).billing_fee_assessed?
changes
exit!
relevant_activities
print-accounting loan
exit!
changes
gs
exit!
changes
exit!
changes
print-accounting loan
exit!
print-accounting loan
whereami
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
accounts
exit!
changes
print-accounting loan
changes
print-accounting loan
edit finalize_payoff_amounts
changes = finalize_payoff_amounts
edit finalize_payoff_amounts
changes = finalize_payoff_amounts
relevant_activities
start_date
exit!
relevant_activities
whereami
changes
relevant_activities
print-accounting loan
current_activity
print-accounting loan
relevant_activities
changes
print-accounting loan
whereami
relevant_activities
changes
accounts
exit!
relevant_activities
print-accounting loan
current_activity
changes
exit!
relevant_activities
changes
accounts
print-accounting loan
whereami
assert_accounts fees_ar: 0
accounts
print-accounting loan
whereami
changes
accounts
changes
print-accounting loan
current_activity
current_activity.entries
print-accounting 
whereami
relevant_activities
changes
print-accounting loan
accounts
current_activity
current_activity.entries
accounts
dif
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
balance(:charged_off)
balances
280 + 148
diff
loan.accountant.balances
loan.accountant.accounts
whereami
diff
2849.22 - 2678.93
print-accounting loan
loan.obligations.sort
whereami
print-accounting loan
diff
print-accounting loan
diff
edit update_interest_due
obligation
date
loan.obligations
date
loan.obligations.sort
exit!
print-accounting loan
whereami
exit!
diff
print-accounting loan
whereami
diff
623.21 - 150.37
print-accounting loan
diff
print-accounting loan
diff
loan
diff
print-accounting loan
whereami
amount
balance(:interest)
current_activity
whereami 
reconcile_amount
loan
exit!
print-accounting
whereami
end_date
whereami
edit simulate
print-accounting loan
print-accounting
print-accounting simulator
simulator.called_due?
exit!
diff
whereami
print-accounting simulator
print-accounting loan
payoff balance(:currently_due)
payoff balance(:past_due)
print-accounting loan
print-accounting loan -b
print-accounting loan
whereami
accountant.called_due?
accounts
assert_accounts unrecognized_interest: balance(:interest) - initial_interest, interest_called_due: initial_interest
balance(:interest)
print-accounting
whereami
amount
loan.obligations
loan.obligations.sort
activity.effective_date
whereami
result
activity
activity.cancels_activity_id
print-accounting 
whereami
activity
edit calculate_early_payment
calculate_early_payment(activity)
activity.entries
activity.entries.select { |entry| cancelled_early_payment_entries.include?(entry.entry_type.id) }
accounts
print-accounting 
whereami
edit calculate_early_payment
whereami
calculate_early_payment(activity)
exit!
result
edit calculate_early_payment
calculate_early_payment(activity)
activity.entries.select { |entry| [:customer_balance, :disbursement_account].include?(entry.cr) }
activity.entries.select { |entry| [:customer_balance, :disbursement_account].include?(entry.cr) && cancelled_early_payment_entries.include?(entry.entry_type.id) }
activity.entries.select { |entry| accounts.include?(entry.dr) }
whereami
calculate_early_payment(activity)
activity.entries.select { |entry| cancelled_early_payment_entries.include?(entry.entry_type.id) }
exit!
amount
print-accounting loan
whereami
entry
exit!
diff
print-accounting loan
loan.obligations.map(:early_payment_amount)
loan.obligations.map(&:early_payment_amount)
date
print-accounting loan
date
whereami
date
pritn-accounting loan
print-accounting loan
whereami
print-accounting loan
whereami
cancellation_activity = accountant.activities.find { |act| act.task_id == cancellation }
expect(obligation.early_payment_amount).to eq 0
expect(second_obligation.early_payment_amount).to eq 0
expect(second_obligation.reload.early_payment_amount).to eq 0
expect(accountant.calculate_early_payment(cancellation_activity)).to eq 0
expect(accountant.calculate_early_payment(cancellation_activity)[:amount]).to eq 0
diff
fees_total
print-accounting loan
whereami
loan.accountant.accounts
diff
print-accounting loan
print-accounting loan -b
loan
print-accounting loan -A fee
print-accounting loan -a fee
exit!
activity_to_cancel
activity_to_cancel.cancelled?
activity_to_cancel.reload
activity_to_cancel.cancelled?
print-accounting
exit!
activity_to_cancel.cancelled?
print-accounting loan
print-accounting loan -b
6480.34 + 1048.75
6480.34 + 1048.75 + 45.44
diff
print-accounting loan
diff
422.13 - 437.17
loan
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan -b
diff
print-accounting loan 
diff
print-accounting loan
print-accounting loan -b
diff
exit!
reconcile_amount
amount
balance(:interest)
print-accounting loan
amount
current_activity
loan
loan.realized_interest
YAML.parse('yaml')
file = _
file.string
YAML.load_file('yaml')
:"accounting.me"
:"accounting.me".to_s
diff
print-accounting loan
diff
221.25 + 319.06 
lloan
loan
diff
pritn-accounting loan
print-accounting loan
diff
loan
exit
tasks_to_reconcile
print-accounting loan
expect(tasks_to_reconcile).to eq [third]
most_recent_activity_date
print-accounting loan
most_recent_activity_date
most_recent_activity_date.to_s
whereami
date
accountant.most_recent_effective_date + 1
payoff balance(:currently_due)
new_draw 1000
new_draw_fee 100
create_end_of_cycle amount: 100, obligation: 2
whereami
print-accounting loan
whereami
edit create_end_of_cycle
create_end_of_cycle amount: 100, obligation: 2
print-accounting 
whereami
loan.obligations.sort_by(&:target_date)[args[:obligation] - 1]
obligation = loan.obligations.sort_by(&:target_date)[args[:obligation] - 1]
end_of_cycle amount: args[:amount], interest_due_amount: args[:interest] || interest, date: obligation.target_date + 1,
obligation.target_date + 1,
obligation.target_date + 1
loan.obligations
whereami
exit!
@date
print-accounting loan
whereami
obligations
obligation
loan.obligations
exit!
loan.obligations
caller
whereami
exit!
loan.obligatoins
loan.obligations
obligations
loan.obligations(true)
loan.contractual_obligations
exit!
@date
print-accounting loan
loan.obligations
loan.contractual_obligations
loan
today
loan.contractual_obligations
today
previous_obligation(today)
edit previous_obligation
edit loan.previous_obligation
previous_obligation(today)
exit!
date
current_obligation_number(date)
in_obligations_window?(date)
date
current_obligation_number(date)
edit current_obligation_number
exit!
obligation
middle
date < obligation.start_date
date
contractual_obligations
whereami
date
current_obligation_number(date)
whereami
proposed_obligation = contractual_obligations[obligation]
proposed_obligation = contractual_obligations[0]
exit!
date
print-accounting loan
print-accounting
proposed_obligation
proposed_obligation.target_date
disable-pry
diff
print-accounting loan
diff
loan
whereami
616.36 - 611.31
diff
print-accounting loan
diff
print-accounting loan -b
exit!
changes
print-accounting loan
whereami
start_date
today
current_obligation
current_obligation(today)
previous_obligation && previous_obligation.billing_fee_assessed?
changes
print-accounting loan
date
end_of_cycle_date?(today)
loan.contractual_obligations
date
payoff amount: 100, date: first_obligation.target_date + 1
print-accounting loan
exit!
print-accounting loan
loan.obligations
loan.obligations.sort
obligation
current_obligation(today)
obligation
print-accounting loan
whereami
current_obligation(today)
print-accounting loan
contractual_obligations
exit!
contractual_obligations
wtf
contractual_obligations.each { |obligation| obligation.save! if obligation.changed? }
exit!
loan.contractual_obligations
loan.invalidate_obligations
loan.contractual_obligations
caller
exit!
caller
exit!
obligations
obligations.first.loan
loan.obligations
caller
whereami
exit!
disable-pry
print-accounting loan
whereami
expect(loan.realized_interest).to eq 0
third_obligation
non_recognized
expect(third_obligation.reload.amount)
third_obligation
exit!
print-accounting loan
whereami
403.36 + 1.26
non_recognized
exit!
print-accounting
loan.realized_interest
exit!
loan.realized_interest
amount
whereami
print-accounting loan
caller
whereami
activity
activity.entries
amount
print-accounting loan
loan.realized_interest
exit!
loan.realized_interest
loan
loan.realized_interest
disable-pry
edit map_task
edit perform_task
disable-pry
loan.defaults
loan.defaults(true)
disable-pry
print-accountign loan
print-accounting loan
whereami
assert_accounts principal: 0, fees_ar: initial_fees
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest
accrued_interest
loan.realized_interest
exit!
loan.realized_interest
print-accounting loan
loan.realized_interest
amount
loan.realized_interest
amount
loan.realized_interest
amount
loan.realized_interest
print-accounting loan
current_activity
whereami
current_activity.entries
print-accounting loan
activity
activity.entries
amount
loan.realized_interest
print-accounting 
print-accounting .entries
activity
activity.entries
whereami
amount
activity
loan.realized_interest
print-accounting 
loan.realized_interest
amount
print-accounting 
activity
amount
activity
activity.entries
current_obligation(today)
current_obligation(today).interest_due
current_obligation(today -1 ).interest_due
current_obligation(today - 1).interest_due
loan.realized_interest
print-accounting loan
whereami
accrued_interest = loan.realized_interest - accounts[:interest_ar]
loan.realized_interest
amount
print-accounting loan
amount
activity
activity.entries
whereami
activity
activity.entries
loan.realized_interest
amount
disable-pry
accrued_interest
print-accounting loan
loan.realized_interest
exit!
loan.realized_interest
create_end_of_cycle amount: 100, obligation: 2
loan.realized_interest
payoff balance(:currently_due)
loan.realized_interest
realize_interest 5
loan.realized_interest
exit!
loan.realized_interest
whereami
loan.realized_interest
amount
print-accounting loan
whereami
@default_calculator
invalidate_default_calculator
default_calculator_as_of(today)
loan.contractual_obligations
exit!
obligation
contractual_obligations
loan.contractual_obligations
whereami
current_activity
caller
print-accounting
obligation
loan.contractual_obligations
whereami
loan.current_obligation(loan.issue_date)
contractual_obligations
loan.contractual_obligations
exit!
contractual_obligations
@current_obligation
contractual_obligations
@current_obligation
obligation
contractual_obligations
loan.contractual_obligations
whereami
loan.contractual_obligations
contractual_obligations
@current_obligations
@current_obligation
exit!
edit current_obligation
exit!
obligation.amount
contractual_obligations
loan.contractual_obligations
amount
print-accounting loan
amount
print-accounting loan
date
loan.due_date
daily_fee(date)
print-accounting loan
loan.fee_amount
loan.fee_income
accounts
14.78 + 0.68
whereami
print-accounting loan
diff
print-accounting loa
print-accounting loan
print-accounting
print-accounting simulator
accountant.loan.fee_amount
accountant.accounts[:fee_income]
print-accounting simulator -b
print-accounting -b
loan.due_date
accountant.loan.due_date
exit!
amount
print-accounting
print-accounting -b
14.77 - 15.46
whereai
whereami
(amount / (loan.due_date + 1 - date)).to_d.floor(BigDecimal::FLOORING)
amount
loan.due_date
(amount / (loan.due_date + 1 - date))
(amount / (loan.due_date + 1 - date)).to_d
(amount / (loan.due_date + 1 - date)).to_d.floor(BigDecimal::FLOORING)
BigDecimal::FLOORING
0.69.floor(2)
0.69.to_d.floor(2)
BigDecimal('3.14159').floor(3)
BigDecimal('0.69').floor(3)
0.69
0.69.to_d.floor(2)
0.69.to_d
BigDecimal('0.69') == 0.69.to_d
BigDecimal('0.69') - 0.69.to_d
BigDecimal('0.69') == '0.69'.to_d
exit!
amount
BigDecimal("#{amount / (loan.due_date + 1 - date)}").floor(BigDecimal::FLOORING)
edit simulat
edit simulate
print-accounting loan
daily_fee
print-accounting loan
exit!
fees
BigDecimal(Flt::DecNum(amount.to_s).divide(loan.due_date + 1 - date).floor(FinanceXL::ROUNDING).to_s)
exit!
fees
print-accounting loan
(Flt::DecNum(amount.to_s).divide(loan.due_date + 1 - date))
FinanceXL::ROUNDING
exit!
BackfillWorker
BackfillWorker.jobs
BackfillWorker.jobs.size
exit!
BackfillWorker.jobs
BackfillWorker.jobs.size
loan_tasks
ids
Client.request(cluster).unprocessed_loan_tasks(id)['loan_tasks']
Client.request(cluster)
id
Client.request(cluster).unprocessed_loan_tasks(id)['loan_tasks']
exit!
options
client(cluster, options)
exit!
loan_tasks
whereami
exit!
loan_tasks
client
cluster
options
exit!
client
cnuapp_loan_id = create_param(client.configuration.fake_prefix, cnuapp_loan_id)
exit!
client
create_param(client.configuration.fake_prefix, cnuapp_loan_id)
exit!
client
create_param(client.configuration.fake_prefix, cnuapp_loan_id)
print-accounting loan
loan.contractual_obligations
print-accounting
caller
(fee_modifying_activities.unshift(:payoff))
fee_modifying_activities
exit!
diff
loan.obligations
assert_obligations size: 1, obligations: [{ amount: 0, due_date: date, target_date: date, fee_accrual_enabled: false]
assert_obligations size: 1, obligations: [{ amount: 0, due_date: date, target_date: date, fee_accrual_enabled: false }]
print-accounting loan
exit!
print-accounting loan
loan.obligations
loan.contractual_obligations
assert_obligations size: 1, obligations: [{ amount: 0, due_date: Date.tomorrow, target_date: Date.tomorrow, fee_accrual_enabled: false, fees_accrued: 0 }]
exit!
assert_obligations size: 1, obligations: [{ amount: 0, due_date: Date.tomorrow, target_date: Date.tomorrow, fee_accrual_enabled: false]
assert_obligations size: 1, obligations: [{ amount: 0, due_date: Date.tomorrow, target_date: Date.tomorrow, fee_accrual_enabled: false }]
assert_obligations size: 1, obligations: [{ amount: 0, due_date: Date.tomorrow, target_date: Date.tomorrow, fee_accrual_enabled: false, fees_accrued: 0 }] 
default_check
obligation[:fee_accrual_enabled].nil?
obligation[:fee_accrual_enabled]
ob.fee_accrual_enabled
default_check &&= (obligation[:fee_accrual_enabled] == ob.fee_accrual_enabled) unless obligation[:fee_accrual_enabled].nil?
obligation[:fee_accrued].nil?
obligation
exit!
Date.business_days_after(1,2014)
Date.business_days_after(Date.parse('2015-01-01',3)
)
Date.business_days_after(Date.parse('2015-01-01'),3)
diff
.clear
diff
activity
entry
activity.activity_type
entry.dr
entry.cr
entry.inspec
entry.inspect
print-accounting loan
print-accounting loan -b
exit!
changes
updated
remaining_for_current
amount
options =  waterfall_to_pay_current(amount: remaining_for_current, early_payment: early_payment?(amount, remaining_for_current))
wherami
whereami
remaining_for_current
amount
current_activity.entries
rules.provisional?
early_payment?(amount, remaining_for_current)
rules.pay_customer_balance?
exit!
options[:early_payment]
rules.pay_customer_balance?
rules.provisional?
exit!
print-accounting loan
current_activity
current_activity.to_s
current_activity.inspect
whereami
loan
exit!
print-accounting loan
print-accounting loan -b
whereami
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan 
diff
print-accounting loan 
diff
print-accounting loan
print-accounting loan -b
diff
loan
exit!
diff
print-accounting loan
whereami
today
print-accounting
print-accounting loan
print-accounting
print-accounting loan
loan.obligations
whereami
loan.obligations.map(&:inspec)
loan.obligations.map(&:inspect)
loan.obligations.sort.map(&:inspect)
loan.obligations.select(&:billing_fee_assessed)
print-accounting loan
loan.obligations.select(&:billing_fee_assessed)
whereami
clear
.clear
whereami
previous_obligation(today)
today
loan.obligations
loan.obligations.sort.map(&:inspect)
today
current_activity
loan
tasks
gs
whereami
LoanTaskTransformer.transform_tasks(tasks, cluster)
edit LoanTaskTransformer.transform_tasks
LoanTaskTransformer.transform_tasks(tasks, cluster)
task
tasks
whereami
LoanTaskTransformer.transform_tasks(tasks, cluster)
taks
task
exit!
tasks
whereami
tasks
whereami
LoanTaskTransformer.transform_tasks(tasks, cluster)
whereami
tasks
exit!
new_tasks
whereami
tasks
whereami
new_tasks
memo
entry
entry.to_s
entry.inspec
entry.inspect
activity
activity.inspect
print-accounting loan
loan
print-accounting loan
exit!
print-accounting loan -b
exit!
diff
print-accounting loan
loan.obligations.sort
loan.obligations.sort.map(&:inspect)
forward current_obligation(date).target_date + 1
forward loan.current_obligation(date).target_date + 1
amount
reconcile_amount
balance(:interest)
charged_off/
?
charged_off?
print-accounting loan
whereami
loan.realized_interest
date
reconcile_amount
amount
print-accounting loan -b
print-accounting
current_activity
current_activity.entries
whereami
edit reconcile_interest
reconcile_interest(date, amount)
edit reconcile_interest
reconcile_interest(date, amount)
obligation
date
reconcile_interest(date, amount)
current_activity.entries
current_activity
current_activity.inspect
current_activity
loan.obligations
loan.obligations.map(&:inspect)
exit!
obligation
p obligation
Obligation.new
gs
.clear
whereami
.clear
whereami
print-accounting loan
edit reconcile_interest
date
loan.obligations.map(:inspect)
loan.obligations.map(&:inspect)
date
loan.sort.obligations.map(&:inspect)
loan.obligations.sort.map(&:inspect)
whereami
date
caller
loan
print-accounting loan
whereami
loan.obligations.sort.map(&:inspect)
amount
balance(:interest)
date
print-accounting loan
current_activity
caller
debug(Obligation.new)
Obligation.new.default_inspect
Obligation.new
wtf
Obligation.new
pry-backtrace
Obligation.new
pry-backtrace
Obligation.new.inspect
pry-backtrace
caller
ls
app
ls
controller
helper
ls
inspect
puts
to_s
_pry_
Obligation.new
_pry_
whereami
Obligation.new
print-accounting loan
print-accounting loan -b
exit!
changes
print-accounting loan
changes
print-accounting loan
accounts
exit!
changes
print-accounting loan
print-accounting loan -b
whereami
changes
print-accounting loan -b
changes
print-accounting loan
create_end_of_cycle amount:100, obligation: 2
print-accounting loan
create_end_of_cycle amount:100, obligation: 3
print-accounting loan
call_due 100
print-accounting loan
exit!
print-accounting loan
changes
exit!
print-accounting loan
whereami
changes
print-accounting loan -b
print-accounting loan
changes
print-accounting loan
changes
accounts
changes
print-accounting loan
changes
print-accounting loan
changes
print-accounting loan
changes
print-accounting loan
changes
print-accounting loan
print-accounting loan -b
exit!
changes
accounts
print-accounting loan -b
changes
print-accounting loan
whereami
assert_accounts fees_ar: 100
accounts
initial_accounts[:principal]
print-accounting loan
accounts
whereami
assert_accounts fees_ar: 100, principal: initial_accounts[:principal] - (100 - accounts[:fees_due])
print-accounting loa
print-accounting loan
changes
print-accounting loan
print-accounting loan -b
print-accounting lona
print-accounting loan -b
changes
print-accounting loan
accounts
whereami
print-accounting loan
print-accounting loan -b
assert_accounts fees_ar: 100, principal: initial_accounts[:principal] - (100 - accounts[:fees_due])
assert_accounts principal: initial_accounts[:principal] - (100 - accounts[:fees_due])
changes
print-accounting loan
whereami
accounts
changes
print-accounting loan
print-accounting loan -b
exit!
modifications
print-accounting loan
whereami
previous_obligation(today).billing_fee_assessed?
modifications ||= Hash.new(FinanceXL::ZERO)
billing_fee = activities.find { |act| act.type?(:billing_fee) && !act.cancelled? && act.effective?(today) }
entry = billing_fee.entries.first
account = entry.dr
amount = entry.amount
with_account_check(account, amount)
with_account_check(account, amount) {}
amount
accounts
print-accounting loan
whereami
exit!
changes
print-accounting loan
print-accounting loan -b
changes
accounts
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - accounts[:fees_due])
print-accounting loan -b
diff
print-accounting loan
current_activity
current_activity.activity_type
today
loan.obligations.sort(&:inspect)
loan.obligations.sort.map(&:inspect)
today
loan.obligations.sort.map(&:inspect)
Obligatoin.new
Obligation.new
edit Obligation.new
Obligation.new
edit Obligation.new
Obligation.new
edit Obligation.new
exit!
Obligation.new
subclass
edit super
super
ls
subclass
_in_
model_name
whereami
args
self
subclass
edit self.super
self
edit new
exit!
Obligation
Obligation.new
super
self
Obligation.new
args
edit new
Obligation.all
Loan.all
Obligation.new
Loan.all
Obligation.new
pp Obligation.new
require 'pretty_print'
require 'prettyprint'
pp Obligation.new
Obligation.new
pp Obligation.new
puts Obligation.new
Obligation.new
pp Obligation.new
pp Obligation.new.inspect
Obligation.new
.clear
Obligation.new
pp Obligation.new
pp Obligation.new.inspect
pretty_inspect Obligation.new.inspect
Pry::Inspector
Pry::Inspector.MAP
Pry::Inspector::MAP
pretty_inspect
pretty_inspect Obligation.new
Pry.config
Pry.config.print
Pry.config.print = Pry::DEFAULT_PRINT
pp Obligation.new
Pry::DEFAULT_PRINT
p Obligation.new
p Obligation.new.to_s
Obligation.new.to_s
pp Obligation.new.to_s
diff
print-accounting loan
.clear
print-accounting loan
loan
diff
loan
loan.realized_interest
print-accounting loan -b
principal_amount
loan.realized_interest
options
options[:amount] - principal_amount
principal_amount < options[:amount]
pay_interest(options[:amount] - principal_amount, :customer_balance) if principal_amount < options[:amount]
loan.realized_interest
current_activity
current_activity.entries
exit!
pay_interest(options[:amount] - principal_amount, :customer_balance) if principal_amount < options[:amount]
interest_to_pay
loan.realized_interest
amount
accounts[:interest_ar[
    accounts[:interest_ar[]
    ]
  ]
accounts[:interest_ar]
reconcile_interest(today, loan.realized_interest)
exit!
pay_interest(options[:amount] - principal_amount, :customer_balance) if principal_amount < options[:amount]
exit!
pay_interest(options[:amount] - principal_amount, :customer_balance) if principal_amount < options[:amount]
obligation
loan.contractual_obligations
exit!
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
diff
print-accounting loan
print-accounting loan -b
loan.contractual_obligations.last
loan.contractual_obligations.last.interest_due
loan.contractual_obligations.last.fees_due
loan.contractual_obligations.last.principal_due
loan.contractual_obligations
loan.contractual_obligations[12]
loan.contractual_obligations[12].principal_due
loan.contractual_obligations[11].principal_due
print-accounting loan
print-accounting -b
print-accounting loan
accounts[principal_account] * obligation.daily_discounted_interest_rate
obligation.daily_discounted_interest_rate
accounts[principal_account]
(accounts[principal_account] * obligation.daily_discounted_interest_rate)
(accounts[principal_account] * obligation.daily_discounted_interest_rate).type
amount = (Flt::DecNum(accounts[principal_account].to_s) * obligation.daily_discounted_interest_rate).floor(places: 2)
exit!
disable-pry
class Foo
end
Foo.new
class Foo
  def inspect
    "Foo is awesome"
  end
end
Foo.new
class Foo
  def inspect
    "Foo is awesome"
  end
end
Foo.new
Obligation.new
edit Obligation
Obligation.new.inspect
Obligation.new.pretty_inspect
edit pretty_inspect
edit Obligation.new.pretty_inspect
ob = Obligation.new
method_method = ob.instance_method(:method).bind(self)
method_method = Obligation.instance_method(:method).bind(ob)
inspect_method = method_method.call(:inspect)
inspect_method && Kernel != inspect_method.owner
edit Obligation.new.pretty_inspect
out=$>, width=79
q = PP.new(out, width)
q.text self.inspect
q.text ob.inspect
ob
ob.inspect
q.text ob.inspect
q.text ob.inspect.size
ob.inspect.size
242 + 119
self
ls
out
inspect
to_s
_out_
q = PP.new(_out_, width)
q = PP.new(out, width)
q.text ob.inspect
q.flush
q
q = PP.new(_out_, width)
q.guard_inspect_key {q.pp ob}
q.flush
ob = Obligation.new
edit ob.pretty_inspect
ob = Obligation.new
edit ob.pretty_inspect
ob = Obligation.new
pp
pp ob ob
pp ob, ob
edit ob.pretty_inspect
pp ob, ob
edit ob.pretty_inspect
edit
Foo.new
edit
ob = Loan.new
Memo.new
edit 
Memo.new
edit
Memo.new
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
loan
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
diff
print-accounting loan
exit!
diff
print-accounting loan
loan
diff
exit!
diff
print-accounting loan
diff
133.4 + 164.31 + 18.34
1784.81 - 1602.16
diff
print-accounting loan
diff
print-accounting loan
diff
2507.90 - 2325.25
print-accounting loan
diff
print-accounting loan
exit!
task
edit correct_future_cancellations
task
exit!
task
cancellation?(task)
future_cancellation?(task)
task
cancellation?(task)
future_cancellation?(task)
task
@future_cancellations
cancellation?(task)
cancelled_by_future_cancellation?(task)
diff
print-accounting loan
diff
print-accounting loan
diff
activity_to_cancel
task_id
print-accounting loan
task_id
whereami
task_id
task_id_to_cancel
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
edit Obligation.new.pretty_inspec
edit Obligation.new.pretty_inspect
exit!
loan = Loan.first
loan
loan.obligations
gs
.clear
loan
class Foo < ActiveRecord::Base
  def initialize(a=1,b=2)
    @a = a
    @b = b
  end
  def inspect
    "Foo is awesome"
  end
end
Foo.new
loan = Loan.first
loans = CSV.parse('/export/loaner/balance_report_us_oec_customer_balance')
loans = CSV.read('/export/loaner/balance_report_us_oec_customer_balance')
loans = CSV.read('/export/loaner/balance_report_us_oec_customer_balance', headers: true)
loans.to_a
loans = CSV.read('/export/loaner/balance_report_us_oec_customer_balance', headers: true).to_hash
loans = CSV.read('/export/loaner/balance_report_us_oec_customer_balance', headers: true, header_converters: :symbol).map(&:to_hash)
whereami
loans
loans.select { |l| BigDecimal(l[:loaner_amount]) != FinanceXL::ZERO }
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO }
loans.size
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO }.size
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO }
diff
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
diff
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO && BigDecimal(l[:cnuapp_amount]) != FinanceXL::ZERO }
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO && BigDecimal(l[:cnuapp_amount]) != FinanceXL::ZERO }.size
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO && BigDecimal(l[:cnuapp_amount]) == FinanceXL::ZERO }.size
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO && BigDecimal(l[:cnuapp_amount]) == FinanceXL::ZERO }.map { |l| l[:loan_id] }
loans.select { |l| BigDecimal(l[:loaner_amount] || "0") != FinanceXL::ZERO && BigDecimal(l[:cnuapp_amount]) == FinanceXL::ZERO }.map { |l| l[:loan_id] }.join(' ')
loans = CSV.read('/export/loaner/balance_report_us_oec_customer_balance', headers: true, header_converters: :symbol).map(&:to_hash)
loans.map { |l| l[:loan_id] }.join(' ')
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan 
loan
diff
print-accouning loan
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting loan
print-accounting loan -b
edit Obligation.new.pretty_inspect
gs
LoanTaskProcessingWorker.jobs.first['args']
cluster
self
exit!
cluster
print-accounting loan
whereami
print-accounting loan
exit!
simulator
print-accounting 
print-accounting simulator
whereami
@start_date
edit simulate
whereami
edit simulate
exit!
print-accounting simulator
exit!
accountant
accountant.daily_run_time
options
options[:start_date]
options
whereami
print-accounting
print-accounting self
adjusting
loan = Loan.find 1
print-accounting loan
whereami
options
print-accounting loan
print-accounting 
exit!
options
print-accounting source
source
print-accounting options[:source]
exit!
disable-pry
print-accounting 
print-accounting
simulator
print-accounting simulator
disable-pry
print-accounting simulator
print-accounting loan
whereami
loan.realized_interest
print-accounting
whereami
end_date
exit!
simulator_schedule
end_date
start_date
print-accounting 
whereami
simulator
print-accounting loan
print-accounting simulator
whereami
exit!
start_date
end_date
simulator
print-accounting loan
print-accounting 
print-accounting simulator
exit!
simulator
simulator.schedule
print-accounting loan
print-accounting
print-accounting simulator
simulator.scheduled_activities(start_date)
edit simulator.scheduled_activities
simulator.scheduled_activities(start_date + 1)
print-accounting simulator
simulator.start_date = start_date + 1
whereami
print-accounting loan
print-accounting simulator
exit!
simulator
print-accounting loan
print-accounting simulator
simulator
print-accounting simulator
print-accounting 
print-accounting simulator
@accountant
print-accounting
print-accounting @accountant
exit!
print-accounting loan
print-accounting @accountant
match
actual
spec
spec.accounting_date
exit!
diff
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
diff
print-accounting loan
diff
print-accounting loan
diff
1093.77 - 1149.69
diff
print-accounting loan -b
diff
print-accounting loan
exit!
loans = CSV.parse('/export/loaner/balance_report_us_oec_basic.csv')
loans = CSV.parse(File.read('/export/loaner/balance_report_us_oec_basic.csv'))
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: true, header_converters: :symbol).map(&:to_hash)
loans.select { |l| l[:account] }
Obligation.new
ob = Obligation.new
ob.class.instance_method(:inspect)
ob.class.instance_method(:inspect).owner
ActiveRecord::Base.instance_method(:inspect).owner
ob.class.instance_method(:inspect).owner == ActiveRecord::Base.instance_method(:inspect).owner
PP.pp(Obligation.new, StringIO.new(actual)
)
actual = ''
PP.pp(Obligation.new, StringIO.new(actual))
actual
.clear
loans
loans.select { |l| ["interest_total", "fees_total"].include?(l[:account]) }
serious = loans.select { |l| ["interest_total", "fees_total"].include?(l[:account]) }
serious.size
diff
print-accounting loan
exit!
interest_due
print-accounting loan
whereami
interest_due
print-accounting 
print-accounting loan
print-accounting 
adjusting
obligation
obligation.interest_due
exit!
activity_or_type
amount
caller
loan
date
date.to_s
loan
print-accounting loan
print-accounting 
print-accounting loan
loan
wherami
whereami
diff
114.17 - 241.67
loan
serious = loans.select { |l| ["interest_total", "fees_total"].include?(l[:account]) }.sort { |l| l[:loan_id].to_i }
serious
serious = loans.select { |l| ["interest_total", "fees_total"].include?(l[:account]) }.sort { |l| l[:loan_id].to_i }.reverse
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
exit!
print-accounting loan
loan.realized_interest
activities
realize_interest_id = FinanceXL::ActivityType[:realize_interest].activity_type_id
realized_interest_change_in_activity(realize_interest_id, activities.last)
realized_interest_change_in_activity(realize_interest_id, activities.to_a.last)
exit!
interest_due
diff
print-accounting loan
diff
1655.10 - 1585.47
print-accounting loan -b
diff
1655.10 - 1585.47
diff
print-accounting loan
whereami
assert_accounts unrecognized_interest_income: initial_accounts[:unrecognized_interest_income] + 1
print-accounting loan
whereami
print-accounting loan
whereami
expect(second_obligation.discounted_rate_effective_on).to eq(reconcile_date)
reconcile_date
cancel fee
print-accounting loan
FinanceXL::Activity.find(23)
FinanceXL::Activity.find(23).task_id
FinanceXL::Activity.find(18).task_id
exit!
name
print-accounting
name
exit!
print-accounting loan
whereami
assert_accounts interest_ar: 0, customer_balance: 0
print-accounting loan
whereami
interest
args
print-accounting loan
print-accounting 
whereami
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 2
assert_accounts principal: 0, fees_ar: initial_fees
assert_accounts interest_income: interest_income - accrued_interest
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest
print-accounting loa
print-accounting loan
whereami
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: 2
accrued_interest
assert_accounts principal: 0, fees_ar: initial_fees, interest_income: interest_income - accrued_interest, interest_ar: initial_interest - 2
initial_interest
print-accounting loan
print-accounting loan -b
loan.realized_interest
print-accounting 
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.sort { |l| l[:loan_id].to_i }.reverse
print-accounting loan
diff
585 + 493
585 - 493
print-accounting loan
print-accounting loan -a new_draw_fee
print-accounting loan -a new_draw_fee -b
print-accounting loan -a new_draw_fee 
diff
URI
URI.parse('http://example.com/resource?test=test with spaces')
URI.parse(URI.encode('http://example.com/resource?test=test with spaces'))
URI.parse('http://example.com/resource?test=test with spaces')
URI.parse(URI.encode('http://example.com/resource?test=test with spaces'))
diff
loan
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }.join( )
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }.join(' ')
BackfillWorker.jobs
job = BackfillWorker.jobs.first
job
job["jid"]
jid = BackfillWorker.jobs.first["jid"]
BackfillWorker.cancel!(jid)
allow(BackfillWorker).to_receive(:jid).and_return(jid)
allow(BackfillWorker).to receive(:jid).and_return(jid)
BackfillWorker.new.cancelled?
BackfillWorker.new.jid
allow(worker).to receive(:jid).and_return(jid)
expect(worker).to be_cancelled
diff
print-accounting loan
diff
print-accounting loan -b
print-accounting loan
diff
diff[cnuapp_loan_id]
diff[cnuapp_loan_id][:interest_total]
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
whereami
edit BalanceChecker
diff
edit BalanceChecker
diff
queray
query
options
query
query = Sql.load_query('export_balances', cluster, loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id], loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id])
loan_id = loan_ids.first
query = Sql.load_query('export_balances', cluster, loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id], loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id])
boundaries = boundaries(cluster, loan_id)
query = Sql.load_query('export_balances', cluster, loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id], loan_id, boundaries[:date], boundaries[:date], boundaries[:date], boundaries[:task_id])
whereami
edit cnuapp_balances
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
-1926.7 + 91.68
exit!
diff
simulator
print-accounting simulator
whereami
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting 
@remove_activities
simualator_schedule
simulator_schedule
loan.realized_interest
accountant.loan.realized_interest
print-accounting simulator
accountant.loan.realized_interest
print-accounting simulator
accountant.loan.realized_interest
print-accounting simulator
accountant.loan.realized_interest
print-accounting simulator
print-accounting simulator -b
-1926.7 + 91.68
loan
diff
print-accounting loan
print-accounting loan -b
-2496.29 + 335.35
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
loan.realized_interest
print-accounting loan
exit!
loan.realized_interest
exit!
loan.realized_interest
print-accounting 
exit!
adjustment
whereami
loan.realized_interest
print-accounting
whereami
adjustment.start_date
update_realized_interest(end_date: adjustment.start_date + 1, cancelling: true)
loan.realized_interest
edit update_realized_interest
update_realized_interest(end_date: adjustment.start_date + 1, cancelling: true)
whereami
act
amount
realized_interest_change_in_activity(realize_interest_id, act)
edit update_realized_interest
realized_interest_change_in_activity(realize_interest_id, act)
edit update_realized_interest
whereami
update_realized_interest(end_date: adjustment.start_date + 1, cancelling: true)
amount
act
amount
act
amount
act
amount
act
print-accounting loan
whereami
amount
realized_interest_change_in_activity(realize_interest_id, act)
amount
act
print-accounting loan
amount
act
amount
print-accounting loan
act
valid_activities = [:realize_interest, :payoff, :reconcile, :call_due, :charge_off, :end_of_cycle]
valid_activities + :cancel
valid_activities.push(:cancel)
whereami
exit!
edit update_realized_interest
diff
update_realized_interest(end_date: adjustment.start_date + 1, cancelling: true)
edit update_realized_interest
loan.realized_interest
print-accounting loan
loan.realized_interest
print-accounting loan
realize_interest
realize_interest = interest_accounts.map { |cr| realized_accounts.each { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) } }.flatten
cr = interest_accounts.first
realized_accounts.each { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr)
}
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) } }.flatten
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) } }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }.flatten
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }.flatten.size
realize_interest = interest_accounts[0] { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }
cr = interest_accounts[0]
interest_accounts.size
whereami
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.size
cr = interest_accounts[1]
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.size
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact.size
cr = interest_accounts[2]
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact.size
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }.flatten
cr = interest_accounts[0]
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact.size
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.size
realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }
realize_interest = interest_accounts.map { |cr| realized_accounts.map { |dr| FinanceXL::EntryType.find_by_accounts(dr, cr) }.compact }.flatten
exit
print-accounting loan
expect(loan.realized_interest).to eq 0
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }.join(' ')
!loans
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv')
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv').map(&:hash)
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: true).map(&:hash)
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers :true, header_converters: :symbol).map(&:hash)
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:hash)
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:to_hash)
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }.join(' ')
loans = CSV.read('/export/loaner/tmp/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:to_hash)
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id] }.join(' ')
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id].to_i }.sort.reverse.join(' ')
Loan.all
Loan.all.size
diff
print-accounting loan
whereami
loan.realized_interest
print-accounting loan
loan
exit!
Loan.all
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:to_hash)
serious = loans.select { |l| ["interest_total"].include?(l[:account]) }.map { |l| l[:loan_id].to_i }.sort.reverse.join(' ')
diff
-6067.81 + 5954.36
diff
-464.02 + 392.55
diff
diff[loan.cnuapp_loan_id]
diff[loan.cnuapp_loan_id.to_s]
diff[loan.cnuapp_loan_id.to_s][:interest_total]
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
diff
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
print-accounting loan
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
diff
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
diff
print-accounting loan
diff
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
diff
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
diff
print-accounting loan
diff
585 - 372.5
diff
print-accounting loan
diff
print-accounting loan
diff
800 - 720.76 
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
diff
print-accounting loan
diff[loan.cnuapp_loan_id.to_s][:interest_total][:cnuapp].to_f -  diff[loan.cnuapp_loan_id.to_s][:interest_total][:loaner].to_f
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
loans = CSV.read('/export/loaner/tmp/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:to_hash)
loans = CSV.read('/export/loaner/balance_report_us_oec_basic.csv', headers: :true, header_converters: :symbol).map(&:to_hash)
loans.size
loans.map { l[:loan_id] }.uniq
loans.map { |l| l[:loan_id] }.uniq
loans.map { |l| l[:loan_id].to_i }.uniq
loans.map { |l| l[:loan_id].to_i }.uniq.join(' ')
loans.map { |l| l[:loan_id].to_i }.uniq.size
loans.map { |l| l[:loan_id].to_i }.uniq.join(' ')
method
balances
method
options
whereami
Sql.balances(options, loan_ids, Cluster[cluster].id, loan_ids, Cluster[cluster].id)
edit Sql.balance
edit Sql.balances
edit
whereami
conn
conn.connection_id
conn
conn.id
conn
conn.object_id
whereami
edit 
ActiveRecord::ConnectionPool
ActiveRecord.connection_pools
ActiveRecord.connection_pool
ActiveRecord::Base.connection_pool
ActiveRecord::Base.connection_pool.keys
ActiveRecord::Base.connection_pool.size
ActiveRecord::Base.connection_pool.queue
ActiveRecord::Base.connection_pool
reserved_connections
ActiveRecord::Base.connection_pool.reserved_connections
ActiveRecord::Base.reserved_connections
ActiveRecord::Base.connection_pool
ActiveRecord::Base.connection_pool.available
ActiveRecord::Base.connection_pool.available?
ActiveRecord::Base.connection_pool.methods
ActiveRecord::Base.connection_pool.connections
ActiveRecord::Base.connection_pool.connections.size
ActiveRecord::Base.current_correction_id
ActiveRecord::Base.current_connection_id
ActiveRecord::Base::ConnectionAdapters.current_connection_id
ActiveRecord::Base::ConnectionAdapters
ActiveRecord::Base.connection_id
edit
conns
conns.size
conns.uniq
conns.uniq.size
conns.size
conns.uniq.size
ActiveRecord::Base.connection_pool
ActiveRecord::Base.connection_pool.size
ActiveRecord::Base.connection_pool.connections
ActiveRecord::Base.connection_pool.connections.size
conns.uniq.size
conns.uniq.size == ActiveRecord::Base.connection_pool.connections.size
conns.uniq == ActiveRecord::Base.connection_pool.connections
ActiveRecord::Base.connection_pool.connections.any? { |c| c == ActiveRecord::Base.connection }
ActiveRecord::Base.connection_pool.connections.any? { |c| c.in_use? }
ActiveRecord::Base.connection_pool.connections.select { |c| c.in_use? }
ActiveRecord::Base.connection_pool.connections.select { |c| c.in_use? }.size
File.expand_path(File.join(File.dirname(__FILE__), '..', '..', %w[ processes ]))
File.join(File.dirname(__FILE__), '..', '..', %w[ processes ])
rails_root = File.join(File.dirname(__FILE__))
File.join(rails_root, '..', '..', %w[ processes ])
cmd
cfg
prepare_env(cfg)
Shellwords.shellwords(cmd)
spawn_options(cfg)
exit!
pid = ::Process::spawn(prepare_env(cfg), *Shellwords.shellwords(cmd), spawn_options(cfg))
exit!
pid
Shellwords.shellwords(cmd)
spawn_options(cfg)
exit!
Loaner::Config.balance_checker.queues
Loaner::Config.balance_checker.queue
Loaner::Config.balance_checker.queue[Rails.env]
Rails.env
ERB.new(Loaner::Config.balance_checker.queue[Rails.env])
ERB.new(Loaner::Config.balance_checker.queue[Rails.env]).result
Sidekiq::Queue.all
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name }
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }.each(&:delete)
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }.each(&:destroy)
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }.each(&:remove)
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }.first.methods
Sidekiq::Queue.all.select { |q| ["", "<%= `hostname`.strip %>"].include?(q.name) }.each(&:clear)
Sidekiq::Queue.all.select { |q| [`hostname`.strip] == q.name }
`hostname`.strip
Sidekiq::Queue.all.select { |q| `hostname`.strip == q.name }
Sidekiq::Queue.all.find { |q| `hostname`.strip == q.name }
Sidekiq::Queue.all.find { |q| `hostname`.strip == q.name }.pause
Sidekiq::Queue.all.find { |q| `hostname`.strip == q.name }.unpause
diff
print-accounting loan
diff
1304.64 + 2592.73 + 113.44 + 325.26
loan.accountant.balances
diff
print-accounting loan
print-accounting loan -b
diff
loan_balance
adjusting_balances[loan_id]
adjusting_balances
loan_ids
print-accounting loan
loan = Loan.finder loan_ids.first, cluster
print-accounting loan
loan_balance
adjustment_balance
adjustment_balances
print-accounting loan
loan = Loan.finder 33737624, "us"
print-accounting loan
whereami
adjustment_balances
adjustment_balance
adjustment_balances.find { |balance| balance[:account] == loan_balance[:account] }
loan_balance
adjustment_balances
adjustment_balance
loan_balance[:account]
balances
adjustment_balance
adjustment_balance[:amount]
hash[account]
hash[account] + adjustment_balance[:amount].to_d
loan_balance
diff
print-accounting loan -b
diff
disable-pry
diff
print-accounting loan
diff
print-accounting loan -b
diff
92.33 + 77.75
print-accounting loan
diff
170.08 - 164.73
diff
exit!
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
print-accounting loan
diff
.clear
print-accounting loan
loan
loan_tasks
loan_tasks.size
transform_tasks(loan_tasks, cluster)
edit transform_tasks
loan_tasks
transform_tasks(loan_tasks, cluster)
edit transform
Loaner::Config.accountant
Loaner::Config.accountant[product]
Loaner::Config.accountant[product].rules
{}.rules
Loaner::Config.accountant["oec"]
Loaner::Config.accountant["oec"].class
Loaner::Config.accountant[product]
Loaner::Config.accountant[product].class
Loaner::Config.accountant[product].rules
Loaner::Config.accountant[product].rules.klass
Loaner::Config.accountant[product].rules.class
Loaner::Config.accountant[product].rules.john
Loaner::Config.accountant[product].rules.calvin
edit initialize
diff
print-accounting loan
diff
loan.accountant.accounts
print-accounting loan
print-accounting loan -b
total_times
Loaner::Config.products.payday.clusters.size
Loaner::Config.products.oec.clusters.size
Loaner::Config.products
Loaner::Config.products.map { |_, options| options.clusters.size }.sum
diff
print-accounting loan
whereami
loan.defaults
loan.simulated_to
loan.accountant.forward(Date.parse("2014-12-31")
)
print-accounting loan
loan.defaults
url
stub_request(:get, url).to_return(:body => 'passes')
account = @client.get_account(@customer_id)
account = @client.loan_characteristics(@customer_id)
account = @client.loan_characteristics()
account = @client.loan_characteristics('1')
@client.rest_client
@client.rest_client.parse_url(url)
@client.rest_client.methods
whereami
@client
@client.rest_client
RestClient.parse_rul
RestClient::Request
RestClient::Request.parse_url(url)
RestClient::Request.new.parse_url(url)
RestClient::Request.new(url: url).parse_url(url)
RestClient::Request.new(url: url) { |r| r.parse_url(url) }
RestClient::Request.new(url: url, { |r| r.parse_url(url) })
RestClient::Request.new({url: url}, { |r| r.parse_url(url) })
RestClient::Request.new({url => url}, { |r| r.parse_url(url) })
RestClient::Request.new( { url => url }, { |r| r.parse_url(url) })
edit
Response
print-accounting loan
ReportAnalyzer.ensure_all_reports_tie('ca', 'payday', '11', 2014')
ReportAnalyzer.ensure_all_reports_tie('ca', 'payday', '11', '2014')
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Cluster['payday'], '11', '2014')
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], '11', '2014')
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
report
whereami
report_totals_with_multiple(report)
report_totals(report)
54 + 37.5 + 103.21
%w[6_Over_90 5_61_90]
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
ar_by_loan_aging                 = read_ar_by_loan_aging(cluster, product, year, month)
verify_aging(ar_by_loan_aging)
edit verifiy_aging
edit verify_aging(ar_by_loan_aging)
edit verify_aging
verify_aging(ar_by_loan_aging)
Loaner::ReportMappings[:config]
Loaner::ReportMappings[:config][:aging_buckets][:errors]
ar_aging_totals.values_at(Loaner::ReportMappings[:config][:aging_buckets][:errors])
ar_aging_totals
ar_aging_totals.values_at(*Loaner::ReportMappings[:config][:aging_buckets][:errors])
ar_aging_totals.values_at("6_Over 90")
ar_aging_totals["6_Over 90"]
ar_aging_totals
ar_aging_totals[ "6_Over 90"]
whereami
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
total
ar_aging_totals
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
read_ar_by_loan_aging(cluster, product, year, month)
edit read_ar_by_loan_aging
read_ar_by_loan_aging(cluster, product, year, month)
report
report_file_name(cluster, product, month, year, 'ar_by_loan', day)
whereami
read_ar_by_loan_aging(cluster, product, year, month)
report
whereami
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
total
ar_aging_totals
ar_aging_totals.values_at(*Loaner::ReportMappings[:config][:aging_buckets][:errors]).sum
total = ar_aging_totals.values_at(*Loaner::ReportMappings[:config][:aging_buckets][:errors]).sum
types = ar_aging_totals.keys.reject { |bucket| Loaner::ReportMappings[:config][:aging_buckets][:seeds].include?(bucket) }
types.join(',')
types.join(', ')
wtf
ReportAnalyzer.ensure_all_reports_tie(Cluster['ca'], Product['payday'], 11, 2014)
"#{File.join(deploy_to, 'shared', 'loaner_overlay')}"
exit!
whereami
"#{File.join(deploy_to, 'shared', 'config', 'database.yml')}"
"#{File.join(deploy_to,'shared', '.env')}"
#{local_repo}/#{fetch(:stage)}/.env"
"#{local_repo}/#{fetch(:stage)}/.env"
exit!
__FILE__
File.join(File.dirname(__FILE__), '..')
File.dirname(__FILE__)
YAML.load(File.read("../etc/boxes.yml"))[fetch(:stage).to_s]
YAML.load(File.read(File.absolute_path("../etc/boxes.yml")))[fetch(:stage).to_s]
YAML.load(File.read(File.absolute_path("config/etc/boxes.yml")))[fetch(:stage).to_s]
exit!
YAML.load(File.read(File.absolute_path("config/etc/boxes.yml")))[fetch(:stage).to_s]
exit!
print-accounting loan
157.27 - 66.66
\print-accounting loan
print-accounting loan
diff
print-accounting loan
loan
print-accounting loan
entry
memo
entry
memo
memo = lookup_memo(activity, debit_account, credit_account)
diff
print-accounting lon
print-accounting loan
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities.all.each { |a| a.entries.map { |e| e.memo } }
loan.accountant.activities.all.each { |a| a.entries.map { |e| e.memo_id } }
loan.accountant.activities.all.each { |a| a.entries.map { |e| puts e.memo_id } }
loan.accountant.activities.all.each { |a| a.entries.map { |e| puts Memo[e.memo_id] } }
loan.accountant.activities.all.each { |a| a.entries.map { |e| puts Memo[e.memo_id].memo } }
print-accounting loan
loan
print-accounting loan
loan.obligations
loan.obligations.first
loan.obligations.first.interest_due
print-accounting loan
loan
print-accounting loan
whereami
balance(:currently_due)
call_due amount: balance(:currently_due), date: date + 2, use_amount: true
edit loan.accountant.ensure_correct_interest
call_due amount: balance(:currently_due), date: date + 2, use_amount: true
exit!
call_due amount: balance(:currently_due), date: date + 2, use_amount: true
amount
print-accounting loan
exit!
balance(:interest)
amount
print-accounting loan
whereami
reconcile_interest(amount)
edit reconcile_interest
print-accounting loan
exit!
amount
waterfall! amount, entry_types, limit: :credit
accountant.current_activity
current_activity
edit waterfall!
caller
whereami
self
@accountant.current_activity
exit!
print-accounting loan
assert_accounts uncollected_interest: interest_to_realize + initial_accounts[:interest_due], interest_ar: 0
interest_to_realize
exit!
print-accounting loan
loan.realized_interest
whereami
ensure_correct_interest(loan.realized_interest)
edit ensure_correct_interest
ensure_correct_interest(loan.realized_interest)
reconcile_amount
amount
balance(:interest) == amount || (charged_off? && reconcile_amount == amount)
balance(:interest) == amount
balance(:interest)
print-accounting loa
print-accounting loan
print-accounting 
accounts
current_activity.entries
print-accounting loan
whereami
assert_accounts principal: initial_accounts[:principal] - 100, interest_ar: initial_accounts[:interest_ar]
initial_accounts
accounts
print-accounting loan
whereami
print-accounting loan
forward date + 3
accrued_interest = accounts[:interest_ar]
print-accounting loan
call_due 1
print-accounting loan
whereami
assert_accounts interest_ar: 0, interest_called_due: accrued_interest
initial_principal
print-accounting loan
amount_to_call_due
assert_balances currently_due: amount_to_call_due - accrued_interest, past_due: amount_to_call_due
print-accounting loan
date
loan.accountant.rules.call_due_due_amounts?(today)
loan.accountant.rules.call_due_due_amounts?(date)
date
edit loan.accountant.rules.call_due_due_amounts?(date)
edit loan.accountant.rules.call_due_due_amounts?
loan.accountant.rules.call_due_due_amounts?(date)
consider_due_amounts_in_call_due?
date <= rules['call_due_due_amounts']
rules['call_due_due_amounts']
date
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
assert_accounts principal: initial_accounts[:principal] - 100, interest_called_due: initial_accounts[:interest_ar]
"a".to_i
task_args
exit!
task[:interest_due_amount]
task[:interest_to_accrue]
[task[:interest_to_accrue], task[:interest_due_amount]].max
exit!
task
task_args
exit!
task_args
exit!
task_args
exit!
loan.obligations
loan.contractual_obligations
loan.contractual_obligations.first.interest_to_accrue
current_obligation(date)
amount
exit!
amount
exit!
options
exit!
options
amount
exit!
loan.contractual_obligations.first.interest_to_accrue
loan.contractual_obligations
loan.contractual_obligations.principal_due
loan.contractual_obligations.firstprincipal_due
loan.contractual_obligations.first.principal_due
loan.contractual_obligations.principal_due
loan.contractual_obligations.first.principal_due
loan.contractual_obligations.first.interest_due
loan.contractual_obligations.first.principal_due
loan.contractual_obligations.first.interest_due
print-accounting loan
loan.contractual_obligations.first.interest_due
loan.contractual_obligations.first.interest_to_accrue
loan.contractual_obligations.first.principal_due
loan
exit!
loan.contractual_obligations.first.interest_to_accrue
loan.contractual_obligations.first.principal_due
loan.contractual_obligations[2].principal_due
loan.contractual_obligations[1].principal_due
loan.contractual_obligations[1].interest_to_accrue
loan.contractual_obligations[1].interest_due
loan.contractual_obligations[1].interest_to_accrue
loan.contractual_obligations[1].interest_due
loan.contractual_obligations[1].principal_due
print-accounting loan
whereami
obligation
return FinanceXL::ZERO unless obligation
set_interest_accrued(date, obligation)
interest_accrued = obligation.fees_accrued
exit!
edit interest_amount
print-accounting loan
obligation.due_date
print-accounting loan
whereami
obligation
date
loan.contractual_obligations
print-accounting loan
first_obligation
exit!
first_obligation
print-accounting loan
loan.obligations
print-accounting loan
date
loan.simulated_to
exit!
print-accounting loan
loan.simulated_to
exit!
print-accounting loan
loan.simulated_to
forward date
print-accounting loan
num_days = date - Date.today
full_interest = (1..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
exit!
print-accounting loan
date
first_obligation.due_date
date
exit!
print-accounting loan
loan.contractual_obligatoins
loan.contractual_obligatins
loan.contractual_obligations
loan.contractual_obligations[0].principal_due
loan.contractual_obligations[1].principal_due
loan.contractual_obligations[2].principal_due
whereami
create_new_installment obligation: 2, amount: 50, interest: 10, interest_to_accrue: 20
print-accounting loan
loan.contractual_obligations[1].principal_due
create_new_installment obligation: 4, amount: 50, interest: 10, interest_to_accrue: 20
print-accounting loan
forward date + 5
print-accounting loan
payoff 10
print-accounting
interest 1
print-accounting loan
call_due 10
whereami
full_fee
disable-pry
full_interest
print-accounting loan
loan.simulated_to
date
exit!
full_interest
date
print-accounting loan
disable-pry
assert_accounts interest_income: -full_interest, interest_ar: full_interest
print-accounting loan
loan
date
loan.obligations
loan.obligations.sort
forward first_obligation.due_date
print-accounting loan
expect(first_obligation.interest_accrued).to eq full_interest
whereami
calculate_daily_interest(first_obligation, a, Date.today + e)
(1..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
num_days
calculate_daily_interest(first_obligation, 20, date)
date
print-accounting loan
exit!
calculate_daily_interest(first_obligation, 20, date)
date
calculate_daily_interest(first_obligation, 20, date + 1)
print-accounting loan
exit!
date
print-accounting 
loan.accountant.daily_interest(obligation.due_date, date, interest_to_accrue - total_interest)
loan.accountant.daily_interest(obligation.due_date, date - 1, interest_to_accrue - total_interest)
exit!
num_days
full_interest = (1..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
print-accounting loan
exit!
full_interest = (0..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
full_interest = (0..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.tomorrow + e) }
num_days
full_interest = (0..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
full_interest = (1..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e) }
full_interest = (1..Integer(num_days)).reduce(0) { |a, e| a + calculate_daily_interest(first_obligation, a, Date.today + e -1) }
exit!
print-accounting loan
full_interest
exit!
loan_tasks_to_ignore
loan_type
Loaner::Config.exporter.loan_tasks_to_ignore[loan_type]
Loaner::Config.exporter.loan_tasks_to_ignore.common
exit!
loan_tasks_to_ignore
exit!
loan_tasks_to_ignore
loan_type
disable-pry
Array[nil]
Array[[1,2,3]]
exit!
print-accounting loan
whereami
all_amounts
merge
exit!
all_amounts
merge
end_of_cycle_accounts
all_amounts = end_of_cycle.entries.each_with_object(Hash.new(FinanceXL::ZERO)) do |entry, due_amounts|
  due_amounts[entry.dr] = entry.amount
end
exit!
all_amounts
exit!
obligation
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
due_amounts = payment_amounts_of_obligation(obligation)
obligation = past_unpaid_obligations(today, extra_payments: currently_paid).first
due_amounts = payment_amounts_of_obligation(obligation)
print-accounting -b
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-acccounting loan -b
print-acccounting -b
print-accounting -b
exit!
simulator.simulate { finish finish_date }
print-accounting loan
print-accounting simulator
print-accounting accountant
simulator.simulate { finish finish_date }
print-accounting accountant
simulator.simulate { finish finish_date }
print-accounting accountant
print-accounting simulator
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
amount
current_activity
print-accounting loan
print-accounting 
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
print-accounting loan -b
print-accounting 
print-accounting -b
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting 
contractual_obligations
loan.contractual_obligations.select { |ob| ob.early_payment_amount == 107.86 }
exit!
activity
adjusting
print-accounting loan
loan.contractual_obligations.select { |ob| ob.early_payment_amount == 107.86 }
print-accounting loan
loan.contractual_obligations.select { |ob| ob.early_payment_amount == 107.86 }
print-accounting loan
exit!
whereami
print-accounting loan
whereami
loan.contractual_obligations.select { |ob| ob.early_payment_amount == 107.86 }
print-accounting loan
whereami
loan.contractual_obligations.any? { |ob| ob.early_payment_amount == 107.86 } && options[:cancelling]
loan.contractual_obligations.select { |ob| ob.early_payment_amount == 107.86 }
whereami
activities.find(907)
activities.find(907).first
activities.find { |act| act.activity_id == 907 }
act = _
update_early_payment_for_activity(act)
edit update_early_payment_for_activity
update_early_payment_for_activity(act)
obligation
amount == FinanceXL::ZERO || obligation.nil?
amount
obligation
edit calculate_early_payment
update_early_payment_for_activity(act)
amount
obligation
print-accounting loan
whereami
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
filter_activity
exit!
edit update_early_payment_for_activity
print-accounting loan
whereami
activity
new_amount
obligation = previous_obligation(result[:obligation].start_date)
early_payment = [obligation.early_payment_amount, new_amount].min
exit!
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
exit!
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 100
cancel initial_payment
print-accounting loan
exit!
cancel initial_payment
whereami
expect(second_obligation.early_payment_amount).to eq 100
exit!
cancel initial_payment
second_obligation.early_payment_amount
print-accounting loan
exit!
cancel initial_payment
exit!
cancel initial_payment, date + 5
print-accounting loan
exit!
cancel initial_payment, date + 5
print-accounting loan
exit!
cancel initial_payment, date + 5
exit!
cancel initial_payment, date + 5
activities.each do |act|
  break if act.effective_date >= end_date
  update_early_payment_for_activity(act)
end
activities
print-accounting loan
activities[24]
activities.find { |a| a.id == 25 }
whereami
loan.contractual_obligations
print-accounting loan
loan.provisional?
loan.accoutant.rules.provisional?
loan.accountant.rules.provisional?
loan.accountant.rules.pay_customer_balance_first(Date.parse('2015-03-09')
)
loan.accountant.rules.pay_customer_balance_first?(Date.parse('2015-03-09')
)
exit!
options
exit!
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 100
expect(first_obligation.early_payment_amount).to eq 100
cancel initial_payment
whereami
expect(first_obligation.early_payment_amount).to eq 100
expect(first_obligation.early_payment_amount).to eq 10
exit!
cancel initial_payment, date + 5
expect(first_obligation.early_payment_amount).to eq 10
print-accounting loan
exit!
amount
print-accounting loan
whereami
amount
cluster
Cluster[cluster][:id]
exit!
diff
print-accounting loan
loan
diff
print-accounting loan
loan.defaults
print-accounting loan
exit!
diff
print-accounting loan
diff
config
config.enable_hutch
exit!
config.enable_hutch
Hutch
exit!
Hutch
require 'hutch'
Hutch
Hutch.config
Hutch.methods
Hutch.connected?
Hutch.connect
Hutch.publish('calvin', subject: 'test', action: 'rock')
print-accounting loan
loan
diff
print-accounting loan
diff
loan
exit!
loan.obligations
whereami
loan
exit!
diff
print-accounting loan
diff
print-accounting loan
loan
diff
98.71 + 0.43
whereami
print-accounting loan
loan.obligations
exit!
options
accounts
print-accounting loan
loan
whereami
diff
accounts
exit!
before_end_of_cycle?(date: today, payment_activity: current_activity)
obligation
current_obligation(today)
print-accounting loan
current_activity
obligation
before_end_of_cycle?(date: today, payment_activity: current_activity)
current_obligation(today)
running_daily?
running_daily
exit!
options
accounts
print-accounting loan
diff
print-accounting loan
whereami
diff
loan.accountant.accounts
print-accounting loan
diff
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
(balance(:current) + loan.realized_interest - balance(:interest))
accounts[:customer_balance].abs
accounts[:customer_balance].abs == (balance(:current) + loan.realized_interest - balance(:interest))
loan
print-accounting loan
exit!
edit complete_loan
print-accounting loan
loan.obligations
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
whereami
print-accounting loan
diff
print-accounting loan
loAN
loan
diff
print-accounting loan
diff
loan.provisional?
loan.accounant.provisional?
loan.accountant.provisional?
loan.accountant.rules.provisional?
exit!
whereami
print-accounting loan
amount
whereami
options
options[:early_payment]
early_payment?(options)
early_payment?(amount, amount)
early_payment?(options[:amount], options[:amount])
edit early_payment?
print-accounting loan
edit waterfall_to_pay_current
diff
print-accounting loan
print-accounting loan -b
loan
print-accounting loan -b
diff
print-accounting loan
diff
195.93 - 242.95
print-accounting loan -b
diff
print-accounting loan
diff
195.93 - 242.95
print-accounting loan -b
loan
diff
Hutch.channel
Hutch.methods
Hutch.consumers
Hutch.connected?
Hutch::Logging.logger = Rails.logger
Hutch.publish('calvin', subject: 'test', action: 'rock')
Hutch.config
Hutch.get(:mq_exchange)
Hutch::Config
Hutch::Config.new
Hutch::Config
Hutch::Config.methods
Hutch::Config.get(:mq_exchange)
Hutch::Config.get(:mq_vhost)
Hutch::Config.get(:mq_exchange)
print-accounting loan
print-accounting loan -b
loan
print-accounting loan
loan
loan.accountant.forward(Date.parse('2015-01-01')
)
print-accounting loan
loan.defaults
exit
activity
exit!
activity
print-accounting loan
whereami
default_date = activity.cancels? ? earliest_default(activity.effective_date) : activity.effective_date
whereami
loan.defaults
print-accounting loan
loan.default
loan.defaults
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.defaults
loan.accountant.forward(Date.parse('2015-01-01'))
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.obligations
loan.obligations.sort
loan.defaults
Hutch.connect
Hutch.disconnect
Hutch.connect
Hutch.publish('calvin', subject: 'test', action: 'rock')
50.times { Hutch.publish('calvin', subject: 'test', action: 'rock') }
Hutch.queue('calvin')
Hutch.broker.queue('calvin')
50.times { Hutch.publish('calvin.rocks', subject: 'test', action: 'rock') }
Hutch.broker.queue('calvin')
Hutch.broker.channel
Hutch.broker.channel.name
Hutch.broker.channel.methods
Hutch.broker.channel.queues
Hutch.broker.channel.queues.keys
Hutch.broker.channel.methods
Hutch.broker.channel.exchanges
Hutch.broker.channel.exchanges.keys
Hutch.broker.channel.id
Hutch.broker.bindings
Hutch.broker.bind_queue('calvin', 'calvin.rocks')
Hutch.broker.bind_queue('calvin', ['calvin.rocks'])
Hutch.publish('calvin', subject: 'test', action: 'rock')
50.times { Hutch.publish('calvin', subject: 'test', action: 'rock') }
Hutch.broker.queue('calvin.rocks')
50.times { Hutch.publish('calvin.rocks', subject: 'test', action: 'rock') }
edit Hutch.publish
edit Hutch.broker.publish
Hutch.publish('calvin', subject: 'test', action: 'rock')
properties
@exchange
whereami
properties
global_properties
non_overridable_properties
edit Hutch.broker.publish
Hutch.publish('calvin.rocks', subject: 'test', action: 'rock')
50.times { Hutch.publish('calvin.rocks', subject: 'test', action: 'rock') }
exit
exit!
print-accounting loan
loan
print-accounting loan
exit!
changes
accounts
early_payment?(amount, remaining_for_current)
edit finalize_payoff_amounts
rules.billing_fees?
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.defaults
loan
print-accounting loan
exit!
balances
accounts
exit!
print-accounting loan
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
print-acccounting loan
print-acccounting 
print-accounting 
whereami
assert_accounts fees_due: 75,
1
assert_accounts fees_due: 75
accounts
whereami
print-accounting loan
whereami
exit!
whereami
print-accounting
current_activity
whereami
accounts
modifications
amount
account
whereami
billing_fee.entries
account
fee_accounts.index(account)
fee_accounts.index(:fees_ar)
whereami
modifications
exit!
modifications
billing_fee_modifications
fee_accounts
exit!
modifications
account
billing_fee_modifications.key?(account)
modifications[account]
accounts[account] += modifications[account
]
modifications[account] = FinanceXL::ZERO
with_account_check(account, amount)
with_account_check(account, amount) {}
account
amount
whereami
account
accounts
billing_fee_modifications.key?(account)
modifications[account]
accounts[account]
with_account_check(account, amount) {}
exit
whereami
billing_fee_modifications
exit!
billing_fee_modifications[account]
billing_fee_modifications
accounts[account]
accounts
account
whereami
billing_fee_modifications
accounts
account
whereami
billing_fee_modifications
whereami
account
balance
exit!
changes
exit!
remaining_balance
accounts[account]
changes[account]
[remaining_balance, amount].min
changes
remaining_balance
[remaining_balance, amount].min
amount
entry.amount
changes
fee_accounts
accounts
remaining_balance
amount
fee_accounts
whereami
modifications.merge(billing_fee_modifications)
billing_fee_modifications
modifications
exit!
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
print-accounting loan
exit!
billing_fee_modifications
accounts
exit!
billing_fee_modifications
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
exit!
assert_accounts fees_ar: initial_accounts[:fees_ar], principal: initial_accounts[:principal] - 100
print-accounting loan
whereami
assert_accounts fees_ar: initial_accounts[:fees_ar]
whereami
exit!
modifications
accounts
whereami
previous_obligation(today).billing_fee_assessed?
exit
exit!
assert_accounts fees_due: 75
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75
print-accounting loan
accounts
print-accounting loan -b
exit!
modifications
billing_fee_modifications
accounts
modifications
billing_fee_modifications
modifications.merge(billing_fee_modifications)
modifications.merge!(billing_fee_modifications)
modifications
exit!
print-accounting loan
whereami
create_end_of_cycle amount: 100, obligation: 2
print-accounting loan
whereami
assert_accounts uncollected_fees: initial_accounts[:fees_called_due], uncollected_unrecognized_fees: initial_accounts[:unrecognized_fees]
initial_accounts = accounts.dup
exit!
assert_accounts uncollected_fees: initial_accounts[:fees_called_due], uncollected_unrecognized_fees: initial_accounts[:unrecognized_fees]
whereami
print-accounting loan 
whereami
assert_accounts uncollected_unrecognized_fees: initial_accounts[:unrecognized_fees]
accounts
initial_accounts
assert_accounts uncollected_fees: initial_accounts[:uncollected_fees] + initial_accounts[:fees_called_due]
whereami
assert_accounts uncollected_unrecognized_fees: initial_accounts[:uncollected_unrecognized_fees] + initial_accounts[:unrecognized_fees]
initial_accounts[:unrecognized_fees]
assert_accounts uncollected_unrecognized_fees: 75 - initial_accounts[:fees_called_due]
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
assert_accounts fees_called_due: initial_accounts[:interest_called_due], unrecognized_fees: 75 - accounts[:fees_called_due]
print-accounting loan
exit!
initial_accounts[:fees_called_due]
print-accounting loan
print-accounting loan -b
whereami
assert_accounts fees_called_due: initial_accounts[:interest_called_due]
assert_accounts unrecognized_fees: 75 - initial_accounts[:interest_called_due]
initial_accounts[:unrecognized_fees]
initial_accounts[:unrecognized_fees] + 75 - initial_accounts[:interest_called_due]
assert_accounts fees_called_due: initial_accounts[:interest_called_due], unrecognized_fees: initial_accounts[:unrecognized_fees] + 75 - initial_accounts[:interest_called_due]
whereami
config
config.enable_hutch
@tracker
Landable
@tracker
exit!
Landable
Landable::Configuration
wtf
wtf!
caller
whereami
@tracker
untracked?
whereami
Landable.configuration.untracked_paths
untracked_user?
Landable.configuration.dnt_enabled
request.headers["DNT"] == "1"
request.headers
request.headers['DNT']
exit!
untracked?
Landable.configuration.dnt_enabled && request.headers["DNT"] == "1"
Landable.configuration.dnt_enabled
exit!
untracked?
@tracker = Tracker.for self
whereami
@tracker
whereami
Landable::PageView
PageView
PageView.all
visit
visit.attribution
brand
whereami
Application
Rails.application
Rails.application.name
Rails.application
whereami
visit
{ visit_id: visit.id, created_at: visit.created_at, cookie_id: visit.cookie_id }
{ visit_id: visit.id, created_at: visit.created_at, cookie_id: visit.cookie_id }.to_json
{ visit_id: visit.id, created_at: visit.created_at, cookie_id: visit.cookie_id, owner_id: visit.owner_id }
{ visit_id: visit.id, created_at: visit.created_at, cookie_id: visit.cookie_id, owner_id: visit.owner_id, referer_id: visit.referer_id }
visit.referer
current_account_id
session[:landable]
session
session @visitor_id
attribution?
attribution_hash
attribution?
@attribution_hash
whereami
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan - b
print-accounting loan -b
loan.accountant.forward(Date.parse('2015-01-01'0
loan.accountant.forward(Date.parse('2015-01-01')
  loan.accountant.forward(Date.parse('2015-01-01'))
loan.accountant.forward(Date.parse('2015-01-01'))
print-accounting loan
print-accounting loan -b
PageView
PageView.page
PageView.path
PageView.path_id
PageView.first
PageView.first.path
Path
Path.all
request.path
whereami
Landable::PATH_TO_EVENT_MAPS
PATH_TO_EVENT_MAPS
PATH_TO_EVENT_MAPS[p.path]
exit!
p
PATH_TO_EVENT_MAPS[p.path]
PATH_TO_EVENT_MAPPING[p.path]
p.path
PATH_TO_EVENT_MAPPING[p.path]
PATH_TO_EVENT_MAPPING
PATH_TO_EVENT_MAPPING["/#{p.path}"]
exit!
PATH_TO_EVENT_MAPPING["/#{p.path}"]
PATH_TO_EVENT_MAPPING[p.path]
EventType
EventType[PATH_TO_EVENT_MAPPING[p.path]]
EventType.all
Config
Configuration
Configuration.methods
Configuration.enable_hutch
Configuration.hutch_enable
Configuration.hutch_enabled
Configuration.enable_hutch
Landable::Configuration
Landable.configuration
configuration
whereami
Landable.configuration.hutch_enabled
Landable.configuration.
Landable.configuration
PATH_TO_EVENT_MAPPING[p.path]
exit!
EventPublisher.new(p)
Landable::EventPublisher
Landable
Landable::EventPublisher
Landable::Traffic::EventPublisher
Landable
Landable.type
Landable.class
exit!
EventPublisher.new(p)
edit save
enabled?
Hutch.connected?
::Hutch.connected?
whereami
Event[@event]\
]
Event[@event]
whereami
@event
create_event
exit!
EventPublisher.new(self, p).publish
self.visit
self
self.visit
whereami
EventPublisher.new(self, p)
edit EventPublisher.new(self, p)
edit EventPublisher.new
edit EventPublisher.new()
edit /export/landable/lib/landable/traffic/event_publisher.rb
EventPublisher.new(self, p)
tracker
tracker.visit
tracker.visit_id
tracker.methods
tracker.visitor_id
tracker.visitor
tracker.path
tracker.referer
tracker.try(:referer)
tracker.send(:referer)
tracker
tracker.try(:visit)
tracker.visit
tracker.send(:visit)
request
whereami
tracker.request
whereami
tracker.visit_id
tracker.methods
tracker.instance_variables
tracker.instance_variable_get(@visit_id)
tracker.instance_variable_get(:@visit_id)
whereami
exit!
EventPublisher.new(self, p).publish
edit /export/landable/lib/landable/traffic/event_publisher.rb
exit!
EventPublisher.new(self, p).publish
@visit
@tracker
@event
visit.to_json
@visit.to_json
@tracker.referrer
@tracker.referer
@visit.referer
headers['DNT']
tracker.headers['DNT']
@tracker.headers['DNT']
whereami
@tracker.remote_ip
@tracker.ip_address
@visit
visit
@visit.ip_address
@visit.ip_address_id
whereaim
whereami
whereamiEventPublisher.new(self, p).publish
EventPublisher.new(self, p).publish
exit!
message
exit!
message
edit /export/landable/lib/landable/traffic/event_publisher.rb
message
edit /export/landable/lib/landable/traffic/event_publisher.rb
message
edit /export/landable/lib/landable/traffic/event_publisher.rb
message
whereami
message
exit!
message
tracker.user_agent
tracker.user_agent.user_agent
tracker.ip_address
tracker.ip_address.ip_address
tracker.ip_address.ip_address.ip_address
tracker.ip_address.ip_address.to_s
tracker.ip_address.to_s
edit /export/landable/lib/landable/traffic/event_publisher.rb
message
Hutch
message.to_json
Hutch.defined
Hutch.class/
Hutch.class?
Hutch.classify
::Hutch.classify
defined?
(::Hutch)
exit!
enabled?
Hutch
::Hutch
Hutch
config
Landable.configuration
Hutch
::Hutch
exit!
Hutch
Rails.application
AirBrake
Airbrake
edit Airbrake
edit Hutch
Hutch
whereami
Rails.application
exit!
Hutch
Landable::Hutch
exit!
Hutch
edit /export/loaner/config/initializers/hutch.rb
exit!
Hutch
enabled?
Hutch
edit enabled?
defined?(Hutch)
enabled?
whereami
edit enabled
edit enabled?
enabled?
Landable.configuration.enable_hutch
defined?(Hutch)
Hutch.connected?
Hutch.connect
enabled?
whereami
edit enabled?
enabled?
Hutch::Config
Hutch::Config.new(mq_host: 'mq_host: 'http://khargraves-qagg.dev.enova.com/'
mq_api_host: 'http://khargraves-qagg.dev.enova.com/'
Hutch::Config.new(mq_host: 'mq_host: 'http://khargraves-qagg.dev.enova.com/')
Hutch::Config.new(mq_host: mq_host: 'http://khargraves-qagg.dev.enova.com/')
Hutch::Config.new(mq_host: 'http://khargraves-qagg.dev.enova.com/')
Hutch::Config(mq_host: 'http://khargraves-qagg.dev.enova.com/')
Hutch::Config.initialize(mq_host: 'http://khargraves-qagg.dev.enova.com/')
Hutch::Config.config
Hutch::Config.get(:mq_host)
exit!
print-accounting loan
loan
print-accounting loan -b
options[:early_payment]
edit early_payment?
print-accounting loan -b
whereami
early_payment(amount, amount)
amount = options[;amount]
amount = options[:amount]
early_payment(amount, amount)
early_payment?(amount, amount)
original_amount != amount_left
amount_left >= balance(:current) + loan.realized_interest - balance(:interest)
amount_left
balance(:current)
loan.realized_interest - balance(:interest)
balance(:current) + loan.realized_interest - balance(:interest)
print-accounting loan
whereami
balance(:current)
print-accounting loan
print-accounting loan -b
exit!
file_name
Dir['/export/loaner/mocks']
Dir['/export/loaner/mocks'].glob('mocks_')
Dir.for_each('/export/loaner/mocks')
Dir.entries('/export/loaner/mocks')
Dir.entries('/export/loaner/mocks').select { |name| name.include?('mock_') }
Dir.entries('/export/loaner/mocks').select { |name| name.include?('mock_') }.first
mock, cluster, loan_id = Dir.entries('/export/loaner/mocks').select { |name| name.include?('mock_') }.first.split('_')
mock
cluster
loan_id
exit!
whereami
cluster
loan_id
product = 'payday'
test_file_name = "/export/loaner/lib/loans_to_export/test_suite/#{cluster}_#{product}.json"
File.exist?(test_file_name)
loans = JSON.parse(File.read(test_file_name))
found = loans.include?(loan_id)
found = loans.include?(loan_id.to_i)
exit!
cluster
loan_id
exit!
task_args
Boolean(task_args[:early_payment])
Boolean
Booleon
true.class
(task_args[:early_payment]).true?
(task_args[:early_payment]).true
task_args[:early_payment]
print-accounting loan
exit!
Payment.column_names
Payment.columns
options.values_at(*Payment.column_names)
options.values_at(*Payment.column_names.map(&:to_sym))
Payment.column_names.map(&:to_sym)
options.slice(*Payment.column_names.map(&:to_sym))
exit!
options
Payment.column_names.map(&:to_sym)
exit!
options
exit!
options
whereami
options
print-accounting loan
task
exit!
options
print-accounting loan
exit!
options
amount_left >= balance(:current) + loan.realized_interest - balance(:interest)
payment(current_activity)
payment(current_activity).early_payment
Payment.column_names
exit!
payment(current_activity)
payment(current_activity).early_payment
exit!
assert_accounts customer_balance: 0
assert_balances currently_due: 0
print-accounting 
whereami
print-accounting loan
exit!
whereami
print-accounting loan
args
task_args
map_task(task_args)
print-accounting loan
exit!
whereami
balance(:unrecognized_ar) > FinanceXL::ZERO
original_amount != amount_left
payment(current_activity).early_payment
exit!
args
options
exit!
print-accounting loan
payment(current_activity).early_payment
exit!
edit method_missing
amount_left >= balance(:current) + loan.realized_interest - balance(:interest)
print-accounting loan
whereami
print-accounting loan
amount_left >= balance(:current) + loan.realized_interest - balance(:interest)
whereami
payment(current_activity).early_payment
amount_left >= balance(:current) + loan.realized_interest - balance(:interest)
print-accounting loan
whereami
assert_balances outstanding: initial_balances[:outstanding]
print-accounting loan
print-accounting loan -b
whereami
assert_accounts customer_balance: -(balance(:current) - 50)
assert_balances outstanding: initial_balances[:outstanding]
print-accounting loan
print-accounting loan -b
whereami
exit!
print-accounting loan
whereami
assert_balances outstanding: initial_balances[:outstanding]
print-accounting loan
whereami
expect(tasks_to_reconcile).to eq [second]
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit!
print-accounting loan
print-accounting loan -b
print-accounitng loan
print-accounting 
whereami
exit!
print-accounting loan
whereami
print-accounting loan
print-accounting loan -b
whereami
exit!
whereami
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
loan.accountant.activities
loan.accountant.activities.all
loan.accountant.activities.all.map(&:payment_method_id)
exit!
loan.accountant.activities.all.map(&:payment_method_id)
exit!
Loaner::Reporting.loan_exporter[query_name]
result = _
product
exit!
sql
sanitize_sl(sql, *args)
exit!
sanitize_sql(sql, *args)
whereami
product
caller
result[product]
result
exit!
result
exit!
query
SELECT cnuapp_loan_id, loan_type, task_id, task_name, date, parent_id, (CASE WHEN task_name = 'new_instl_task' AND pt_name = 'new_installment' THEN SUM(CASE WHEN pt_name = 'new_installment' THEN amount ELSE 0 END) WHEN task_name = 'payoff_instl_task' THEN SUM(CASE WHEN pt_name LIKE '%_pmt' THEN amount ELSE 0 END) ELSE SUM(amount) END) amount, SUM(CASE WHEN (task_name = 'new_instl_task' AND pt_name = 'new_interest') THEN amount ELSE 0 END) interest_due_amount, SUM(CASE WHEN (task_name = 'new_instl_task' AND pt_name = 'new_rollover') THEN amount ELSE 0 END) interest_to_accrue, SUM(CASE WHEN (task_name = 'payoff_instl_task' AND pt_name IN ('interest_credit', 'rollover_interest_credit') THEN amount ELSE 0 END) interest_to_unbook, SUM(CASE WHEN (task_name = 'payoff_instl_task' AND pt_name = 'new_interest') THEN amount ELSE 0 END) interest_to_book, MIN(CASE WHEN task_name IN ('early_payoff_loan_task', 'payoff_loan_task','payoff_loan_nsf_task', 'payoff_loan_no_nsf_task', 'payoff_instl_task', 'new_loan_task') THEN payment_method_cd ELSE NULL END) payment_method FROM ( SELECT lt.loan_id cnuapp_loan_id, lt.id task_id, lt.loan_task_cd task_name, pt.eff_date date, lt.parent_id, pt.payment_transaction_name pt_name, pt.amount, l.loan_type_cd loan_type, pt.payment_method_cd FROM payment_transactions pt JOIN loan_tasks lt ON lt.id = pt.loan_task_id JOIN loans l ON lt.loan_id = l.id LEFT JOIN loan_tasks plt ON plt.id = lt.parent_id WHERE lt.loan_id IN (24974115) AND pt.eff_date <= current_date AND lt.loan_task_cd NOT IN ('force_default_task') AND (plt.loan_task_cd IS NULL OR plt.loan_task_cd NOT IN ('force_default_task')) ) t GROUP BY cnuapp_loan_id, task_id, loan_type, task_name, date, parent_id ORDER BY cnuapp_loan_id, date, task_id
exit!
query
print-accounting loan
v
Sql.connection.select_all("SELECT * FROM #{table_name} WHERE acct IS NULL LIMIT 1")
missing_gl_accounts.present?
e
cluster
product
Sql.connection.select_all("SELECT * FROM #{table_name} WHERE acct IS NULL LIMIT 1")
table_name = "accounting.import_#{cluster.name}_#{product.product}"
Sql.connection.table_exists?(table_name)
caller
exit!
e
table_name
whereami
caller
e
exit!
e
exit!
print-accounting loan
exit!
print-accounting lona
print-accounting loan
exit!
print-accounting loan
exit
print-accounting loan
exit!
contractual_payments.each { |payment| payment.save! if payment.changed? }
edit save_accountant
exit!
contractual_payments.each { |payment| payment.save! if payment.changed? }
contractual_payments
exit!
@tracker
@tracker.controller
@tracker.controller.site
@tracker.controller.current_site
@tracker.controller.params
@tracker.controller.params["site'}
print-accounting loan
amount
whereami
activity
activity.entries
adjusting
print-accounting loan
print-accounting 
print-accounting -b
whereami
print-accounting loan
whereami
calculate_early_payment(activity, filter_activity)
current_activity
activities
activities.push(current_activity)
whereami
print-accounting
current_activity
exit!
print-accounting 
current_activity
wherami
whereami
caller
clear
.clear
whereami
amount
activity
amount
print-accounting loan
exit!
diff
print-accounting oan
print-accounting loan
loan
amount
print-accounting loan
whereami
current_activity
whereami
activity
print-accounting loan
print-accounting loan -b
exit!
amount
result
print-accounting loan
result
wheremai
whereami
print-accounting loan
resul
result
exit!
amount
print-accounting loan
wherami
whereami
result
print-accounting
exit!
print-accounting loan
whereami
amount
print-accounting loan
activity
exit
print-accounting loan
exit
simulator
print-accounting loan
print-accounting simulator
whereami
print-accounting 
whereami
print-accounting simulator
exit!
date
end_date
@date
start_date
@start_date
exit!
simulator
print-accounting loan
print-accounting
exit!
start_date
simulator
start_date
print-accounting
whereami
print-accounting loan
print-accounting
print-accounting simulator
whereami
simulator
print-accounting simulator
simulator.start_date
whereami
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
time
actual
actual.count
count
print-accounting loan
print-accounting 
whereami
actual
exit!
print-accounting
print-accounting @accountant
time
self.daily_guard_procs.merge(time => block)
self.daily_guard_procs
self.daily_guard_procs.merge(time => block)
self.daily_guard_procs
self.daily_guard_procs.merge!(time => block)
self.daily_guard_procs
exit!
print-accounting loan
print-accounting @accountant
exit!
print-accounting 
print-accounting simulator
start_date
exit!
print-accounting simulator
print-accounting
print-accountingexit!
exit!
print-accounting
print-accounting simulator
exit!
simulator
print-accounting
print-accounting simulator
start_date
accountant.daily_procs
exit!
simulator
print-accounting simulator
exit!
print-accounting simulator
print-accounting loan
exit!
print-accounting loan
exit!
accountant.daily_procs
exit!
daily_procs.merge(ledger => { time => block })
self.daily_procs = daily_procs.merge(ledger => { time => block })
self.daily_procs
daily_procs
daily_procs.merge(ledger => { time => block })
daily_procs.deep_merge(ledger => { time => block })
exit!
print-accounting loan
forward date + 1
print-accounting loan
time
print-accounting @accountant
exit!
formatted { Sql.balances(loan_ids, Cluster[cluster].id, loan_ids, Cluster[cluster].id) }
Sql.type
Sql.class
exit!
Sql
edit Sql
exit!
Sql
whereami
edit Sql
exit!
user_roles
user_roles.each_with_index([]) do |(permission, tmp_roles), hash| {}
  user_roles.each_with_index([]) do |(permission, tmp_roles), hash| end
end
user_roles.each_with_index([]) do |(permission, tmp_roles), hash| end
user_roles
user_roles.each_with_index([])
user_roles.each_with_index([]) do |(permission, tmp_roles), hash| puts permission end
user_roles.each_with_object([]) do |(permission, tmp_roles), hash| puts permission end
exit
Product.enabled_products
Product.enabled_products.map { |product| product.product.humanize }
Product.enabled_products.map { |product| product.humanize }
Product.enabled_products.each { |product| suppress(ActiveRecord::RecordNotUnique) { Product.where(product: product).first_or_create! } }
products = Product.enabled_products(&:humanize)
Product.enabled_products(&:humanize)
'payday'.humanize
Product.enabled_products.map(&:humanize)
Landable
Landable::PATH_TO_EVENT_MAPPING
Landable
Landable.methods
Landable.constants
Landable.constants[:EventPublisher]
Landable::EventPublisher
Landable.class
exit!
Landable
Landable::EventPublisher
Landable::EventPublisher.constatns
Landable::EventPublisher.constants
PATH_TO_EVENT_MAPPING[page_view.path]
exit!
PATH_TO_EVENT_MAPPING[page_view.path]
Landable::EventPublisher
whereami
application
Rails.application
Rails.application.reload_plugins
Rails.application.methods
Rails.application.reload!
Rails.application.reload?
Rails.application.reload_all
whereami
Landable.reload
require "#{Rails.root}/lib/event_mapper.rb"
whereami
PATH_TO_EVENT_MAPPING[page_view.path]
page_view.path
PATH_TO_EVENT_MAPPING
whereami
diff
print-accounting loan
exit!
rules.consider_draws_on_oec_date?(today)
rules
rules['consider_draws_on_oec_date']
rules.rules['consider_draws_on_oec_date']
today >= rules.rules['consider_draws_on_oec_date']
range
date >= range['start'] && date <= range['end']
disable-pry
print-accounting loan
whereami
assert_accounts fees_ar: 100
print-accounting loan
print-accounting 
whereami
initial_accounts
whereami
print-accounting 
print-accounting loan
call_due 50
whereami
initial_accounts = accounts.dup
create_end_of_cycle amount: 100, obligation: 3, interest: 0
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
whereami
assert_accounts fees_ar: 100
print-accounting loan
balance(:currently_due)
print-accounting loan -b
balance(:currently_due)
whereami
assert_accounts fees_ar: 100, principal: initial_accounts[:principal] - (100 - 50)
exit!
whereami
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
print-accounting loan
wheremai
whereami
assert_accounts fees_due: 75
print-accounting loan -b
whereami
print-accounting loan 
print-accounting loan -b
whereami
assert_accounts fees_due: 75
print-accounting loan 
print-accounting loan -b
past_unpaid_obligations(today)
past_unpaid_obligations(today, extra_payments: current_due_amounts)
invalidate_default_calculator
past_unpaid_obligations(today, extra_payments: current_due_amounts)
invalidate_default_calculator
assert_accounts fees_due: 75, fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
print-accounting loan
whereami
assert_accounts fees_due: 75
print-accounting loan -b
whereami
assert_accounts fees_ar: initial_accounts[:fees_ar] - 75, principal: initial_accounts[:principal] - (100 - 75)
print-accounting loan
whereami
assert_accounts fees_due: 75
assert_accounts fees_ar: initial_accounts[:fees_ar] - 75
print-accounting loan
whereami
print-accounting 
whereami
print-accounting loan
payoff amount: balance(:currently_due) + balance(:past_due)
print-accounting loan
loan.country
rules.call_due_due_amounts?(today)
loan.accountant.rules.call_due_due_amounts?(today)
loan.accountant.rules.call_due_due_amounts?(Date.today)
loan.accountant.rules.call_due_due_amounts
edit
edit loan.accountant.rules.call_due_due_amounts?(Date.today)
edit loan.accountant.rules.call_due_due_amounts?
loan.accountant.rules.call_due_due_amounts
edit loan.accountant.rules.call_due_due_amounts?(Date.today)
loan.accountant.rules.call_due_due_amounts?(Date.today)
rules['call_due_due_amounts']
consider_due_amounts_in_call_due? || date <= rules['call_due_due_amounts']
consider_due_amounts_in_call_due?
consider_due_amounts_in_call_due
whereami
edit consider_due_amounts_in_call_due
edit consider_due_amounts_in_call_due?
method_missing
edit method_missing
consider_due_amounts_in_call_due?
rules[name].include?(cluster)
cluster
loan.country
whereami
loan.country
loan.cluster
print-accounting loan
whereami
print-accounting laon
print-accounting 
print-accounting loan
print-accounting loan -b
assert_accounts uncollected_fees: initial_accounts[:uncollected_fees] + initial_accounts[:fees_called_due],
]
assert_accounts uncollected_fees: initial_accounts[:uncollected_fees] + initial_accounts[:fees_called_due]
assert_accounts uncollected_unrecognized_fees: 75 - initial_accounts[:fees_called_due]
assert_accounts principal: initial_accounts[:principal] - (100 - 75)
print-accounting loan
gs
whereami
gs
print-accounting loan
PATH_TO_EVENT_MAPPING[page_view.path]
PATH_TO_EVENT_MAPPING
exit!
whereami
page_view.path
exit!
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan
exit!
called_due?
print-accounting loan
called_due?
print-accounting loan
called_due?
print-accounting loan
called_due?
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
whereami
accountant
@accountant.simulating_accountant(start_date: today - 1).called_due?
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting
whereami
currently_paid
past_unpaid_obligations(today, extra_payments: currently_paid)
default_calculator_as_of
default_calculator_as_of(today)
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
caller
wheream
whereami
untracked?
Landable.configuration.dnt_enabled && request.headers["DNT"] == "1"
Landable.configuration.untracked_paths.include? request.fullpath
Landable.configuration.dnt_enabled
request.headers["DNT"] == "1"
request.headers["DNT"]
request.headers
whereami
request.headers["DN"]
request.headers["DNT"]
request.headers
whereami
exit!
caller
whereami
edit proxy
PATH_TO_EVENT_MAPPING[page_view.path]
page_view.path
exit!
page_view.path
event_type = PATH_TO_EVENT_MAPPING[page_view.path]
@tracker = tracker
whereami
@visit = tracker.visit
@event = tracker.create_event(event_type, meta)
exit!
event_type
return unless event_type
page_view
page_view.path
request.type
request
page_view
page_view.http_method
exit!
event_type
page_view
page_view.path
event_type
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
exit!
print-accounting loan
loan
print-accounting loan
payment
exit!
payment
exit!
print-accounting loan
whereami
assert_accounts customer_balance: -5
assert_accounts customer_balance: -5, fees_ar: 200, interest_income: interest_income - accrued_interest, interest_ar: 0,
0
assert_accounts customer_balance: -5, fees_ar: 200, interest_income: interest_income - accrued_interest, interest_ar: 0
print-accounting loan
whereami
print-accounting loan
payoff 10, early_payment: true
print-accounting 
known
unknown
known.map!(&:last).inject(:+)
known.size
tests
known
known.map!(&:last)
known
known.map!(&:last).inject(:+)
unknown
runtimes
tests
whereami
tests
edit
times
allowed_missing
allowed_missing = options[:allowed_missing] || 1.0
allowed_missing = tests.size * allowed_missing
times
edit
exit!
tests
edit 
whereami
test
time
allowed_missing
times
whereami
times
tests
disable-pry
whereami
test
tests
runtimes
disable-pry
@required_attributes
user
whereami
@required_attributes
user['member_of'].include? "CN=loaner_developer|loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com"
user_groups
filter = Net::LDAP::Filter.eq("uniqueMember", dn)
admin_ldap.search(:filter => filter, :base => @group_base)
in_group?("CN=loaner_developer|loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
edit in_group?
in_group?("CN=loaner_developer|loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)
group_name
in_group?("OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)[group_attribute]
group_attribute
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)['unique_member']
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject){ |e| puts e }
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)[0]['unique_member']
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)[0]
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject)[0][group_attribute]
admin_ldap.search(:base => group_name, :scope => Net::LDAP::SearchScope_BaseObject){ |e| puts e[group_attribute] }
whereami
edit in_group
edit in_group?
whereami
in_group?("CN=loaner_developer,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
in_group?("CN=loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
user
user[:member_of]
in_group?("CN=loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
whereami
required_attributes.each
in_group?("CN=loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com", 'member_of')
in_group?("CN=loaner_finance,OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com", 'memberof')
whereami
user['memberof'
]
user['memberof']
caller
in_group?("OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com", 'memberof')
in_group?("OU=Portal,OU=Apps,OU=Groups,OU=CORP,DC=enova,DC=com")
caller
user
Devise::LDAP::Connection.new(options)
result = super
result
in_loaner_roles?
in_loaner_groups
in_loaner_groups?
result = in_loaner_groups?
self
self.class
self.class.admin
result = in_loaner_groups?
user
print-accounting loan
loan.obligations
loan.obligations.sort
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
loan
print-accounting loan -b
past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])
default_calculator_as_of
@default_calculator
today
print-accounting loan
@default_calculator
whereami
past_due_obligations = past_due_obligations(today, extra_payments: [{ date: today, amount: amount }])
print-accounting loan
loan.defaults
loan
print-accounting loan
assert_accounts uncollected_unrecognized_interest: 10
assert_accounts uncollected_unrecognized_interest: 10, interest_income_recoveries: initial_accounts[:unrecognized_interest_income] + 10
assert_accounts uncollected_unrecognized_interest: 10, interest_income: initial_accounts[:interest_income] + initial_accounts[:unrecognized_interest_income] + 10
assert_accounts uncollected_unrecognized_interest: 10, interest_income: initial_accounts[:interest_income] + initial_accounts[:unrecognized_interest_income] + 10, unrecognized_interest_income: -10
print-accounting loan
print-accounting loan -b
print-accounting simulator
print-accounting accountant
print-accounting simulator
11.31 + 17.22
print-accounting loan
whereami
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
exit!
print-accounting loan
exit!
obligation
whereami
print-accounting loan
current_activity
whereami
edit obligation_to_update
exit!
print-accounting loan
obligation
print-accounting loan
charged_off?
rules.accrue_late_fees_ar?
charged_off?
obligation
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
obligation
print-accounting loan
obligation
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
outstanding_obligations
second_obligation.amount
outstanding_obligations
second_obligation.reload.amount
second_obligation.amount
second_obligation
loan.contractual_obligations
exit!
expect(third_obligation.amount).to eq outstanding_obligations + 10
outstanding_obligatoins
outstanding_obligatinos
outstanding_obligations
third_obligation.reload.amount
third_obligation.amount
loan.contractual_obligations
exit!
loan.contractual_obligations
expect(second_obligation.amount).to eq outstanding_obligations + 10
second_obligation
outstanding_obligations
print-accounting loan
exit!
correction
activity_type
correction
activity_type
correction
activity_type
print-accounting loan
whereami
result
loan.contractual_obligations
end_date
end_date = options[:end_date] || result[:end_date]
obligation_sum
outstanding_amount
loan.contractual_obligations.select { |obligation| obligation.amount > FinanceXL::ZERO }.sort
loan.contractual_obligations.select { |obligation| obligation.amount > FinanceXL::ZERO }.max
exit!
correction
outstanding_obligations
second_obligation.amount
loan.contractual_obligations
correction
obligation
print-accounting loan
correction
loan.contractual_obligations
correction
expect(second_obligation.amount).to eq outstanding_obligations
print-accounting loan
whereami
loan.contractual_obligations
exit!
whereami
exit!
correction
print-accounting loan
whereami
end_date
outstanding_amount
obligation_sum
whereami
current_activity
balance(:currently_due) + balance(:past_due) + balance(:charged_off)
current_activity.entries
accounts
print-accounting loan -b
whereami
correction
outstanding_amount
obligation_sum
exitpast_unpaid_obligations(end_date).map(&:remaining_balance)
past_unpaid_obligations(end_date).map(&:remaining_balance)
end_date
exit!
print-accounting loan
expect(second_obligation.amount).to eq non_recognized
loan.contractual_obligations
print-accounting loan
whereami
expect(current_obligation.amount).to eq principal_balance
loan.contractual_obligations
print-accounting loan
whereami
assert_accounts fees_due: initial_accounts[:fees_due]
loan.contractual_obligations
exit!
past_unpaid_obligations(today, extra_payments: current_due_amounts)
exit!
print-accounting loan
whereami
amounts_to_consider = [{ date: today, amount: balance(:currently_due) + current_activity.activity_amount }]
past_unpaid_obligations(today, extra_payments: amounts_to_consider)
exit!
past_unpaid_obligations
amounts_to_consider = [{ date: today, amount: balance(:currently_due) + current_activity.activity_amount }]
print-accounting loan
past_unpaid_obligations(today, extra_payments: amounts_to_consider)
today
cures_call_due?(amount)
cures_call_due?(current_activity.activity_amount)
whereami
due_amounts = payment_amounts_of_obligation(obligation, consider_accounts: false)
obligation = past_unpaid_obligations(today, extra_payments: amounts_to_consider).first
due_amounts = payment_amounts_of_obligation(obligation, consider_accounts: false)
credit_account
amount_to_restore
temp_accounts[credit_account]].min
temp_accounts[credit_account]
exit!
print-accounting loan
print-accounting laon
print-accounting loan
print-accounting
print-accounting @accountant
print-accounting @accountant -b
activity = activity_effective @accountant.activities, type, eff_date
expect(activity.entries.size).to eq Integer(n)
expect_entries activity, table
activity = activity_effective @accountant.activities, type, eff_date
expect(activity.entries.size).to eq Integer(n)
n = 4
expect(activity.entries.size).to eq Integer(n)
expect_entries activity, table
print-accounting @accountant 
print-accounting simulator
exit!
print-accounting simulator
start_date
end_date
exit
print-accounting simulator
start_date
exit!
print-accounting simulator
start_date
print-accounting simulator
print-accounting @accountant
print-accounting @accountant -b
print-accounting simulator
print-accounting @accountant -b
print-accounting simulator
exit!
print-accounting simulator
start_date
print-accounting simulator
print-accounting @accountant -b
print-accounting @accountant
print-accounting simulator
print-accounting 
print-accounting @accountant
Rails.application
Rails
Rails.name
Rails.application.name
Rails.application.methods
Rails.application.engine_name
Rails.application.class
Rails.application.class.parent_name
print-accounting loan
diff
print-accounting loan
loan.simulated_to
loan.forward(Date.today)
loan.accountant.forward(Date.today)
loan.save!
print-accounting loan
diff
print-accounting loan
loan.defaults
Date.parse("2014-10-10") + 60
diff
print-accounting loan
loan
print-accounting loan
loan
print-accounting loan -b
print-accounting loan
whereai
whereami
billing_fee_modifications
modifications
fee_accounts
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
diff
print-accounting loan
diff
print-accounting loan
print-accounting 
print-accounting simulator
whereami
print-accounting simulator
whereami
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
147.99 - 147.57
print-accounting loan
options
options = options.slice(*Payment.column_names.map(&:to_sym))
disable-pry
wheremi
whereami
Payment.first
e
Payment.first
Payment.first.payment_method_id = nil
Payment.first.payment_method_id
p = Payment.first
p.payment_method_id = nil
p.save
p.save!
p = Payment.first
p.save!
p.payment_method_id = nil
p.save!
payments = Payment.all
payments.each { p.payment_method_id = nil }
payments
payments.each { p.save!}
payments
payments.each(&:reload)
payments = Payment.all
payments.each { |p| p.payment_method_id = nil }
payments.each { |p| p.save! }
cluster = 'us'
tasks_to_update = Sql.tasks_missing_payment_methods(cluster)
cluster = 'us'
tasks_to_update = Sql.tasks_missing_payment_methods(cluster)
cluster = Cluster['us'].id
tasks_to_update = Sql.tasks_missing_payment_methods(cluster)
tasks_to_update = Sql.tasks_missing_payment_methods(cluster).to_a
tasks_to_update = Sql.tasks_missing_payment_methods(cluster).rows
tasks_to_update = Sql.tasks_missing_payment_methods(cluster).rows.flatten
query = Sql.load_query('fetch_payment_methods', tasks_to_update)
payment_methods = Sql.run_cnu_query(query, cluster)
cluster  = 'us'
payment_methods = Sql.run_cnu_query(query, cluster)
edit
wheremai
id
whereami
ls
task_id
tasks_to_update = Sql.tasks_missing_payment_methods(cluster).rows.flatten
cluster = Cluster['us'].id
tasks_to_update = Sql.tasks_missing_payment_methods(cluster).rows.flatten
query = Sql.load_query('fetch_payment_methods', tasks_to_update)
payment_methods = Sql.run_cnu_query(query, cluster)
cluster = 'us'
payment_methods = Sql.run_cnu_query(query, cluster)
payment_methods.each do |(task_id, payment_method)| puts task_id, payment_method end
payment_methods.each do |(task_id, payment_method)| puts task_id end
payment_methods.each do |hash| puts hash[:id], hash[:payment_method_cd] end
payment_methods.each do |hash|
  activity = FinanceXL::Activity.where(task_id: hash[:id]).first
  payment = Payment.find(activity.payment_id)
  payment.payment_method = PaymentMethod[hash[:payment_method_cd]]
  payment.save!
end
payments
Payment.all
print-accounting loan
whereami
print-accounting lona
print-accounting loan
print-accounting loan -b
print-accounting loan
accounts
print-accounting loan
exit!
accounts
whereami
amount
exit!
remainder
options
accounts
waterfall! options[:amount], options[:waterfall], limit: :credit
accounts
current_activity.entries
exit!
options[:amount]
options{:waterfall]
options[:waterfall]
accounts{:principal]
accounts[:principal]
current_activity.entries
edit waterfall!
exit!
edit apply
exit!
$pry
exit!
$pry = true
amount
dr
cr
amount
dr
cr
remaining
accounts[cr]
@accountant
accountant
whereami
ls
balances
exit!
whereami
$pry = true
balances
dr
cr
exit!
accounts
changes
exit!
print-accounting loan
whereami
edit finalize_payoff_amounts
caller
whereami
previous_obligation && previous_obligation.billing_fee_assessed?
exit!
disable-pry
changes
print-accounting loan
current_activity
whereami
prior_obligation
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
activities
relevant_activities
obligation.start_date
found
activities.find { |act| act.type?(:end_of_cycle) && act.effective?(obligation.start_date) }
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
found
edit finalize_fees_accrued_during_obligation
found
act
exit!
act
obligation
found
changes
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
act
whereami
changes
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
edit finalize_fees_accrued_during_obligation
finalize_fees_accrued_during_obligation(prior_obligation)
relevant_activities
changes
whereami
exit!
changes
print-accounting loan
changes
exit!
relevant_activities
fees_accrued = relevant_activities.map(&:activity_amount).sum
fee_accounts = [:unrecognized_fees, :fees_ar]
whereami
changes
print-accounting loan
print-accounting loan -b
accounts
whereami
exit!
changes
accounts
changes
fees_accrued
print-accounting loan
print-accounting loan -b
whereami
changes
exit!
accounts
changes
whereami
final_changes
accounts
caller
exit!
modifications
restore_accounts(modifications)
accounts
exit!
final_changes
changes
print-accounting loan
print-accounting loan -b
whereami
print-accounting loa
print-accounting loan
print-accounting lona
print-accounting loan
loan.accountant.rules
loan.accountant.billing_fees?
loan.accountant.rules.billing_fees?
print-accounting loan
obligation
changes
finalize_fees_accrued_during_obligation(obligation)
exit!
changes
print-accounting loan
exit!
disable-pry
changes
print-accounting loan
exit!
obligation_activities(obligation)
obligation_activities(obligation).each do |act|
  relevant_activities = [] if act.type?(:end_of_cycle) && act.effective?(obligation.start_date)
  next unless act.type?(:new_draw_fee) && !act.cancelled?
  v
  relevant_activities << act
end
obligation_activities(obligation).each do |act|
  relevant_activities << act
end
exit!
relevant_activities
print-accounting loan
obligation_activities
exit!
print-accounting loan
exit!
obligation
print-accounting 
current_activity
whereami
accounts
finalize_fees_accrued_during_obligation(obligation)
activities
exit!
current_activity
@accountant
@accountant.activities
@accountant.activities.select { |act| act.type?(:end_of_cycle) }
exit!
activities
v
finalize_fees_accrued_during_obligation(obligation)
print-accounting loan
print-accountign loan
print-accounting loan
payoff 100
print-accounting loan
create_end_of_cycle obligation: 1, amount: 50, interest: accounts[:interest_ar]
print-accounting loan
print-accounting
whereami
exit!
print-accounting loan
diff
print-accounting loan
loan
print-accounting loan
Time.zone
Time.zone.today
Time.zone.day
Time.zone.today.class
5.day
5.days
5.days.ago
/(\/\w+)+$/ === %r{(\/\w+)+$}
/(\/\w+)+$/ == %r{(\/\w+)+$}
/(\/\w+)+$/ 
%r{(\/\w+)+$}
loan = Loan.first
loan.accountant
loan.accountant.activities
loan.accountant.activities.reverse
date
Date.today
Time.today
Time.zone.today
Loaner::Config.accountant.oec.rules.call_due_due_amounts
Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10
(Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10).to_datetime
(Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10).to_time
Time.zone.today
whereami
exit!
Time.zone.today
(Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10).to_datetime(Time.zone)
Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10
Time.zone
Time.zone.local(Loaner::Config.accountant.oec.rules.call_due_due_amounts - 10)
Time.zone.new(date.year, date.month, date.day)
Time.new(date.year, date.month, date.day)
Time.zone.today
Time.new(Date.today.year, Date.today.month, Date.today.day)
Time.zone
Time.zone.nw
Time.zone.new
Time.new.zone
Time.zone
Time.zone.new
Time.zone.strptime
Time.zone.methods
Time.zone.tomorrow
Time.zone.today
Time.zone.methods
Time.strptime
start_date = '2015/03/01'
year, month, date = start_date.split('/')
year
month
dae
date
start_date = Time.new(year, month, day).beginning_of_day
start_date = Time.new(year, month, date).beginning_of_day
start_date = Time.new(year, month, date)
start_date = Time.zone.local(year, month, date)
start_date = Time.zone.local(year, month, day)
year
raw_start_date
end_date = Time.zone.local(year, month, day)
end_date = Time.zone.strptime(raw_end_date, '%m/%d/%Y').end_of_day
end_date = Time.strptime(raw_end_date, '%m/%d/%Y').end_of_day
loan.accountant.activities.size
loan.accountant.activities.count
loan.accountant.activities.size
get :my_method
Visit.first
controller
controller.visit
controller.tracker
visit
visit = Visit.first
visit = Visit.last
visit.attribution
get :my_method, campaign: 'Test 1'
visit = Visit.last
visit.attribution
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
visit
visit = Visit.last
visit.attribution
get :my_method, campaign: 'Test 1', content: 'My Test', placement: '1'
hash
params
get :my_method, 'campaign' => 'Test 1', 'content' => 'My Test', 'placement' => '1'
hash
params
TRACKING_PARAMS
params('campaign')
params['campaign']
params[:campaign]
params
exit!
headers
get :my_method, campaign: 'Test 1', content: 'My Test'
headers
headers.query_parameters
query_parameters
query_parameters.class
query_parameters.hash_with_indifferent_access
query_parameters.with_indifferent_access
query_parameters.with_indifferent_access.class
edit query_parameters
request.query_parameteres
request.query_parameters
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
whereami
exit!
type
whereami
get :my_method, campaign: 'Test 1', content: 'My Test'
whereammi
whereami
backtrace
get :my_method, campaign: 'Test 1', content: 'My Test'
wtf
get :my_method, campaign: 'Test 1', content: 'My Test'
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
query_parameters
request
ls
request
response
controller.request.
me
controller.request
exxit!
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
hash
visit = Visit.last
visit.attribution
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
controller.request.query_parameters.slice(*TRACKING_KEYS).any?
TRACKING_KEYS
whereami
controller.request.query_parameters.with_indifferent_access.slice(*TRACKING_KEYS).any?
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
exit!
get :my_method, campaign: 'Test 1', content: 'My Test'
controller.request.query_parameters.with_indifferent_access.slice(*TRACKING_KEYS).any?
81:
type = 'user'if controller.request.query_parameters.with_indifferent_access.slice(*TRACKING_KEYS).any?
visit = Visit.last
get :my_method, campaign: 'Test 1', content: 'My Test'
visit = Visit.last
visit.attribution
visit.attribution.campaign
Campaign.last
Campaign.all
controller
controller.tracker
tracker
tracker = controller.instance_variables
tracker = controller.instance_variable_get(@tracker)
tracker = controller.instance_variable_get(:@tracker)
whereami
controller
controller.instance_variables
tracker
tracker.page_view
tracker.visit.page_view
tracker.visit
ls tracker.visit
whereami
visit
visit.page_views
tracker
tracker.visit.page_views.last
exit!
event_type
exit!
event_type
published_message
EventType.all
EventType['Customer Landed']
EventType['Customer Landed'].event
EventType['Customer Landed'].event_type
Event.all
Event.first
Event.first.event_type
published_message[:event]
Event.last
EventType.all
EventType.lookup
EventType.lookup.cache
EventType.lookup.cache.all
print-accounting loan
FinanceXL::Activity.find(78)
FinanceXL::Activity.find(78).entries
FinanceXL::Activity.find(78).entries.first
FinanceXL::Activity.find(78).entries.first.memo
FinanceXL::Activity.find(78).entries.first.memo_id
Memo.find(178)
exit!
activity
memo = lookup_memo(activity, debit_account, credit_account)
debit_account
credit_account
exit!
memo = lookup_memo(activity, debit_account, credit_account)
edit update_memos
Memo.find(178)
FinanceXL::Activity.find(78).entries.first.memo
FinanceXL::Activity.find(78).entries.first.memo_id
Memo.find(123)
presenter
@presenter
obligation
obligation.fees_due
obligation.principal_due
print-accounting loan
obligation
obligation.interest_due
obligation.fees_due
obligation.principal_due
due_amounts
obligation.principal_due -= due_amounts[:principal_due]
exit!
obligation.principal_due
exit!
obligation.principal_due
due_amounts
obligation
obligation.principal_due
due_amounts
obligation.principal_due
exit!
print-accounting loan
exit!
whereami
print-accounting loan
whereami
loan.contractual_obligatoins
loan.contractual_obligations
obligation = current_obligation(Date.parse('2014-01-03') - 1) 
obligation.interest_due
end_date
whereami
end_date
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
obligation = current_obligation(Date.parse('2014-12-20') - 1) 
obligation = current_obligation(Date.parse('2013-12-20') - 1) 
obligation.interest_due
end_date
obligation.principal_due
simulator
print-accounting loan
print-accounting 
print-accounting simulator
whereami
start_dte
start_date
edit prepare_for_simulation
@simulator = nil
simulator
@start_date
accountant.daily_run_times.include?(:evening)
exit!
print-accounting simulator
@start_date
exit!
print-accounting 
simulator
print-accounting simulator
print-accounting
print-accounting simulator
accountant.loan
accountant.loan.current_obligation(Date.parse('2013-12-19'))
accountant.loan.current_obligation(Date.parse('2013-12-19')).interest_due
accountant.loan.current_obligation(Date.parse('2013-12-19')).fees_due
accountant.loan.current_obligation(Date.parse('2013-12-19')).principal_due
exit!
print-accounting simulator
accountant.loan.current_obligation(Date.parse('2013-12-19')).principal_due
accountant.loan.current_obligation(Date.parse('2013-12-19')).interest_due
accountant.loan.current_obligation(Date.parse('2013-12-19'))
exit!
loan.current_obligation(Date.parse('2013-12-19'))
loan.current_obligation(Date.parse('2013-12-19')).interest_due
loan.current_obligation(Date.parse('2013-12-19')).principal_due
accountant.loan.current_obligation(Date.parse('2013-12-19')).interest_due
accountant.loan.current_obligation(Date.parse('2013-12-19')).principal_due
simulator
obligation
obligation.interest_due
due_amounts
act
print-accounting loan
edit due_amounts_of_obligation
whereami
act
due_amounts_of_obligation(today - 1, activity: act)
all_amounts
exit!
edit due_amounts_of_obligation
print-accounting loan
whereami
print-accounting simulator
obligation
due_amounts
print-accounting simulator
print-accountign loan
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting loan
print-accounting simulator
print-accounting loa
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting 
accountant.loan.current_obligation(Date.parse('2013-12-19')).interest_due
loan.current_obligation(Date.parse('2013-12-19')).interest_due
loan.current_obligation(Date.parse('2013-12-19')).principal_due
loan.current_obligation(Date.parse('2013-12-19')).fees_due
loan.current_obligation(Date.parse('2013-12-19')).amount
print-accounting simulator
print-accounting 
diff
print-accounting loan
date
print-accounting loan
adjusting
date
edit update_obligation_amounts
exit!
correction
print-accounting loan
exit!
disable-pry
print-accounting loan
exit!
print-accounting loan
activity
whereami
end_of_cycle
options
all_amounts
exit!
all_amounts
print-accounting loan
date
print-accounting loan
date + 20
date += 20
@date += 20
date
print-accounting loan
payoff 1
print-accounting loan
cancel end_of_cycle
expect(second_obligation.interest_due).to eq FinanceXL::ZERO
expect(second_obligation.fees_due).to eq FinanceXL::ZERO
expect(second_obligation.principal_due).to eq FinanceXL::ZERO
print-accounting loa
print-accounting loan
print-accounting loan -b
4 - 2.28
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting simulator -b
assert_accounts intial_accounts
assert_accounts initial_accounts
whereami
assert_accounts initial_accounts
print-accounting loan
wherami
whereami
initial_accounts[:principal]
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.realized_interest
cancel end_of_cycle
loan.realized_interest
print-accounting loan
whereami
print-accounting loan
whereami
outstanding_amount - obligation_sum
obligation
diff
print-accounting loan
whereami
loan.realized_interest
exit!
loan.realized_interest
amount
[amount, FinanceXL::ZERO].max
print-accounting
whereami
simulator
print-accounting simulator
exit!
loan.realized_interest
end_date
print-accounting simulator
print-accounting options[:simulator]
edn_date
end_date
whereammi
whereami
end_date
amount
exit!
date
print-accounting loan
loan.obligations
whereami
loan.contractual_obligations
date
current_activity
activity_type
date
previous_obligation(date)
edit previous_obligation
edit loan.previous_obligation
previous_obligation(date)
exit!
$pry = true
previous_obligation(date)
in_obligations_window?(date)
obligation = current_obligation_number(date)
dat
date
contractural_obligations
contractual_obligations
whereami
print-accounting loan
print-accounting 
whereami
date
exit!
date
print-accounting 
contractual_obligations
loan.contractual_obligations
date
exit!
print-accounting loan
loan.contractual_obligations
print-accoounting loan
print-accounting loan
loan.contractual_obligations
diff
print-accounting loan
idff
diff
loan
diff
102.98 - 71.64 
exit!
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
exit!
amount
print-accounting loan
whereami
@default_calculator
exit!
amount
@default_calculator
exit!
correction
outstanding_amount - obligation_sum
print-accounting loan
whereami
simulator
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
wherami
whereami
correction
outstanding_amount - obligation_sum
outstanding_amount
end_date
exit!
diff
print-accounting loan
amount
whereami
@default_calculator
amount
diff
print-accounting loan
diff
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
-1205.56 - -1189.06
-1205.56 -1189.06
-1205.56  + 1189.06
print-accounting loan -b
diff
loan.accountant.accounts
whereami
loan_balances
diff
print-accounting loan
options
loan
exit!
options
exit!
changes
accounts
excess_fees
exit!
changes
excess_fees
accounts
print-accounting loan
whereami
accounts.values_at(*fee_accounts)
prior_obligation.fees_due
accounts
today
today.to_s
exit!
balance
excess_fees
current_fees
exit
exit!
balance
act
balance
print-accounting loan
excess_fees
whereami
prior_obligation.fees_due
print-accounting loan -b
whereami
balance
excess_fees
current_fees
exit!
balance
accounts
balance
accounts[act]
prior_obligation.fees_due
final_changes
print-accounting loan
diff
print-accounting loan
assert_loan_status :called_due
args[:fees] || accounts.values_at(:fees_ar, :fees_called_due, :unrecognized_fees).sum
options
caller
whereami
edit
edit perform_task
task_name
fees
args[:fees] || accounts.values_at(:fees_ar, :fees_called_due, :unrecognized_fees).sum
args
options
caller
exit!
task_args
whereami
caller
exit!
assert_accounts interest_due: initial_accounts[:interest_due] + 5, fees_due: initial_accounts[:fees_due]
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
print-accounting oan
print-accounting loan
whereami
fees
print-accounting loan
whereami
fees
exit!
fees
print-accounting loan
assert_accounts interest_ar: interest - [100, interest].min,  fees_ar: fees - [100 - interest, fees].min + 40,
;
assert_accounts interest_ar: interest - [100, interest].min,  fees_ar: fees - [100 - interest, fees].min + 40
ees - [100 - interest, fees].min
fees - [100 - interest, fees].min
principal - [100 - interest - fees, principal].min
accounts[:principal]
exit!
assert_accounts interest_ar: interest - [100, interest].min, fees_ar: fees - [100 - interest, fees].min,
;
assert_accounts interest_ar: interest - [100, interest].min, fees_ar: fees - [100 - interest, fees].min
assert_accounts interest_ar: interest - [100, interest].min, fees_ar: fees - [100 - interest, fees].min, principal:  principal - (100 - interest - fees)
print-accounting loan
exit!
print-accounting loan
whereami
assert_accounts interest_due: interest
interest_ar: interest - accounts[:interest_due]
assert_accounts interest_due: interest, interest_ar: interest - accounts[:interest_due],
;
assert_accounts interest_due: interest, interest_ar: interest - accounts[:interest_due]
assert_accounts fees_due: fees, fees_ar: fees - 10
fees
print-accounting loan
exit!
fees
assert_accounts fees_due: fees, fees_ar: fees - 10
assert_accounts interest_due: interest, interest_ar: interest - accounts[:interest_due]
assert_accounts  principal:  principal - (100 - interest - 10
)
exit!
print-accounting loan
whereami
assert_accounts fees_ar: 100, principal: initial_accounts[:principal] - (100 - accounts[:fees_due])
print-accounting loan
whereami
print-accounting loan -b
whereami
exit!
print-accounting loan
whereami
assert_accounts fees_ar: 65
exit!
assert_accounts fees_ar: 65
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loa
print-accounting loan
whereami
expect(second_obligation.principal_due).to eq 0
diff
print-accounting loan
loan
print-accounting loan -b
diff
print-accounting loan
loan
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
exit!
print-accounting loan
print-accounting lona
print-accounting loan
exit!
diff
print-accounting loan
[].sum
diff
print-accounting lona
print-accounting loab
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
exit!
excess_fees =  current_fees - (prior_obligation.fees_due + extra_fees_to_accrue)
prior_obligation.fees_due
extra_fees_to_accrue
exit!
diff
print-acccounting loan
print-accounting loan
diff
print-accounting loan
whereami
date
print-accounting loan
Time.zone.today
second_obligation.target_date + 1
Time.zone.today + 5
exit!
exit!
whereami
page_view
whereami
tracker
controller
whereami
get :my_path
tracker
exit
tracker
whereami
page_view
page_view.visit
visit
page_view.visit
page_view.visit.ip_address
page_view.visit.attribution
page_view.visit.attribution.ip_address
page_view.visit
page_view.visit.user_agent
whereami
page_view
page_view.request
page_view.visit.visitor
page_view.visit.visitor.try(:ip_address_id
)
page_view.visit.visitor.try(:ip_address_id)
page_view.visit.visitor.try(:ip_address)
page_view.visit.visitor.try(:ip_address).to_s
page_view.visit.visitor.try(:ip_address_id)
published_message
visit.visitor
tracker.visit
tracker.visit.visitor
tracker.visit.visitor.user_agent
whereami
published_message
visitor
user_agent = visitor.try(:user_agent)
user_agent_type = user_agent.try(:user_agent_type)
user_agent_type = user_agent
page_view
page_view.created_at
page_view.user_agent
visit.user_agent
visit.visitoruser_agent
visit.visitor.user_agent
visit.visitor
wherami
pageview.visit.visitor
page_view.visit.visitor
page_view.visit.visitor.user_agent
page_view.visit.visitor.user_agent.raw
whereami
published_message
exit!
published_message
visitor
published_message
exit
page_view.visit
page_view.visit.visitor
page_view.visit.visitor.user_agent
UserAgent[page_view.visit.visitor.user_agent]
published_message
user_agent = visitor.try(:user_agent)
user_agent_type = user_agent.try(:user_agent_type)
whereami
user_agent
user_agent = visitor.try(:raw_user_agent)
exit!
published_message
page_view.visit.visitor
page_view.visit.visitor.ip_address
exit!
published_message
user_agent
user_agent = visitor.try(:user_agent)
user_agent = visitor.try(:raw_user_agent)
whereami
published_message
user_agent = visitor.try(:raw_user_agent)
user_agent = page_view_visitor.try(:raw_user_agent)
user_agent = page_view.visit.visitor.isitor.try(:raw_user_agent)
user_agent = page_view.visit.visitor.try(:raw_user_agent)
user_agent.user_agent_type
user_agent.user_agent_type_id
user_agent = page_view.visit.visitor.try(:raw_user_agent)
whereami
page_view
wtf?
wtf?!?
exit!
page_view
controller
controller.visit
controller.tracker
tracker = controller.instance_variable_get(:@tracker)
exit!
published_message
controller.request.user_agent
page_view.visit
page_view.visit.cookie
page_view.visit.cookie_id
Domain.all
visit
visit.visitor
exit!
diff
print-accounting lona
print-accounting loan
initial_date
num_days
exit!
num_days
accountant.interest_rate.daily.multiply(principal).floor(places: 2) * (num_days - 1)
accounts
print-accounting loan
19 * .05
19 * 0.05
whereami
num_days
accountant.interest_rate.daily.multiply(principal)
accountant.interest_rate.daily.multiply(principal).floor(places: 2)
accountant.interest_rate.daily.multiply(principal).floor(places: 2) * num_days
print-accounting loan
whereami
print-accounting loan -b
whereami
exit!
%w(title_tag meta_tags head_content).each do |tag_name|
  >>          tag = eval("Landable::Liquid::#{tag_name.classify}").new(tag_name, nil, nil)
  #head << tag.render(context) if tag.render(context).present?
end
edit
eval("Landable::Liquid::#{tag_name.classify}").new(tag_name, nil, nil)
tag_name = 'title_tag'
eval("Landable::Liquid::#{tag_name.classify}").new(tag_name, nil, nil)
"Landable::Liquid::#{tag_name.classify}"
"Landable::Liquid::#{tag_name.classify}".safe_constantize"
"Landable::Liquid::#{tag_name.classify}".safe_constantize
fail TypeError.new('Use Landable::NullPageDecorator')
fail TypeError, 'Use Landable::NullPageDecorator'
fail(ArgumentError, 'Landable::Configuration#traffic_enabled accepts false, true, :all or :html')
ArgumentError.instance_variables
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan 0b
print-accounting loan -b
loan.contractual_obligations
diff
print-accounting loan
print-accounting 
print-accounting simulator
wherami
whereami
@original_activities = accountant.activities.all.dup.tap { |acts| acts.push adjusting_activity }
whereami
v
@simulated_activities = simulator.activities
introduce_types = accountant.adjustment_options[:introduces] || []
diff = Diff.new(accountant.books, @original_activities, @simulated_activities, introduce_types)
whereami
diff
whereami
@additional_activities = diff.additional_activities
@adjustment_entries    = diff.adjustment_entries
print-accounting loan
print-accounting simulator
print-accounting
@adjustment_entries
accounts
accountant.accounts
simulator.accounts
print-accounting simulator
@adjustment_entries
print-accounting 
print-accounting simulator
print-accounting 
@adjustment_entries
whereami
exit!
entries
incorrect_sums
@original - simulated
simulated - @original
@original
diff
whereami
@original - simulated
simulated - @original
incorrect_sums
correct_sums
correct_sums.minus(incorrect_sums)
exit!
hash
other
self
other
hash
whereami
incorrect_sums
@original - simulated
simulated - @original
print-accounting 
print-accounting loan
diff
print-accounting loan
loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
whereami
loan
exit!
diff
print-accounting loan
exit!
activity
entry
diff
print-accounting loan
forward date + 3
print-accounting loan
expect(accounts[:interest_ar]).to be > 0
print-accounting loan
forward date + 3
date
whereami
date
whereami
forward date + 3
print-accounting loan
initial_interest = accounts[:interest_income] + accounts[:interest_ar]
expect(accounts[:interest_ar]).to be > 0
payoff balance(:outstanding) - balance(:interest)
print-accounting loan
expect(date).to be < Loaner::Config.accountant.oec.rules.pay_customer_balance_first
print-accounting loan
payment.customer_balance_paid > FinanceXL::ZERO || early_payment?(amount, remaining_for_current)
amount
payment.customer_balance_paid > FinanceXL::ZERO || early_payment?(amount, remaining_for_current)
amount
remaining_for_current
early_payment?(amount, remaining_for_current)
payment(current_activity).early_payment
exit!
print-accounting lona
print-accounting loan
whereami
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
loan
loan.region
exit!
changes
exit!
whereami
current_fees
excess_fees
prior_obligation.fees_due
prior_end_of_cycles
extra_fees_to_accrue
22.5 - 150
exit!
changes
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
print-accounting loan -b
1526.25 + 216
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan
loan.region
exit!
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
message
page_view
page_view.visit
page_view.visit.attribution
exit!
attribution
page_view
page_view.visit.attribution
exit!
attribution
message
exit!
request.query_parameteres
request.query_parameters
controllerrequest.query_parameters
controller.request.query_parameters
TRACKING_KEYS
controller.request.query_parameters
whereami
exit!
message
loan.obligations.any? { |ob| ob.discounted_interest_rate }
Client
Client.oec_statements(loan.cnuapp_loan_id, 'us')
edit Client.oec_statements(loan.cnuapp_loan_id, 'us')
edit Client
loan
@configuration
configuration
exit!
@configuration
@messaging_service ||= @configuration[:messaging_service]
caller
exit!
whereami
PageView.all
Landable::PageView.all
Landable::Pageview
Landable
Landable::Pageview
Landable::Page
Landable::Pageview
exit
exit!
Landable::Traffic::PageView
Landable::Traffic::PageView.all
exit!
p = record_page_view
edit record_page_view
p = record_page_view
request.uuid
untracked_parameters.to_query
request.path
PageView.create(path: request.path)
Page.all
Page
exit!
request.path
Path.all
PageView.create(path: request.path)
PageView.create(http_method: request.method)
PageView.create do |p|
  p.http_method  = request.method
  p.mime_type    = request.format.to_s
  p.path         = request.path
  p.query_string = untracked_parameters.to_query
  p.request_id   = request.uuid
  p.click_id     = tracking_parameters['click_id']
  p.http_status  = response.status
  p.visit_id     = @visit_id
  current_time = Time.now
  p.created_at   = current_time
  p.response_time = (current_time - @start_time) * 1000
end
wtf
wtf!?!
exit!
PageView.create do |p|
  p.http_method  = request.method
  p.mime_type    = request.format.to_s
  p.path         = request.path
  p.query_string = untracked_parameters.to_query
  p.request_id   = request.uuid
  p.click_id     = tracking_parameters['click_id']
  p.http_status  = response.status
  p.visit_id     = @visit_id
  current_time = Time.now
  p.created_at   = current_time
  p.response_time = (current_time - @start_time) * 1000
end
wtf!!
wtf!?!
exit!
page = Landable::Page.where(path: path)
page = Landable::Page.where(path: path).find(:published_revision_id)
page = Landable::Page.where(path: path).select(:published_revision_id).first
exit!
PageView.create do |p|
  p.http_method  = request.method
  p.mime_type    = request.format.to_s
  p.path         = request.path
  p.query_string = untracked_parameters.to_query
  p.request_id   = request.uuid
  p.click_id     = tracking_parameters['click_id']
  p.http_status  = response.status
  p.visit_id     = @visit_id
  current_time = Time.now
  p.created_at   = current_time
  p.response_time = (current_time - @start_time) * 1000
end
page = Landable::Page.where(path: path).select(:published_revision_id).first
self.page_revision_id = page.try(:published_revision_id)
exit!
Loan.select(:loan_id).first
Loan.where(:loan_id: loan.id).select(:loan_id).first
loan
Loan.where(loan_id: loan.id).select(:loan_id).first
Loan.where(loan_id: loan.id).first.select(:loan_id)
Loan.where(loan_id: loan.id).select(:loan_id).first
l = Loan.where(loan_id: loan.id).select(:loan_id).first
l.cnuapp_loan_id
exit!
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting ona
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
loan.contractual_obligations
print-accounting loan -b
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan -b
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting lona
print-accounting loan
diff
print-accounting lona
print-accounting loan
print-accounting lona
diff
print-accounting lona
print-accounting loan
diff
print-accounting lona
print-accounting loan
diff
exit!
diff
print-accounting lona
print-accounting loan
diff
print-accounting loan
loan.accountant.forward(Date.today)
print-accounting loan
loan
print-accounting loan
loan.accountant.earliest_default
loan.accountant.earliest_default(Date.today)
loan.defaults
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan
ls
include Client
Client
reequire 'lib/client.rb'
require 'lib/client.rb'
require 'lib/client'
require 'lib/*'
require 'lib/'
require Rails.root.join('lib', 'client.rb')
Client
brands
cluster_by_brand(brands[0]
)
client
client.get_batches
edit client.get_batches
client.get_batches
response = Proc.new { return Response.create(@rest_client[path].get(:params => params) {|response, request, result| response }) }
response.call
path
@rest_client[path].get(:params => params
)
@rest_client
@rest_client[path]
params
params.get
@rest_client[path].get
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
gs
exit!
edit get_resource
loan
exit!
accounts[:customer_balance]
rules.non_provisional? && loan.interest_method == 'average_daily_balance'
edit calculate_daily_interest
print-accounting loan
accounts[:customer_balance] < FinanceXL::ZERO && rules.non_provisional? && loan.interest_method == 'average_daily_balance'
whereami
print-accounting loan
whereami
daily_interest(relevant_accounts
  daily_interest(relevant_accounts)
daily_interest(relevant_accounts)
balance = Flt::DecNum(accounts.values_at(*principal_accounts).sum.to_s)
accounts
balance = Flt::DecNum(accounts.values_at(*principal_accounts + :customer_balance).sum.to_s)
balance = Flt::DecNum(accounts.values_at(*principal_accounts << :customer_balance).sum.to_s)
amount  = rate.daily.multiply(balance).floor(places: 2)
obligation.daily_discounted_interest_rate.multiply(principal).floor(places: 2)
obligation.daily_discounted_interest_rate.multiply(balance).floor(places: 2)
current_obligation(today).daily_discounted_interest_rate.multiply(balance).floor(places: 2)
current_obligation(today).interest_rate.multiply(balance).floor(places: 2)
interest_rate.multiply(balance).floor(places: 2)
interest_rate.daily.multiply(balance).floor(places: 2)
exit!
diff
print-accounting loan
loan
print-acccounting loan
print-accounting loan
whereami
assert_balances interest: 0
print-accounting loan
whereami
print-accounting loan -b
accountant.rules.consider_interest_ar_in_call_due?
loan.realized_interest
accountant.ensure_correct_interest(loan.realized_interest)
exit
amount
print-accounting loan
amount
whereami
print-accounting loan
whereami
print-accounting loan
edit ensure_correct_interest
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -a call_due
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
forward second_obligation.target_date + 1
print-accounting loan
forward second_obligation.target_date + 2
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
print-accounting simulator
whereami
print-accounting loan
print-accounting
print-accounting simulator
print-accounting simulator -b
print-accounting loan
print-accounting simulator
whereami
print-accounting loan
print-accounting simulator
print-accounting loan
disable-pry
print-accounting loan
print-accounting loan -b
loan
%w(average_daily_balance daily_balance)
%W(average_daily_balance daily_balance)
diff
print-accounting print-accounting loan
print-accounting print-accounting 
print-accounting loan
diff
86.57 + 18.78
206.68 - 101.33
diff
whereami
diff
Publicist
SanDiego
Sandiego
Sandiego.methods
Sandiego::Config
Sandiego::Config.methods
Sandiego::Config.figgy
Sandiego::Config.figgy.load
Sandiego::Config.figgy.sandiego
Landable::PageRevision
Landable::PageRevision.all
Landable::Pages
Landable::Page
Landable::Page.all
Landable::Page.published
Landable::Page.published.size
Landable::Page.published.map(&:path)
Landable::Page.published
loan = Loan.first
loan.obligatons
loan.obligations
loan.obligations.build
loan.save!
loan.obligations
original = SmarterCSV.open('~/Downloads/new_loans_4_20.csv')
original = SmarterCSV.process('~/Downloads/new_loans_4_20.csv')
original = SmarterCSV.process('/Users/cmwesigwa/Downloads/new_loans_4_20.csv')
original.group_by(&:loan_id)
original.group_by { |h| h[:loan_id] }
original.group_by { |h| h[:loan_id] }.sort
original.group_by { |h| h[:loan_id] }
original.group_by { |h| h[:loan_id] }.class
original.group_by { |h| h[:loan_id] }.keys
original.group_by { |h| h[:loan_id] }.delete("loan_id")
original.group_by { |h| h[:loan_id] }.keys
original.group_by! { |h| h[:loan_id] }
hash = original.group_by { |h| h[:loan_id] }
hash
hash.keys
hash.delete 'loan_id'
hash.keys
hash
hash.to_csv
CSV.generate
edit
hash.first
hash[29152990]
hash[29152990].to_csv
edit
hahs
hash
edit
hash
edit
originial
original
original.group_by { |h| h[:loan_id], h[:accounting_date], h[:task_id] }
original.group_by { |h| [h[:loan_id], h[:accounting_date], h[:task_id]] }
original.sort_by { |h| [h[:loan_id], h[:accounting_date], h[:task_id]] }
original
original.sort_by { |h| [h[:loan_id], h[:accounting_date], h[:task_id]] }
original.sort_by { |h| h[:loan_id] }
original.sort_by { |h| h[:loan_id].to_i }
original.delete { |h| h[:loan_id] == 'loan_id' }
original
original.delete_if { |h| h[:loan_id] == 'loan_id' }
original.sort_by { |h| h[:loan_id] }
original.to_csv
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv') { |csv| csv << original.to_csv }
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| csv << original.to_csv }
original.to_csv
original
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| csv << original.sort_by { |h| h[:loan_id] } }
file.close
file
original.sort_by { |h| h[:loan_id] }
original.sort_by { |h| h[:loan_id] }.to_csv
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| original.sort_by { |h| h[:loan_id] }.each { |l| csv << l } }
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| new = original.sort_by { |h| h[:loan_id] }; new.each { |l| csv << l } }
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| new = original.sort_by { |h| h[:loan_id] };  }
new = original.sort_by { |h| h[:loan_id] };
new
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| new.each { |l| csv << l }  }
new.first
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') { |csv| new.each { |l| next unless l ; csv << l }  }
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') do { |csv| new.each { |l| next unless l ; csv << l }  }
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') do  |csv| new.each { |l| next unless l ; csv << l } end
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') do |csv| puts csv; new.each { |l| next unless l ; csv << l } end
file = CSV.open('/Users/cmwesigwa/Downloads/new_loans_4_20_1.csv', 'w') do |csv| puts csv; new.each { |l| next unless csv ; csv << l } end
diff
print-accounting loan
loan.forward(Date.today)
loan.accountant.forward(Date.today)
print-accounting loan
Date.parse('2015-4-30')
Date.parse('2015-4-30') - 18.months
(Date.parse('2015-4-30') - 18.months).to_s
Date.parse('2015-4-30').to_s
defaults
exit
exit!
activity
caller
args
name
print-accounting accountant
print-accounting @accountant
caller
exit!
activity
accountant
accountant.current_activity
caller
exit!
caller
exit!
options
accountant.current_activity
ls
options
caller
exit!
@accountant
@accountant.current_activity
exit!
@accountant.current_activity
whereami
caller
exit!
type
ls
current_activity
exit!
current_activity
exit!
disable-pry
row['id']
row
exit!
accountant.activities
schedule
whereami
table
exit!
row
row['id']
attributes
Activity.new(activity_id: row['id'])
attributes.merge('scheduled_activity' => Activity.new(activity_id: row['id'])) if row['id']
exit!
row
attributes
attributes.merge('scheduled_activity' => Activity.new(activity_id: row['id'])) if row['id']
schedule.schedule(row['name'], attributes.symbolize_keys)
attributes
exit!
event.scheduled_activity
event.scheduled_activity.id
event.scheduled_activity
whereami
event
whereami
ls
schedule
table
exit!
nil.empty?
nil.blank?
nil.present?
"".present?
Landable::Page.column_names
event.scheduled_activity.present?
tabel
table
event
event.scheduled_activity.activity_id
event.scheduled_activity
exit!
if row['id'].present?
  puts 'hi'
end
whereami
row['id']
row['id'].present?
attributes
Activity.new(activity_id: row['id'])
Activity.new(activity_id: row['id']).activity_id
Activity.build(activity_id: row['id']).activity_id
Activity.new(activity_id: row['id']).activity_id
row['id']
Activity.new(activity_id: row['id'].to_i).activity_id
a = Activity.new(activity_id: row['id'].to_i)
a.activity_id
exit!
nil.to_d
Landable::Category.create! name: 'Uncategorized', description: 'No category'
Landable::Category.create! name: 'Affiliates',    description: 'Affiliates'
Landable::Category.create! name: 'PPC',           description: 'Pay-per-click'
Landable::Category.create! name: 'SEO',           description: 'Search engine optimization'
aff = <<-HTML
    <div class="span6">
      <p>Some span6 content</p>
    </div>
    <div class="span6">
      <p>Some span6 content</p>
    </div>
  HTML
seo   = "<div>Hi Google!</div>"
theme = Landable::Theme.where(name: 'Minimal').first
seo_category = Landable::Category.find{ |a| a.name == "SEO"        }
affiliate = Landable::Category.find{ |a| a.name == "Affiliates" }
Landable::Page.create! path: '/seo/payday/emergency', title: 'Quick Loans for Emergencies', body: seo, theme: theme, category: seo_category
Landable::Page.create! path: '/seo/payday/bills', title: 'Quick Loans for Utility Bills', body: seo, theme: theme, category: seo_category
Landable::Page.create! path: '/landing', title: 'Affiliate Landing Page', body: aff, theme: theme, category: affiliate
edit
# seed data for working with publicist+landable in dev
if Rails.env.development? and defined?(Landable::Engine)
  Landable::Category.create! name: 'Uncategorized', description: 'No category'
  Landable::Category.create! name: 'Affiliates',    description: 'Affiliates'
  Landable::Category.create! name: 'PPC',           description: 'Pay-per-click'
  Landable::Category.create! name: 'SEO',           description: 'Search engine optimization'
  aff = <<-HTML
    <div class="span6">
      <p>Some span6 content</p>
    </div>
    <div class="span6">
      <p>Some span6 content</p>
    </div>
  HTML
  seo   = "<div>Hi Google!</div>"
  theme = Landable::Theme.where(name: 'Minimal').first
  seo_category = Landable::Category.find{ |a| a.name == "SEO"        }
  affiliate = Landable::Category.find{ |a| a.name == "Affiliates" }
  Landable::Page.create! path: '/seo/payday/emergency', title: 'Quick Loans for Emergencies', body: seo, theme: theme, category: seo_category
  Landable::Page.create! path: '/seo/payday/bills', title: 'Quick Loans for Utility Bills', body: seo,   Landable::Page.create! path: '/seo/payday/bills', titreate! path: '/landing', title: 'Affiliate Landing Page', body: aff, theme: theme, category: affiliate
end
edit
Landable::Page.create! path: '/seo/payday/bills', title: 'Quick Loans for Utility Bills', body: seo,   Landable::Page.create! path: '/seo/payday/bills', titreate! path: '/landing', title: 'Affiliate Landing Page', body: aff, theme: theme, category: affiliate
edit
Landable.published
Landable::Page.published
Landable::Page.all
Landable::Page.published
Landable::Page.published.size
Landable::Page.published.each(&:path)
Landable::Page.published.map(&:path)
AppConfig
exit!
AppConfig
AppConfig.bunny.rabbitmq
exit!
AppConfig
AppConfig.bunny
AppConfig.root
AppConfig.methods
AppConfig.load
AppConfig.config
exit!
AppConfig
AppConfig.bunny
AppConfig.class
AppConfig.bunny.rabbitmq
name
file_globs
exit
exit!
AppConfig.bunny.rabbitmq
event
page_view
Landable::Page.published
event_type(page_view)
untracked?
request.headers
request.headers.dnt_enabled
request.headers.dnt_enabled?
request.headers.dnt_enabled
request.headers['dnt_enabled']
request.headers['DNT']
edit track_with_landable!
exit!
edit save
page_view
page_view.ppath
page_view.path
error
error.message
page_view.path
error
page_view.path
error
ls
class
end
self
self.bunny
self.instance_variables
self.class_variables
self.configuration
self.methods
self.send(:configuration)
send(:configuration)
self
configuration
caller
self.class
self
send :configuration
ls
publish
self.publish
BunnyMessagingService.configuration
BunnyMessagingService.send(:configuration)
BunnyMessagingService.send(:bunny)
BunnyMessagingService.bunny
BunnyMessagingService.send(:bunny).stop
BunnyMessagingService.send(:queue)
BunnyMessagingService.send(:queue).bunny
ls
exit!
message
queue.publish(message.to_json)
whereami
queue
queue.channel
queue.channel.connection
queue.connection
message
page_view
page_view.path
page_view.type
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
page_view.http_method
page_view.path
event_type
!event_type
@event_type
!event_type
@event_type
bunny
Landable::Page.published
Landable::Page.published.map(&:path)
landing_page_mapping = {}
Landable::Page.published.map(&:path).each { |page| landing_page_mapping[page] = 'Landing Page' }
landing_page_mapping
Landable::Page.published.map(&:path).each_with_object({}) { |page, hash| hash[page] = 'Landing Page' }
landing_page_mapping.merge({
    '/' => 'Homepage',
    '/logout' => 'Logout', #Logout
    '/registration-step1.html' => 'Reg1',
    '/secure/customers/new' => 'Reg1 Submission', # Create new customer
    '/secure/customers/new2' => { 'GET' => 'Reg2', 'POST' => 'Reg2 Submission' },
    '/secure/dispatcher/regappcomplete' => 'Registration Complete',
    'secure/dispatcher/declined' => 'Loan application declined',
    '/secure/advances/new' => 'Loan offer selection',
    '/secure/advances/create' => 'Loan offer selection submission', # POST
    '/secure/dispatcher/loanappcomplete' => 'Loan offer selection complete',
    '/secure/contract/contract' => 'Contract page',
    '/secure/contract/sign' => 'Signed contract submission', #POST
    '/secure/dispatcher/contractcomplete' => 'Contract complete',
    '/secure/debit_card/new' => 'New debit card page',
    '/secure/debit_card/save' => 'New debit card submitted',
    '/secure/debit_card/no_debit_card' => 'Direct Debit Sign-up Page',
    '/secure/direc        '/secure/direc        '/securgn        '/secure/direc        '/secure/direc/e        '/secure/direc        '/secure/direc        '/securgn        '/seccher/register_action' => 'Register new customer' #POST
}).freeze
edit
list
list[:run_statistics][:total]
total_pages(list[:run_statistics][:total])
list
assert row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")
row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")
assert row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")
row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")
expect
expect(row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}"))
expect(row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")).to be_true
assert row.has_link?(batchruns[index]["id"], href: "#{batchrun_path(batchruns[index]["id"])}")
current_timestamp = batchruns[index]["created_on"].to_time
expect(current_timestamp).to be <= previous_timestamp
find("a.loan_id")
find("a.loan_id").methods
find("a.loan_id").value
find("a.loan_id").text
find("a.loan_id").trigger('click')
current_url
current_url.should include("loan")
page
current_page
current_url
click_link text
current_page
current_url
runtime_stats
page.should have_content "#{format_runtime(runtime_stats["recent_weeks"]["wait_time"])}"
target
current_page
page.content
page.body
page.should have_content "test_static_batch_error"
page.body
whereami
find('#confirmation_body_submit')
Rails.cache
Rails.cache.read("git_chain_urls_us")
Rails.cache.read("git_chain_urls_jv")
line_number
url
Rails.cache.read("git_chain_urls_us")
Rails.cache.read("git_chain_urls_us").any { |k,v| v.nil? }
Rails.cache.read("git_chain_urls_us").any? { |k,v| v.nil? }
Rails.cache.read("git_chain_urls_us").any { |k,v| v.nil? }
Rails.cache.read("git_chain_urls_us")
Rails.cache.read("git_chain_urls_jv")
whereami
Rails.cache.read("git_chain_urls_ca")
require Rails.root.join('lib/client.rb')
include Client
client = client_by_brand('cashnetusa')
client.get_chains
require Rails.root.join('lib/client.rb')
include Client
client = client_by_brand('cashnetusa')
client.get_chains
client = client_by_brand('cashnetusa')
include Client
require Rails.root.join('lib/client.rb')
include Client
client = client_by_brand('cashnetusa')
client.get_chains
total_pages(list[:run_statistics][:total])
list
whereami
total_pages(list[:run_statistics][:total])
list
exit!
params
edit pagination_params
params
total_pages(list[:run_statistics][:total])
edit pagination_params
params
client.run_batch(@batch_name)
e
client
client.kill_batchrun @batch_id
edit 
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
wtf?
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
client.kill_batchrun @batch_id
req
setup_credentials req
wtf
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
client.kill_batchrun @batch_id
net
@block_response
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
res = net_http_do_request(http, req, payload ? payload.to_s : nil) \
{ |http_response| fetch_body(http_response) }
http
edit 
edit /Users/cmwesigwa/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rest-client-1.7.2/lib/restclient/request.rb
edit
res = net_http_do_request(http, req, payload ? payload.to_s : nil) { |http_response| fetch_body(http_response) }
net.start { |http| res = net_http_do_request(http, req, payload ? payload.to_s : nil) { |http_response| fetch_body(http_response) } }
http
req
payload
edit net_http_do_request
net
net.ssl_version
net.ssl_timeout
net.verify_mode
OpenSSL::SSL::VERIFY_NONE
exit!
e
wtf?
@block_response
req
@block_response
self
@block_response
self
e
client
exit!
edit transmit
RestClient
RestClient.delete("#{@rest_client.url}/#{path}", { :params => params, :content_type => :json, :accept => :json }
)
Request.new(:verify_ssl)
Request.new(verify_ssl: false)
RestClient::Request.new(verify_ssl: false)
RestClient::Request.new(method: delete, verify_ssl: false)
RestClient::Request.new(method: :delete, verify_ssl: false)
RestClient::Request.new(method: :delete, url: "#{@rest_client.url}/#{path}", verify_ssl: false)
Response.create((RestClient::Request.new(method: :delete, url: "#{@rest_client.url}/#{path}", verify_ssl: false))
)
Response.create((RestClient::Request.execute(method: :delete, url: "#{@rest_client.url}/#{path}", verify_ssl: false)))
exit!
options
Response.create(options { |response, request, result| response })
options
Response.create(options { |response, request, result| response })
Response.create(options, { |response, request, result| response })
Response.create(options { |response, request, result| response })
wtf
wtf!!!!!!
Response.create(options { |response, request, result| response })
options
Response.create(options { |response, request, result| response })
Response.create(RestClient.execute(options) { |response, request, result| response })
Response.create(RestClient::Request.execute(options) { |response, request, result| response })
exit!
api_params
params
current_url
exit!
params
caller
Integer("")
"".to_i
"".empty?
nil.empty
nil.empty?
nil.blank?
"".blank?
BunnyMessagingService.publish(message: 'hi')
BunnyMessagingService.send(:queue)
BunnyMessagingService.publish(message: 'hi')
@event_type
@configuration
@event_type
whereami
@event_type
enabled?
@configuration
untracked?
untracked_user
untracked_user?
request.headers['DNT']
exit!
untracked_user?
@event_type
edit publish
@event_type
page_view
page_view.path
page_view
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
@event_type
page_view.path
e
exit!
Landable::Configuration
Landable.configuraiton
Landable.configuration
Landable.configure
Landable.configure.amqp_configuration
exit!
Landable.configure.amqp_configuration
Rails.cache
Rails.cache.dalli
Rails.cache.values
Rails.cache.keys
Rails.cache.methods
Rails.cache.read('chains_us')
query = Sql.load_query('installments', loan_id, nil, nil)
Sql.run_cnu_query(query, cluster)
customer_id
resource
ids
params
ids
Batchelor::Application
Batchelor::Application.config.autoload_paths
Batchelor::Application.config.path
Batchelor::Application.config.load_path
exit!
include Client
customer_id
is_fake? customer_id
customer_id
exit!
caller
exit!
brand
create_param(client.configuration.fake_prefix)
client
customer_id
ids
params
ids
resource
exit!
ids
customer_id
is_fake? customer_id
@configuration.vcr_key(customer_id, path, params)
exit!
(create_param(client.configuration.fake_prefix))
is_fake? customer_id
resource
caller
exit!
client
edit client
exit!
is_fake? customer_id
customer_id
resource
params
@configuration.vcr_key(customer_id, path, params
)
Time.now
Timecop.frozen?
exit!
Time.now
exit!
Date.today
exit!
customer_id
params
client
params
exit!
id
method
is_fake? customer_id
exit!
is_fake? customer_id
resource
id
edit id_param
params
exit!
id
params
params[0].kind_of?(Hash)
exit!
method
id
method
id
params
id_param(params)
exit!
id_param
params.size.present?
params.present?
params
exit!
[method, id]
is_fake? customer_id
[method, id, params[0]]
is_fake? customer_id
[method, id, params[0]]
[method, id]
is_fake? customer_id
ids
customer_id
[method, id]
params
caller
whereami
is_fake? customer_id
whereami
method
is_fake? customer_id
method
method
caller
exit!
method
id
exit!
find('#confirmation_body_submit').trigger('click')
method
id
expect_any_instance_of(Cnuapp::Client).to receive(:run_batch).with('mock_test_static_batch_error')
whereami
expect_any_instance_of(Cnuapp::Client).to receive(:run_batch).with('mock_test_static_batch_error')
find('#confirmation_body_submit').trigger('click')
method
Client.is_a?(Cnuapp::Client)
client.class
Client.kind_of?(Cnuapp::Client)
client.kind_of?(Cnuapp::Client)
client.is_a?(Cnuapp::Client)
method
id
whereami
find('#confirmation_body_submit')
expect_any_instance_of(Cnuapp::Client).to receive(:run_batch).with('mock_test_static_batch_error')
find('#confirmation_body_submit').trigger('click')
method
id
params
whereami
find('#confirmation_body_submit').trigger('click')
client.send(method, id)
method
id
client.send(method, id)
find('#confirmation_body_submit').trigger('click')
whereami
expect_any_instance_of(Cnuapp::Client).to receive(:run_batch).with('mock_test_static_batch_error')
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
exit!
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
edit client.run_batch
[client.configuration.fake_prefix), name]
[client.configuration.fake_prefix, name]
exit!
find('#confirmation_body_submit').trigger('click')
exit
find('#confirmation_body_submit').trigger('click')
current_url
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
v
client.run_batch(create_param(client.configuration.fake_prefix), name)
31: end
client.run_batch(create_param(client.configuration.fake_prefix), name)
[create_param(client.configuration.fake_prefix), name]
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
edit client.run_batch
expect_any_instance_of(Cnuapp::Client).to receive(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
whereami
find('#confirmation_body_submit').trigger('click')
current_url
current_page
find('#confirmation_body_submit')
exit!
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
find('#confirmation_body_submit').trigger('click')
create_param(client.configuration.fake_prefix)
name
edit client.run_batch
client.run_batch(create_param(client.configuration.fake_prefix), name)
customer_id
ids
exit!
find('#confirmation_body_submit').trigger('click')
client.run_batch(create_param(client.configuration.fake_prefix), name)
customer_id
is_fake? customer_id
whereami
is_fake? customer_id
whereami
find('#confirmation_body_submit').trigger('click')
whereami
find('#confirmation_body_submit').trigger('click')
whereami
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
expect(client).to have_received(:run_batch)
client
exit!
find('#confirmation_body_submit').trigger('click')
method
self
whereami
client
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
exit!
find('#confirmation_body_submit').trigger('click')
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
Client.client
expect(Client).to receive(:client).and_return(client)
allow(Client).to receive(:client).and_return(client)
find('#confirmation_body_submit').trigger('click')
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
Client.client
allow(Client).to receive(:client).and_return(client)
Client.client
allow(Client).to receive(:client).and_return(client)
Client.client
Client.client('cashnetusa')
exit!
client
find('#confirmation_body_submit').trigger('click')
client
client.run_batch(create_param(client.configuration.fake_prefix), name)
find('#confirmation_body_submit').trigger('click')
client
create_param(client.configuration.fake_prefix)
method
whereami
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
client
exit!
page
page.methods
page.body
page.methods
whereami
page.methods
page.save_screenshot
page.save_screenshot('/export/batch_dashboard/shot'
)
edit page.save_screenshot
page.save_screenshot('/export/batch_dashboard/shot')
whereami
find('#confirmation_body_submit')
click_button('#confirmation_body_submit')
click_button('Run', id: '#confirmation_body_submit')
click_button('Run')
exit!
click_button('Run')
method
whereami
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
exit!
find('Run')
find('#confirmation_body_submit')
find('#confirmation_body_submit').trigger('click')
whereami
expect(client).to have_received(:run_batch).with('mock_cashnetusa', 'test_static_batch_error')
click_button('Run')
expect(client).to have_received(:run_batch).with('mock_cashnetusa', batch_to_run)
click_button('Run')
expect(client).to have_received(:run_batch).with('mock_cashnetusa', batch_to_run)
save_screenshot('/export/batch_dashboard/shot.png')
click_button('Run')
whereami
expect(client).to have_received(:run_batch).with('mock_cashnetusa', batch_to_run)
save_screenshot('/export/batch_dashboard/shot.png')
edit click_button
page.click_button('Run')
exit!
diff
print-accounting loan
loan
loan.obligations
print-accounting loan
loan.provisional?
loan.accountant.rules.provisional?
@logger
@logger.closed?
@logger
@logger.close
@logger.stream
@logger.methods
@logger.present
@logger.present?
whereami
@logger
@logger.close
@logger.stream
@logger
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 50
forward date + 3
reconcile accounts[:customer_balance]
reconcile accounts[:customer_balance].abs
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 2
expect(third_obligation.early_payment_amount).to eq 2
print-accounting loan
whereami
print-accounting loan
print-accounting loan -b
whereami
assert_accounts principal: principal_left - 80, fees_ar: 0, customer_balance: 0
assert_accounts principal: principal_left - 90, fees_ar: 0, customer_balance: 0
print-accounting loan
assert_accounts fees_ar: initial_accounts[:fees_ar] - 100, principal: 0, customer_balance: 0
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting loan -b
diff
print-accounting loa
print-accounting loan
diff
print-accounting loan -b
loan
print-accounting loan
loan.accountant.rules.provisioanl?
loan.accountant.rules.provisional?
diff
print-accounting loan
diff
print-accounting 
current_activity
payments_to_reconcile(current_activity)
print-accounting loan
payments_to_reconcile(current_activity)
print-accounting 
print-accounting -b
print-accounting 
payments_to_reconcile(current_activity)
edit payment_to_reconcile
edit payments_to_reconcile
payments_to_reconcile(current_activity)
unreconciled_payments
whereami
edit payments_to_reconcile
payments_to_reconcile(current_activity)
whereami
edit payments_to_reconcile
payments_to_reconcile(current_activity)
unreconciled_payments.values.all?(&:empty?)
unreconciled_payments
edit payments_to_reconcile
payments_to_reconcile(current_activity)
payments.empty?
edit payments_to_reconcile
edit unreconciled_early_payments
payments_to_reconcile(current_activity)
results
accounts[:customer_balance]
early_payments
exit!
payments_to_reconcile(current_activity)
print-accounting 
whereami
activity
print-accounting
current_activity
whereami
caller
whereami
amount
print-accounting loan
amount
activity
whereami
result
edit calculate_early_payment
calculate_early_payment(activity, filter_activity)
early_payments
edit payments_to_reconcile
whereami
calculate_early_payment(activity, filter_activity)
unreconciled_payment
unreconciled_payments
unreconciled_payments.values.all?(&:empty?)
start_date = unreconciled_payments.first[0].effective_date
start_date = unreconciled_payments.first[0]
exit!
edit calculate_early_payment
$pry = true
calculate_early_payment(activity, filter_activity)
start_date = unreconciled_payments.first[0].effective_date
unreconciled_payments
start_date = unreconciled_payments.first
start_date = unreconciled_payments.sort { |act, reconciles| act.effective_date }
start_date = unreconciled_payments.sort { |arr| arr[0].effective_date }
start_date = unreconciled_payments.min { |arr| arr[0].effective_date }
start_date = unreconciled_payments.map { |arr| arr[0].effective_date }
start_date = unreconciled_payments.max { |arr| arr[0].effective_date }
start_date = unreconciled_payments.map { |arr| arr[0].effective_date }
start_date = unreconciled_payments.map { |arr| arr[0].effective_date }.min
exit!
amount
whereami
result
print-accounting
print-accounting -b
exit!
current_obligation(today)
edit complete_loan
exit!
obligation_activities.all? { |act| act.type?(:interest) }
obligation_activities(current_obligation(today))
print-accounting loan
exit!
amount
$pry = true
calculate_early_payment(activity, filter_activity)
unreconciled_payments
edit payments_to_reconcile
exit!
amount
$pry = true
calculate_early_payment(activity, filter_activity)
edit payments_to_reconcile
calculate_early_payment(activity, filter_activity)
start_date
unreconciled_payments.map { |arr| arr[0].effective_date }
activity
print-accounting loan
activity
whereami
edit find_early_payments
early_payments
payments = early_payments.each_with_object([]) do |(early_payment, reconciles), unreconciled|
  amount = amount_change_in_activity(early_payment, :customer_balance).abs
  reconciles.each do |reconcile, remaining|
    with_amount_check([amount, remaining].min) do |amount_to_reconcile|
      amount -= amount_to_reconcile
      early_payments.each { |_, recs| recs[reconcile] -= amount_to_reconcile }
      break if amount == FinanceXL::ZERO
    end
  end
  unreconciled << early_payment if amount > FinanceXL::ZERO
end
edit
amount
whereami
reconciles
amount_change_in_activity(early_payment, :customer_balance).abs
exit!
calculate_early_payment(activity, filter_activity)
$pry = true
calculate_early_payment(activity, filter_activity)
early_payment
remaining
with_amount_check([amount, remaining].min)
with_amount_check([amount, remaining].min) {}
remaining
amount
whereami
unreconciled
early_payment
print-accounting 
early_payment
obligation
loan.contractual_obligations
loan.contractual_obligations.map(&:early_payment_amount)
loan.contractual_obligations.map { |ob| ob.early_payment_amount if ob.early_payment_amount > 0 }
loan.contractual_obligations.map { |ob| ob.early_payment_amount if ob.early_payment_amount > 0 }.compact
loan.contractual_obligations.map { |ob| [ob, ob.early_payment_amount] if ob.early_payment_amount > 0 }.compact
whereami
calculate_early_payment(activity, filter_activity)
early_payments
print-accounting loa
print-accounting loan
exit!
print-accounting loan
diff
exit!
whereami
disable-pry
diff
print-accounting loan
exit!
activity
print-accounting loan
whereami
exit!
unreconciled_early_payments(activity)
activity
print-accounting loan
edit unreconciled_early_payments
unreconciled_early_payments(activity)
edit unreconciled_early_payments
exit!
unreconciled_early_payments(activity)
edit unreconciled_early_payments
unreconciled_early_payments(activity)
edit unreconciled_early_payments
unreconciled_early_payments(activity)
edit unreconciled_early_payments
unreconciled_early_payments(activity)
payments = early_payments.each_with_object([]) do |(early_payment, reconciles), unreconciled|
  amount = amount_change_in_activity(early_payment, :customer_balance).abs
  reconciles.each do |reconcile, remaining|
    with_amount_check([amount, remaining].min) do |amount_to_reconcile|
      amount -= amount_to_reconcile
      early_payments.each { |_, recs| recs[reconcile] -= amount_to_reconcile }
    end
  end
  if amount > FinanceXL::ZERO
    total_to_reconcile += amount
    unreconciled << early_payment
  else
    unreconciled
  end
end
edit
whereami
total_to_reconcile >= customer_balance  || !obligation
customer_balance
print-accounting loan
whereami
activity
edit unreconciled_early_payments
unreconciled_early_payments(activity)
results.any? && total_to_reconcile >= customer_balance  || !obligation
edit unreconciled_early_payments
unreconciled_early_payments(activity)
exit!
amount
print-accounting lloan
loan
print-accounting loan
activity
activity.entries
amount
print-accounting loan
activity
result
edit calculate_early_payment
$pry = true
calculate_early_payment(activity)
whereami
calculate_early_payment(activity, filter_activity)
early_payments
activity
accounts[:customer_balance]
print-accounting loan
current_activity
print-accounting loan -b
whereami
print-accounting loan
whereami
exit!
edit update_early_payment_for_activity
diff
print-accounting loan
diff
loan.contractual_obligations.map { |ob| [ob, ob.early_payment_amount] if ob.early_payment_amount > 0 }
loan.contractual_obligations.map { |ob| [ob, ob.early_payment_amount] if ob.early_payment_amount > 0 }.flatten
loan.contractual_obligations.map { |ob| [ob, ob.early_payment_amount] if ob.early_payment_amount > 0 }.compact
print-accounting loan
loan.contractual_obligations.map { |ob| [ob, ob.early_payment_amount] if ob.early_payment_amount > 0 }.compact
print-accounting loan
exit!
diff
print-accounting loan
whereami
exit!
diff
print-accounting loan
exit!
diff
exit!
[default_calculator.default_amount_on(today), balance(:currently_due)].min
default_calculator
print-accounting 
current_activity
whereami
print-accounting loan
print-accounting loan -b
whereami
[default_calculator.default_amount_on(today), balance(:currently_due)].min
exit!
changed
print-accounting loan
print-accounting loan -b
whereami
[default_calculator.default_amount_on(today), balance(:currently_due)].min
accounts
activities
whereami
invalidate_default_calculator
default_calculator = default_calculator_as_of(today)
past_due_obligations = default_calculator.default_history && default_calculator.past_due_obligations
[default_calculator.default_amount_on(today), balance(:currently_due)].min
exit!
default_calculator = default_calculator_as_of(today)
[default_calculator.default_amount_on(today), balance(:currently_due)].min
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit!
payments_to_reconcile(current_activity)
print-accounting loan
whereami
current_activity
payments_to_reconcile(current_activity)
edit payments_to_reconcile
edit unreconciled_early_payments
payments_to_reconcile(current_activity)
early_payments
whereami
amount
amount_to_reconcile
early_payment
amount
early_payment
early_payments
whereami
early_payment
early_payments
whereami
early_payments
whereami
edit find_early_payments
exit!
unreconciled
early_payment
amount
print-accounting loan
amount
early_payments
print-accounting loan
whereami
early_payments
exit!
amount
reconcile
remaining
early_payment
print-accounting loan
whereami
reconciles
early_payment
remaining
reconcile
early_payments
exit!
amount
reconciles
early_payments
exit!
early_payments
exit!
early_payments
early_payment
early_payments
exit!
whereami
exit!
payments_to_reconcile(current_activity)
print-accounting loan
payments_to_reconcile(current_activity)
whereami
$pry = true
payments_to_reconcile(current_activity)
early_payments
print-accounting loan
early_payments
whereami
edit unreconciled_early_payments
payments_to_reconcile(current_activity)
early_payments
reconcile
early_payment
remaining
early_payments
early_payment
amount
with_amount_check([amount, remaining].min) {}
with_amount_check([amount, remaining].min) { puts 'hi' }
early_payments
amount
exit!
reconcile
early_payments
reconcile
early_payments
early_payment
amount
print-accounting loan
whereami
early_payment
reconciles
amount
early_payments
whereami
edit unreconciled_early_payments
payments_to_reconcile(current_activity)
$pry = true
payments_to_reconcile(current_activity)
early_payments
whereami
early_payment
early_payments
amount
early_payments
early_payment
amount
whereami
reconciles
early_payments
early_payment
amount
98.33 + 34.94
whereami
early_payment
amount
early_payments
whereami
early_payment
print-accounting loan
early_payments
print-accounting loan -b
early_payments
print-accounting loan
early_payments
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
whereami
payments_to_reconcile(current_activity)
current_activity
exit!
payments_to_reconcile(current_activity)
print-accounting loan
exit!
should_complete_loan
should_complete_loan?
print-accounting loan
complete_loan
print-accounting loan
whereami
edit complete_loan
print-accounting loan
complete_loan
accounts[:customer_balance].abs == (balance(:current) + loan.realized_interest - balance(:interest))
current_obligation(today)
reconcile_customer_balance_after_activity
print-accounting loan
reconcile_customer_balance
print-accounting loan
edit reconcile_customer_balance
reconcile_customer_balance
edit reconcile_customer_balance
reconcile_customer_balance
initial_amount
accounts
activities
exit!
edit complete_loan
complete_loan
activities
exit!
activities
accounts
print-accounting loan
print-accounting 
print-accounting loan
print-accounting loan -b
exit!
print-accounting
$pry
print-accoutnign
print-accounting
exit
exit!
print-accounting loan
whereami
print-accounting
print-accounting 
today
print-accounting 
print-accounting loan -b
print-accounting 
exit!
print-accounting loan
print-accounting loan -b
should_complete_loan?
payments_to_reconcile(current_activity)
edit payments_to_reconcile
$pry = true
payments_to_reconcile(current_activity)
early_payments
whereami
early_payment
early_payments
whereami
amount
print-accounting loan
exit!
print-accounting loan
whereami
should_reconcile_customer_balance?
print-accounting loan
print-accounting 
activities
whereami
print-accounting 
exit!
sum
print-accounting loan
whereami
amount_to_reconcile
sum
amount_to_reconcile
print-accounting loan
print-accounting 
exit!
sum
print-accounting loan
print-accounting
exit!
amount
reconcile_customer_balance(amount)
activities
edit reconcile_customer_balance
reconcile_customer_balance(amount)
initial_amount
exit!
sum
exit!
amount
print-accounting loan
whereami
amount_to_reconcile
sum
print-accounting loan
print-accounting 
print-accounting loan
print-accounting
exit!
sum
print-accounting 
whereami
print-accounting
whereami
sum
print-accounting
exit!
sum
whereami
print-accounting loan
sum
print-accounting 
print-accounting wheream
print-accounting whereami
print-accounting 
activities
whereami
print-accounting loan
print-accounting
print-accounting -b
print-accounting 
edit post_end_of_cycle
print-accounting loan
whereami
[default_calculator.default_amount_on(today), balance(:currently_due)].min
disable-pry
expect(second_obligation.early_payment_amount).to eq 2
print-accounting loan
whereami
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
loan.provisional?
loan.accountant.provisional?
loan.accountant.rules.provisional?
loan.interest_method
print-accounting loan -b
diff
whereami
balances
print-accounting loan 
diff
loan
print-accounting loan
exit!
print-accounting loan
forward first_obligation.target_date 
print-accounting loan
payoff_first_obligation
print-accounting lloan
print-accounting loan
payoff 10
print-accounting lona
print-accounting loan
whereami
create_new_installment obligation: 2, amount: 50, interest_due: 10, interest_to_accrue: 30
whereami
today
date
loan.accountant.default_calculator_as_of(date)
print-accounting
loan.accountant.default_calculator_as_of(date)
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(date)
loan.accountant.invalidate_default_calculator
cancel 3
print-accounting loan
loan.accountant.invalidate_default_calculator
loan.accountant.default_calculator_as_of(date)
loan.accountant.default_calculator_as_of(date).default_history
forward first_obligation.due_date + 1
print-accounting loan
exit
whereami
payoff_first_obligation
print-accounting loan
payoff 10
create_new_installment obligation: 2, amount: 50, interest_due: 10, interest_to_accrue: 30
forward(second_obligation.due_date + 1)
print-accounting loan
whereami
print-accounting loan
whereami
exit!
print-accounting loan
payoff_first_obligation
print-accounting loan
whereami
create_new_installment obligation: 2, amount: 50, interest_due: 10, interest_to_accrue: 30
accounts
print-accounting 
payoff 20
print-accounting loan
exit!
payoff_first_obligation
create_new_installment obligation: 2, amount: 50, interest_due: 10, interest_to_accrue: 30
payoff 10
print-accounting loan
exit!
payoff_first_obligation
payoff 20
create_new_installment obligation: 2, amount: 50, interest_due: 10, interest_to_accrue: 30
print-accounting loan
forward second_obligation.due_date + 1
print-accounting loa
print-accounting 
exit!
print-accounting loan
l.rules.provisional?
loan.accoutant.rules.provisional?
loan.accountant.rules.provisional?
print-accounting loan
payoff 60
print-accounting loan
cancel 3
print-accounting loan
accountant.obligations
loan.contractual_obligations
forward date + 1
print-accounting loan
exit!
e
wtf
e.message
e.backtrace
edit kernel/common/type.rb:152
edit kernel/common/type.rb
edit coerce_to_failed
edit /Users/cmwesigwa/.rbenv/versions/rbx-2.5.3/gems/gems/ast-2.0.0/lib/ast/node.rb
e
exit!
e
caller
e.backtrace
edit /Users/cmwesigwa/.rbenv/versions/rbx-2.5.3/gems/gems/ast-2.0.0/lib/ast/node.rb
exit!
e
children
nil.to_a
@type, @children = type.to_sym, children.to_a.freeze
assign_properties(properties)
@hash = [@type, @children, self.class].hash
e
freeze
e.backtrace
e.methods
e.locations
whereami
children
children.to_a.freeze
children
edit initialize
edit /Users/cmwesigwa/.rbenv/versions/rbx-2.5.3/gems/gems/ast-2.0.0/lib/ast/node.rb
exit!
e
assign_properties(properties)
[@type, @children, self.class].hash
type
children
properties
edit /Users/cmwesigwa/.rbenv/versions/rbx-2.5.3/gems/gems/ast-2.0.0/lib/ast/node.rb
exit!
edit /Users/cmwesigwa/.rbenv/versions/rbx-2.5.3/gems/gems/ast-2.0.0/lib/ast/node.rb
platform
whereami
Rake
Rake.methods
ENV
ruby
whereami
version
whereami
exit!
enabled?
exit!
enabled?
exit!
enabled?
exit!
enabled?
exit!
print-accounting
simulator
print-accounting simulator
print-accounting
print-accounting simulator
print-accounting
print-accounting simulator
whereami
ls
print-accounting simulator
print-accounting
print-accounting simulator
exit!
.clear
rpng = Random.new
rpng.rand(1000)
rpng.rand(3)
randoms = []
10000.times { randoms << rpng.rand(3) }
randoms
randoms.group_by { |a| a }
randoms.group_by { |a| a }.map { |a| a[0], a.size }
randoms.group_by { |a| a }.map { |a| [a[0], a.size] } }
randoms.group_by { |a| a }.size
randoms.group_by{ |a| a }.map { |a| A }
randoms.group_by{ |a| a }.map { |a| a }
randoms.group_by{ |a| a }.count
randoms.group_by{ |a| a }.map { |a| a }
randoms.group_by{ |a| a }.map { |a| [a[0], a.size] }
randoms.group_by{ |a| a }.map { |a| a.size ] }
randoms.group_by{ |a| a }.map { |a| a.size  }
randoms.group_by{ |a| a }.map { |a| a.flatten.size  }
randoms.group_by{ |a| a }.map { |a| [a[0], a.flatten.size]  }
randoms = []
10000.times { randoms << rpng.rand(3) }
randoms.group_by{ |a| a }.map { |a| [a[0], a.flatten.size]  }
randoms = []
10000.times { randoms << rpng.rand(2) }
randoms.group_by{ |a| a }.map { |a| [a[0], a.flatten.size]  }
sql
staging_table
exit!
sql
diff
sql
sanitize_sql(sql, *args)
args
exit!
sql
outer_sql
"#{sql} #{outer_sql}"
sql
exit!
outer_sql
"#{sql} #{outer_sql}"
sql
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy (#{sql}) to stdout with csv header\"`
sql
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy (#{sql}) to stdout with csv header\"`
sql
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy ("DROP TABLE IF EXISTS account_totals;") to stdout with csv header\"`
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy ("DROP TABLE IF EXISTS account_totals;\nSELECT lt.loan_id, pt.debit_account_cd account, pt.amount INTO temp account_totals FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END) UNION ALL SELECT lt.loan_id, pt.credit_account_cd account, -pt.amount FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END);") to stdout with csv header\"`
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy ("drop table if exists account_totals;\nSELECT lt.loan_id, pt.debit_account_cd account, pt.amount INTO temp account_totals FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END) UNION ALL SELECT lt.loan_id, pt.credit_account_cd account, -pt.amount FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END);") to stdout with csv header\"`
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"\\copy ("\drop table if exists account_totals;\nSELECT lt.loan_id, pt.debit_account_cd account, pt.amount INTO temp account_totals FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END) UNION ALL SELECT lt.loan_id, pt.credit_account_cd account, -pt.amount FROM loan_tasks_committed lt JOIN payment_transactions_committed pt on pt.loan_task_committed_id = lt.id JOIN loans l on pt.loan_id = l.id WHERE lt.loan_id IN ('2519823') AND (CASE WHEN '2012-07-24'::date IS NOT NULL THEN pt.eff_date < '2012-07-24'::date OR (pt.eff_date = '2012-07-24'::date AND lt.id <= '416652') ELSE pt.eff_date <= current_date END);") to stdout with csv header\"`
whereami
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"#{sql}\"`
CSV.parse(input, headers: :true, header_converters: :symbol).map(&:to_hash)
exit!
input = `psql #{db_name} -U loaner -h #{db_hostname} -c \"#{sql}\"`
CSV.parse(input, headers: :true, header_converters: :symbol).map(&:to_hash)
caller
with_copy
sql
args
level
exit!
caller
exit!
level
outer_sql
Loaner::Reporting.loan_exporter[query_name][product][level]
Loaner::Reporting.loan_exporter[query_name][product]
Loaner::Reporting.loan_exporter[query_name][product]['default']
outer_sql = Loaner::Reporting.loan_exporter[query_name][product][level]
outer_sql ||= Loaner::Reporting.loan_exporter[query_name][product]['default']
caller
exit!
cluster
options
query = Sql.load_export_balances_query('export_balances', product, cluster, options[:level],loan_id, date, date, date, task_id, loan_id, date,date, date, task_id)
args
cluster
exit!
level
cluster
Loaner::Reporting.loan_exporter[query_name][product]
Loaner::Reporting.loan_exporter[query_name][product][level]
exit!
level
outer_sql = Loaner::Reporting.loan_exporter[query_name][product][level]
outer_sql = Loaner::Reporting.loan_exporter[query_name][product]
outer_sql
outer_sql ||= Loaner::Reporting.loan_exporter[query_name][product]['default']
sql
level
caller
sql
Loaner::Reporting.loan_exporter[query_name][product]['default']
query_name
product
Loaner::Reporting.loan_exporter[query_name][product]
Loaner::Reporting.loan_exporter[query_name]
Loaner::Reporting.loan_exporter
caller
whereami
exit!
sql
query_name
Loaner::Reporting.balances
Loaner::Reporting.balances[query_name][product][level]
Loaner::Reporting.balances[query_name][product]
exit!
outer_sql
level
Loaner::Reporting.loan_exporter[query_name][product]
query_name
level
args
exit!
level
outer_sql
sql
caller
diff
exit!
sql
run_query(sql)
sql
sql ||= Loaner::Reporting.balances[query_name][product]['default']
run_query(sql)
diff
print-accounting loan
print-accounting loan -b
diff
whereami
diff
balances
diff
balances
diff
exit!
diff
498.25 - 451.58
print-accounting loan
diff
736.42 - 681.65
sql
staging_table
product
query_name
product
level
caller
exit!
sql
staging_table
query_name
product
exit!
product
cluster
product
loan_ids
caller
exit!
cluster
product
options
loan_ids
exit!
cluster
product
loan_ids
options
caller
exit!
tasks
whereami
loan
accountant
accountant.loan
accountant.loan.product
exit!
product
sql
balances
exit!
diff
print-accounting 
print-accounting loan
diff
print-accounting loan
diff
print-accounting
print-accounting loan
diff
458.01 - 505.87
diff
389.31 - 437.17
diff.values.each do |k, v| puts v end
diff.values
diff.values.each do |k, v| puts v[:cnuapp] end
diff.values.each { |k, v| puts v[:cnuapp] }
diff.values.each { |k, v| puts k[:cnuapp] }
diff.values
diff.values.each { |(k, v)| puts k[:cnuapp] }
diff.values.each { |(k, v)| puts k] }
diff.values.each { |(k, v)| puts k }
diff.values.each { |hash| puts hash }
diff.each { |loan, hash| puts hash }
diff.each { |_,hash| hash.each_with_object({}) { |(account, inner_hash), results| results[account] = inner_hash[:cnuapp] - inner_hash[:loaner] }  }
diff.each { |_,hash| hash.each_with_object({}) { |(account, inner_hash), results| results[account] = BigDecimal(inner_hash[:cnuapp]) - BigDecimal(inner_hash[:loaner]) }  }
diff.map { |_,hash| hash.each_with_object({}) { |(account, inner_hash), results| results[account] = BigDecimal(inner_hash[:cnuapp]) - BigDecimal(inner_hash[:loaner]) }  }
exit!
diff
current_diff_totals
@previous_diff
diff
exit!
current_diff_totals
@previous_diff
print-accounting loan
whereami
current_diff_totals
print-accounting loan
diff
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
diff
accountant.accounts
current_diff_totals
print-accounting loan
current_diff_totals
diff
current_diff_totals
exit!
diff
current_diff_totals
print-accounting loan
current_diff_totals
whereami
diff
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
print-accounting loan =b
print-accounting loan -b
whereami
exit!
current_diff_totals
print-accounting loan
diff
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting loan
current_diff_totals
print-accounting 
print-accounting loan
diff
current_diff_totals
options
print-accounting loan
exit!
print-accounting
def validate_task
end
edit validate_task
print-accounting loan
diff
print-accounting loan
exit!
currently_paid
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
exit!
amount
obligatoin
obligation
amount == FinanceXL::ZERO || obligation.nil?
amount > FinanceXL::ZERO
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
contractual_obligations
loan.contractual_obligations
today
@default_calculator_as_of
@default_calculator
print-accounting loan
whereami
exit!
@default_calculator
past_unpaid_obligations(filter_activity.effective_date)
past_unpaid_obligations(filter_activity.effective_date).first
past_unpaid_obligations(filter_activity.effective_date).first.obligation
current_obligation(past_unpaid_obligations(filter_activity.effective_date).first)
current_obligation(past_unpaid_obligations(filter_activity.effective_date).first.target_date)
exit!
amount
obligatoin
obligation
print-accounting
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting 
whereami
diff
current_diff_totals
print-accounting
print-accounting loan
diff
print-accounting loan
amount
print-accounting 
whereami
obligation
amount
print-accounting loan
diff
amount
print-accounting 
amount
print-accounting loan
whereami
edit update_early_payment_for_activity
diff
print-accounting loan
diff
amount
obligation
print-accounting
whereami
obligation
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit!
obligation
print-accounting 
whereami
obligation
print-accounting 
whereami
obligation
obligation.target_date < current_obligation(filter_activity.effective_date).start_date
diff
print-accounting loan
exit!
whereami
default_calculator
print-accounting loan
whereami
default_calculator
contractual_obligations
contractual_obligation
loan.contractual_obligations
exit!
amount
obligation
print-accounting
diff
obligation.target_date < current_obligation(filter_activity.effective_date).start_date
amount
obligation
edit calculate_early_payment
calculate_early_payment(activity, filter_activity)
obligation
apply_early_payment_to_previous_obligation?(filter_activity, early_payment, obligation)
obligation = previous_obligation(obligation.start_date)
before_end_of_cycle?(date: activity.effective_date, payment_activity: activity)
exit!
edit calculate_early_payment
obligation
print-accounting loan
activities
current_activity
wherami
whereami
@default_calculator
print-accounting loan
whereami
amount
obligation
print-accounting loan
whereami
edit calculate_early_payment
result
calculate_early_payment(activity, filter_activity)
obligation
before_end_of_cycle?(date: filter_activity.effective_date, payment_activity: filter_activity)
obligation
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
exit!
amount
past_unpaid_obligations(today, extra_payments: currently_paid)
@default_calculator
exit!
unpaid_obligation
print-accounting loan
wherami
whereami
obligation.target_date < obligation.start_date
obligation.target_date
exit!
unpaid_obligation
unpaid_obligation.target_date < obligation.start_date
obligation
print-accounting loan
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
unpaid_obligation
exit! 
amount
early_payment_amount
unpaid_obligation
whereami
print-accounting
activity
whereami
extra_payments
currently_paid = activity.activity_amount - early_payment_amount
@default_calculator
exit!
exit!
amount
payment = loan.payment(activity.id)
payment = loan.payment(activity)
payment.updates_obligation = obligation
payment.save!
payment
contractual_payments
loan.contractual_payments
exit!
unpaid_obligation
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting
exit!
print-accounting
caller
whereami
activity
diff
print-accounting 
print-accounting loan
diff
e
wtf!
activity
print-accounting 
whereami
amount
whereami
wherami
whereami
current_activity.entries
activity
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
diff
print-accounting loan
whereami
exit!
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
exit!
obligation
print-accounting loan
whereami
options[:cancelling]
past_unpaid_obligations(today, extra_payments: currently_paid)
exit!
exit
exit!
exit!exit!
print-accounting loan
contractual_obligations
loan.contractual_obligations
whereami
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
exit!
amount
obligation
amount
obligation
obligation_where_to_apply_early_payment(amount, activity, early_payment, options)
activity
early_payment
print-accounting
amount
obligation
activity
print-accounting l
print-accounting 
options
whereami
amount
activity
print-accounting
options
whereami
obligation
print-accounting loan
activity
options
amount
options
amount
activity
print-accounting
amount
activity
early_payment
filter_activity
payments_to_reconcile(filter_activity).map { |payment, _| payment }
amount
obligation
amount
obligation
print-accounting loan
current_activity
current_activity.entries
obligation
current_obligation(today)
whereami
edit obligation_where_to_apply_early_paymen
edit obligation_where_to_apply_early_payment
obligation_where_to_apply_early_payment(amount, activity, early_payment, options)
unpaid_obligation
extra_payments
currently_paid = activity.activity_amount - amount
amount
print-accounting loan
wherami
edit obligation_where_to_apply_early_payment
amount
default_calculator.default_amount_on(today)
print-accounting loan
amount
print-accounting loan
wherami
whereami
amount
print-accounting
obligation
print-accounting loan
wherami
whereami
obligation
print-accounting loan
print-accounting loan -b
wherami
whereami
loan.contractual_obligations
disable-pry
print-accounting loan
loan
whereami
unpaid_obligation
whereami
print-accounting loan
exit!
amount
total_payoff_amount
currently_paid
exit!
currently_paid
print-accounting
current_activity
current_activity.entries
98.84 + 50
whereami
currently_paid
:q
exit!
currently_paid
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting
adjusting
print-accounting
adjusting
print-accounting
adjusting
diff
print-accounting loan
diff
whereami
balances
diff
109.78 + 15 + 46.37
712.23 + 171.15
print-accounting loan
loan
print-accounting loan -a end_of_cycle
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
whereami
currently_paid
amount
current_activity.entries
exit!
current_activity
exit
amount
paid
currently_paid
past_unpaid_obligations(today, extra_payments: currently_paid)
print-accounting loan
whereami
loan.contractual_obligations.map(&:discounted_interest_rate)
loan.rules
exit!
print-accounting loan
exit
extra_customer_balance
with_amount_check([extra_customer_balance, FinanceXL::ZERO].min.abs) {}
balance
accounts[:principal]
exit!
print-accounting loan
exit!
extra_customer_balance
accounts
balance
[extra_customer_balance, FinanceXL::ZERO].min.abs
with_amount_check([extra_customer_balance, FinanceXL::ZERO].min.abs) {}
new_balance = balance - with_amount_check([extra_customer_balance, FinanceXL::ZERO].min.abs) {}
new_balance = Flt::DecNum(new_balance.to_s)
interest = interest_rate.daily.multiply(balance).floor(places: 2)
interest = interest_rate.daily.multiply(new_balance).floor(places: 2)
balance = Flt::DecNum(balance.to_s)
interest = interest_rate.daily.multiply(balance).floor(places: 2)
print-accounting loan
.clear
sql
diff
print-accounting loan
loan
exit!
diff
print-accounting loan
diff
print-accounting loan
loan
diff
whereami
print-accounting loan
expect(first_obligation.early_payment_amount).to eq 50
early_reconcile = reconcile amount: 50
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 50
expect(first_obligation.early_payment_amount).to eq 50
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 102
print-accounting loan
print-accounting loan -b
exit!
accounts
print-accounting
whereami
first_obligation
second_obligation
print-accounting loan
whereami
print-accounting loan
whereami
print-accounting loan
whereami
expect(second_obligation.early_payment_amount).to eq 0
expect(accountant.calculate_early_payment(cancellation_activity, cancellation_activity.cancels_activity)[:amount]).to eq 0
print-accounting loan
whereami
expect(accountant.calculate_early_payment(cancellation_activity, cancellation_activity.cancels_activity, {})[:amount]).to eq 0
payment
print-accounting loan
exit!
payment
exit!
payment
cancellation_activity
cancellation
print-accounting loan
print-accounting 
whereami
cancellation
second_obligation.target_date + 1
accountant.activities'
accountant.activities
;
'
accountant.activities
loan.reload
find_activity(cancellation)
accountant
loan.accountant = nil
loan.accountant 
accounts
print-accounting loan
whereami
payment
payoff_activity
cancellation_activity
print-accounting loan
whereami
calculate_early_payment(cancellation_activity, cancellation_activity.cancels_activity, {})
accountant.calculate_early_payment(cancellation_activity, cancellation_activity.cancels_activity, {})
whereami
print-acccounting loan
print-accounting loan
whereami
result = accountant.calculate_early_payment(reconcile_activity, reconcile_activity, {})
edit accountant.calculate_early_payment
print-accounting loan
whereami
expect(result[:obligation]).to eq payment.updates_obligation
result[:obligation]
result
whereami
expect(result[:obligation]).to eq payment.updates_obligation
cancellation = cancel partial_early_payment, second_obligation.target_date + 1
cancellation_activity = find_activity(cancellation)
result = accountant.calculate_early_payment(cancellation_activity, cancellation_activity.cancels_activity, {})
whereami
print-accounting loan
whereami
diff
-911.94 + 1341.30
loan
print-accounting 
print-accounting loan
whereami
balances
print-accounting loan
diff
print-accounting loan
loan.realized_interest
print-accounting loan
print-accounting loan -a end_of_cycle
print-accounting loan
loan
diff
print-accounting lona
print-accounting loan
loan
print-accounting loan
DROP TABLE IF EXISTS temp_loan_interest_calculations;\nSELECT l.cnuapp_loan_id AS loan_id, a.activity_id, (CASE WHEN m.memo = 'adjust_interest' THEN e.amount ELSE 0 END) AS adjust_interest, (CASE WHEN m.memo = 'oec_interest_due' THEN e.amount ELSE 0 END) AS actual_interest INTO TEMP temp_loan_interest_calculations FROM loans l RIGHT JOIN products p ON (p.product_id = l.product_id AND p.product = 'oec') JOIN accounting.activities a ON l.loan_id = a.source_id RIGHT JOIN accounting.activity_types at ON (at.activity_type_id = a.activity_type_id AND at.activity_type = 'end_of_cycle') JOIN accounting.entries e USING (activity_id) RIGHT JOIN memos m ON (m.memo_id = e.memo_id AND m.memo IN ('adjust_interest', 'oec_interest_due')) GROUP BY loan_id, at.activity_type, m.memo, e.amount, a.activity_id ORDER BY loan_id, a.activity_id;\nDROP TABLE IF EXISTS temp_interest_amounts;\nSELECT loan_id, activity_id, SUM(actual_interest) AS actual_interest, SUM(adjust_interest) AS adjust_interest, ROW_NUMBER() OVER (PARTITION BY loan_id ORDER BY activity_id) AS eoc_ordinal_counter INTO TEMP temp_interest_amounts FROM ( SELECT loan_id, activity_id, adjust_interest, actual_interest FROM temp_loan_interest_calculations GROUP BY loan_id, activity_id, actual_interest, adjust_interest ) q GROUP BY loan_id, activity_id ORDER BY loan_id, activity_id;\nDROP TABLE IF EXISTS temp_percentage_difference;\nSELECT loan_id, activity_id, ROUND((adjust_interest * 100 / actual_interest), 3) AS percentage_difference, eoc_ordinal_counter INTO TEMP temp_percentage_difference FROM temp_interest_amounts WHERE actual_interest > 0 ORDER BY loan_id, activity_id, eoc_ordinal_counter;\nSELECT loan_id, STRING_AGG(activity_id::VARCHAR, ',') AS activities, STRING_AGG(eoc_ordinal_counter::VARCHAR, ',') AS eoc_ordinal_counter FROM temp_percentage_difference WHERE percentage_difference > 1.0 GROUP BY loan_id ORDER BY loan_id;
print-accounting 
exit!
print-accounting loan
loan.accountant.rules
loan.accountant.provisional?
loan.accountant.rules.provisional?
exit!
print-accounting loan
exit!
print-accounting loan
Date.parse('2015-05-31') - 18.months
optoins
options
Loaner::Config.payment_methods[task_name]
FinanceXL::EntryType.lookup
FinanceXL::EntryType.lookup_by
FinanceXL::EntryType.lookup
LookupBy.reload
diff
print-accounting loan
diff
Date.parse('2015-05-01')
Date.parse('2015-05-21')
Date.parse('2015-05-31')
Date.parse('2015-05-31') - 18.months
764.07 - 720.90
loan
diff
print-accounting loan
exit!
print-accounting loan
whereami
caller
exit!
print-accounting loan
amount
exit!
print-accounting loan
print-accounting
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
whereami
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
print-accounting loan -b
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
diff
print-accounting loan
exit!
accounts
print-accounting loan
print-accounting loan -b
print-accounting loan 
exit!
print-accounting loan
exit!
simulator
print-accounting loan
print-accounting 
print-accounting simulator
wherami
whereami
print-accounting simulator
print-accounting 
print-accounting simulator
print-accounting 
simulator_scheduel
simulator_schedule
edit simulator_schedule
whereami
simulator_schedule
FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true))
@remove_activities
edit @simulator_schedule.remove_activity(act)
edit @simulator_schedule.remove_activity
schedule = FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true)).tap do |schedule|
schedule = FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true))
@remove_activities.each { schedule.remove_activity(act) }
@remove_activities.each { |act| schedule.remove_activity(act) }
activity
scheduled_activity
scheduled_activity == activity
type == activity.activity_type
amount == activity.activity_amount
effective_date == activity.effective_date
payment_id
exit!
diff
print-accounting simulator
diff
edit simulate
print-accounting loan
loan
whereami
print-accounting lona
print-accounting loan
dif
diff
changes
print-accounting loan
exit!
activity
print-accounting
print-accounting loan
ls
activity
scheduled_activity
exit!
$pry = true
@remove_activities
scheduled_activity
schedule
@simulator_schedule
print-accounting loan
print-accounting 
start_date
@remove_activities.each { schedule.remove_activity(act) }
schedule = FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true))
@remove_activities.each { schedule.remove_activity(act) }
@remove_activities.each { |act| schedule.remove_activity(act) }
schedule
schedule = FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true))
@remove_activities.each { |act| schedule.remove_activity(act) }
schedule
whereami
print-accounting loan
print-accounting 
$pry = true
schedule = FinanceXL::Schedule.new(accountant.schedule.between(start_date, end_date, true))
print-accounting loan
.clear
whereami
loan
FactoryGirl.create(:servicing_agreement)
FactoryGirl.create(:servicing_agreement, seasoning_period: 20)
FactoryGirl.build(:servicing_agreement, seasoning_period: 20)
exit!
print-accounting loan
Loan.joins(:servicing_agreement).
where('disbursement_date = ? - servicing_agreements.seasoning_period', today).
where(is_purchased: false)
end
edit
today = Brand[brand].time_zone.today
Loan.joins(:servicing_agreement).where('disbursement_date = ? - servicing_agreements.seasoning_period', today).where(is_purchased: false)
Loan.joins(:servicing_agreement).where('disbursement_date = ? - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where('disbursement_date = ?::date - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where('disbursement_date = ?::DATE - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where('disbursement_date = ?.to_date - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where('disbursement_date = ? - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
wtf?
wtf?!?
Loan.joins(:servicing_agreement).where('disbursement_date = ?::date - servicing_agreements.seasoning_period', today).where(is_purchased: false).to_a
wtf?!?
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today).where(is_purchased: false).to_a
today
today.to_date
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_date).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_s).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period = ?", today.to_s).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period = ?::date", today.to_s).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period > ?::date", today.to_s).where(is_purchased: false).to_a
edit /Users/cmwesigwa/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activerecord-4.2.2/lib/active_record/connection_adapters/postgresql_adapter.rb
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period > ?::date", today.to_s).where(is_purchased: false).to_a
edit /Users/cmwesigwa/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activerecord-4.2.2/lib/active_record/connection_adapters/postgresql_adapter.rb
whereami
$pry = true
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period > ?::date", today.to_s).where(is_purchased: false).to_a
today = Brand[brand].time_zone.today
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period > ?::date", today.to_s).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement)
loan
loan.disbursement_date + loan.servicing_agreement.seasoning_period
today
loan.disbursement_date
loan.servicing_agreement.seasoning_period
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_s).where(is_purchased: false).to_a
exit!
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_s).where(is_purchased: false).to_a
today = Brand[brand].time_zone.today
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_s).where(is_purchased: false).to_a
print-accounting loan
whereami
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today.to_s).where(is_purchased: false).to_a
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today.to_s).where(is_purchased: false).to_a
exit!
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today.to_s).where(is_purchased: false).to_a
today = Brand[brand].time_zone.today
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today.to_s).where(is_purchased: false).to_a
exit!
scope
scope = ServicedLoanPurchaseWorker.scope
edit ServicedLoanPurchaseWorker.scope
exit!
print-accounting lona
print-accounting loan
loan.payments
whereami
loan.service_agreement
loan
loan.servicing_agreement
today
Date.today
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today).where(is_purchased: false)
today = Brand[brand].time_zone.today
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today).where(is_purchased: false)
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today - 1).where(is_purchased: false)
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today - 2).where(is_purchased: false)
today
Loan.joins(:servicing_agreement)
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today).where(is_purchased: false)
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today).where(is_purchased: false)
today
today.to_s
exit1
exit!
today
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period - 1", today).where(is_purchased: false)
Loan.joins(:servicing_agreement).where("disbursement_date = ?::date - servicing_agreements.seasoning_period", today).where(is_purchased: false)
today
Loan.all
loan.servicing_agreement
loan = Loan.first
loan.servicing_agreement
loan.disbursement_date + loan.servicing_agreement.seasoning_period
loan.disbursement_date + loan.servicing_agreement.seasoning_period - 1
loan.disbursement_date == today -loan.servicing_agreement.seasoning_period - 1
loan.disbursement_date == today - loan.servicing_agreement.seasoning_period - 1
loan.disbursement_date == today - loan.servicing_agreement.seasoning_period
today - loan.servicing_agreement.seasoning_period
loan.disbursement_date == today - loan.servicing_agreement.seasoning_period + 1
exit!
print-accounting loan
loan.payments
exit!
loan.balances_on(date + 1)
print-accounting loan
date
print-accounting loan
exit!
payment = LoanPurchasePaymentCreator.new(loan, date, '4500.00').build
print-accounting loan
loan.payments
exit!
loan.payments
print-accounting lona
print-accounting loan
date
exit!
payment
loan
print-accounting lona
print-accounting loan
loan
loan.amount
loan.disbursement_amount
loan.disbursement_amount * loan.servicing_agreement.premium_expense_bsd
loan.servicing_agreement.premium_expense_bsd
loan.servicing_agreement.premium_bps
loan.disbursement_amount * loan.servicing_agreement.premium_bsd
loan.disbursement_amount * loan.servicing_agreement.premium_bps
loan.disbursement_amount * loan.servicing_agreement.marketing_fee_bps
exit!
loan.purchase_from_lender_amount(date)
edit loan.purchase_from_lender_amount
loan.purchase_from_lender_amount(date)
loan.premium_expense
loan.premium_expense + loan.marketing_fee + loan.balances_on(date)[:owed_to_lender]
date
loan.premium_expense + loan.marketing_fee + loan.balances_on(date + 1)[:owed_to_lender]
loan
print-accounting loan
loan.balances
loan.balances_on(date)
exit!
amount = loan.purchase_from_lender_amount(date)
print-accounting loan
loan.accounting { |a| a.balances }
date
loan.accounting { |a| a.accounts }
amount = loan.purchase_from_lender_amount(date)
loan.save!
amount = loan.purchase_from_lender_amount(date)
print-accounting loan
Payment.transaction {}
Payment.transaction { Payment.build }
Payment.transaction { Payment.new }
Payment.transaction { Payment.new.save }
loan
disable-pry
print-accounting loan
exit!
payment
payment.payment_purpose
exit!
print-accounting loan
exit!
payment
payment.payment_purpose
exit!
payment
payment.payment_purpos
payment.payment_purpose
exit!
payment_purpose
ls
self
ls
edit payment_purpose
ls
payment_purpose
self.payment_purpose
@payment_purpose = payment_purpose
ls payment_purpose
edit payment_purpose
ls
exit!
payment
payment.payment_purpose
exit!
payment
payment.payment_purpose
exit!
$pry = true
servicing_fee_payment = PaymentFromLenderCreator.new(loan: loan, effective_date: date + 1,amount: servicing_fee_amount,
  268:                                                          payment_purpose: PaymentPurpose[:c
    servicing_fee_payment = PaymentFromLenderCreator.new(loan: loan, effective_date: date + 1,amount: servicing_fee_amount, amount: servicing_fee_amount, payment_purpose: PaymentPurpose[:collections])
servicing_fee_payment = PaymentFromLenderCreator.new(loan: loan, effective_date: date + 1,amount: servicing_fee_amount, amount: servicing_fee_amount, payment_purpose: PaymentPurpose[:collections])
whereami
$pry
PaymentFromLenderCreator.new(loan: loan, effective_date: date + 1,amount: servicing_fee_amount, amount: servicing_fee_amount, payment_purpose: PaymentPurpose[:collections])
whereami
edit PaymentFromLenderCreator.new
edit PaymentFromLenderCreator
PaymentFromLenderCreator.new(loan: loan, effective_date: date + 1,amount: servicing_fee_amount, amount: servicing_fee_amount, payment_purpose: PaymentPurpose[:collections])
exit!
payment_purpose
ls
outgoing
outgoing()
payment_purpose()
exit!
payment_purpose
outgoing
ls
payment_purpose
payment_purpose()
whereami
ls
payment_method
payment_purpose
exit!
PaymentPurpose[:collections]
PaymentPurpose.all
PaymentPurpose[:collection]
exit!
payment
print-accounting loan
Payment.first
payment.payment_purpose
payment
exit!
else
exit!
payment
payment.payment_purpose
exit!
PaymentPurpose.all.map(&:payment_purpose)
PaymentPurpose.lookup.map(&:payment_purpose)
PaymentPurpose.lookup.all
PaymentPurpose.lookup
PaymentPurpose.lookup.each {}
PaymentPurpose.lookup.methods
PaymentPurpose.all.map(&:payment_purpose)
Payment.first
amount
initial_settlement_amount
loan.initial_settlement_amount
loan
whreami
whereami
loan.initial_settlement_amount
loan.payments
loan.scheduled_payments
LoanFundingPaymentCreator.create!(loan, effective_date).nil?
loan
effective_date
print-accounting loan
edit LoanFundingPaymentCreator.create
edit LoanFundingPaymentCreator.create!
edit LoanFundingPaymentCreator
whereami
loan
whereami
amount
edit loan.initial_settlement_amount
loancso_installment_type?
loan.cso_installment_type?
loan.region
loan.loan_agreement
edit loan.loan_agreement.cso_finance_charge
disbursement_amount
raw_product.cso_installment_type?
raw_product
loan
exit!
loan
loan.product
loan.loan_agreement
loan.loan_agreement.raw_product
loan.loan_agreement.product
exit!
raw_product
amount
Payment.new
Payment.new.payment_status
loan
loan.today
loan
exit!
loan
amount
loan
disable-pry
scope
ServicedLoanPurchaseWorker.perform(loan.id)
edit ServicedLoanPurchaseWorker.perform(loan.id)
edit ServicedLoanPurchaseWorker.perform
exit!
scope
ServicedLoanPurchaseWorker.perform(loan.id)
exit!
caller
accountant
accounting {}
accounting
accounting {}
expect_any_instance_of(FinanceXL::Accountant).to receive(:daily).with(loan.time_zone.today)
loan.perform_daily_accounting!
edit loan.perform_daily_accounting!
whereami
caller
print-accounting loan
loan.loan_status
print-accounting loan
loan
loan.perform_daily_accounting!
IssueLoan.call(loan)
IssueLoan.call(loan: loan)
IssueLoan.call(loan, loan.today)
loan.mark_funding_success!
print-accounting loan
AccountForFunding.call(loan)
AccountForLoanFunding.call(loan)
loan.funding_payment
AccountForLoanFunding.call(loan, loan.funding_payment, loan.today)
print-accounting loan
print-accounting lona
print-accounting loan
exit!
balances
@balances
dif
diff
print-accounting loan
diff
print-accounting loan
57.56 * .03
57.56 * 0.03
loan
diff
print-accounting loan
print-accounting loa
print-accounting loan
loan
print-accounting loan
print-accounting loan -b
print-accounting loan
diff
loan
print-accounting loan
print-accounting loan -b
loan.interest_method
print-accounting loan
dif
diff
print-accounting loan
diff
print-accounting loan
loa
loan
exit!
diff
print-accounting loan
diff
print-accounting loan
print-accounting loa
print-accounting loan
loan
print-accounting loan
self
whereami
exit!
self.valid?
self
whereami
exit!
attributes
default_options
whereami
default_options.merge!(attributes)
default_options
whereami
default_options
attributes = default_options.merge(attributes)
attributes
exit!
self
whereami
exit!
self
exit!
attributes
default_options
attributes = default_options.merge(attributes)
super(attributes)
self
self.super(attributes)
attributes
self
self.is_outgoing?
self.is_outgoing
self.is_outgoing.blank?
self.is_outgoing.present?
exit!
edit initialize
disable-pry
exit!
print-accounting lona
print-accounting loan
loan.scheduled_payments
exit!
print-accounting loan
loan.payments
Payment.find(543).payment_purpose
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
4358.61 * 0.05
4358.61 * 0.15
4358.61 * 0.015
loan.accounting {}
loan.accounting(&:itself)
loan.accounting(&:itself).accounts
loan.accounting(&:itself).accounts(:financial)
exit!
print-accounting loan
0.015 * 4358.61
4358.61 + 29.19 + 225 + 65.38
4358.61 + 225 
4358.61 + 225 + 29.19
4358.61 + 29.19
print-accounting loan -b
4366.95 + 65.38 + 225
4358.61 + 29.19
loan.premium_expense(loan.today)
exit!
premium_expense(date)
owed_to_lender + premium_expense(date) + marketing_fee
owed_to_lender
4358.61 + 29.19
date
balances_on(date, ledger: :financial)
accounts_on(date, ledger: :financial)
print-accounting loan
print-accounting 
exit!
owed_to_lender
print-accounting 
print-accounting loan
4358.61 + 29.19
4358.61 + 29.19 + 225 
4358.61 + 29.19 + 225 + 65.83
4358.61 + 29.19 + 225 + 65.38
print-accounting 
print-accounting loan -b
56.03 + 29.19
print-accounting loan
exit!
print-accounting lona
print-accounting loan
print-accounting lona
print-accounting loan
print-accounting loanassert_ledger :financial, accounts: {
assert_ledger :financial, accounts: { deferred_premium:            '65.38' } 
accounts(:financial)
loan.accounting(&:itself).accounts(:financial)
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
amount
exit!
today
today.to_s
adjusting
today
exit!
today
exit!
today
adjusting
today
exit!
adjusting
exit!
book
ls
@book
adjusting
@accountant
@book
ls
@book
exit!
@date
print-accountign
print-accounting
print-accounting @accountant
print-accounting @accountant.loan
print-accounting @accountant
print-accounting @accountant.loan
print-accounting @accountant
print-accounting @accountant.loan
print-accounting @accountant
wherami
whereami
@date
print-accounting simulator
wherami
whereami
book
book.name
whereami
@date
@accountant.adjusting
caller
wherami
whereami
@atime
@time
guard
context.instance_exec(&guard)
!context.instance_exec(&guard)
@date
book.name
@date
print-accounting simulator
wherami
whereami
book
book.name
@date
!context.instance_exec(&guard)
book.name
print-accounting simulator
@date
wherami
whereami
default_amount(today)
book.name
default_amount(@date)
@accountant.default_amount(@date)
@date
book.name
@date.to_s
exit!
@date
exit!
book
book.name
whereami
@accountant.adjusting
book.name
block
exit!
edit default_amount
exit!
print-accounting loan
exit!
amount
today
amount
print-accounting loan
print-accounting
wherami
whereami
amount
today
whereami
print-accounting
print-accounting loan
print-accounting
print-accounting loan
exit!
print-accounting simulator
print-accounting lona
print-accounting loan
print-accounting loan -b
loan
payment.payment_purpose
caller
payment.payment_purpose
caller
agreement = ServicingAgreement.where(lender_id: Lender['republic_bank']).first 
agreement = ServicingAgreement.first(lender_id: Lender['republic_bank']).first 
agreement = ServicingAgreement.find(lender_id: Lender['republic_bank']).first 
agreement = ServicingAgreement.find_by_lender_id(lender_id: Lender['republic_bank']).first 
agreement = ServicingAgreement.find(:first, lender_id: Lender['republic_bank']).first 
agreement = ServicingAgreement.find(:first, lender_id: Lender['republic_bank'].id).first 
agreement = ServicingAgreement.find(:first, lender_id: Lender['republic_bank'].id)
agreement = ServicingAgreement.find_by_lender(Lender['republic_bank'].id)
agreement = ServicingAgreement.find_by_lender_id(Lender['republic_bank'].id)
agreement.update(created_at: Date.tomorrow)
agreement
agreement = ServicingAgreement.find_by_lender_id(Lender['republic_bank'].id)
PaymentPurpose.first
PaymentPurpose.first.name
payment
payment.payment_purpose
payment.payment_purpose.name
payment.raw_payment_purpose
payment.raw_payment_purpose.name
payment.payment_purpose
exit!
exit!
loan.lender_financed?
edit loan.lender_financed?
loan.product
exit!
loan.lender_financed?
exit!
loan.lender_financed?
scheduled_payments[:past_due].count
scheduled_payments[:past_due]
@loan.rulebook
@loan.rulebook.min_right_to_cure_past_due_payments
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
servicing_agreement? && servicing_agreement.discount_percentage
exit!
loan_state_transitions
exit!
loan.payments.incoming.successful.to_a
loan.payments.incoming.successful.non_lender.to_a
exit!
loan
loan.payments
loan.payments.first
loan.payments.first.payment_purpose
whereami
loan.payments.incoming.to_a
exit!
inputs
scheduled
exit!
loan.obligations
whereami
loan.obligations
whereami
loan.contractual_scheduled_payments
loan.contractual_payments
loan.scheduled_payments
exit!
amount
self.original_amount
amount
caller
exit!
whereami
amount
extra_due_dates
typical_amount_post_default_interest
edit typical_amount_post_default_interest
typical_amount_post_default_interest
exit!
typical_amount_post_default_interest
edit typical_amount_post_default_interest
exit!
has_billing_periods?
amount
exit!
typical_amount_post_default_interest
exit!
typical_amount_post_default_interest
recurring_payment_amount_post_default_interest
exit!
typical_amount_post_default_interest
edit typical_amount_post_default_interest,
edit typical_amount_post_default_interest
typical_amount_post_default_interest
edit typical_amount_post_default_interest
typical_amount
exit!
first_installment
decorated_installments
draw_request
draw_request.installments
exit!
a = ContractualPaymentsGenerator.new(
  accruing_balance,
  line_of_credit.interest_rate,
  start_date,
  due_dates,
  non_accruing_balance: non_accruing_balance,
  statement_offset:     line_of_credit.statement_offset,
  locked_amount:        line_of_credit.locked_amount(start_date),
statement_principal:  line_of_credit.statement_principal(start_date))
accruing_balance
amount
accruing_balance
edit
preview?
exit!
installments
@installments
installments
amortizer
amount
locked_amount
statement_principal
martini
hashed_inputs
amortizer.payment_amounts
amortizer.payment_amounts.map { |amount| BigDecimal.new amount.to_s }
exit!
disable-pry
installments
PaymentPurpose.all
exit!
nil.each(&:itself)
print-accounting loan
whereami
print-accounting loan
discount_amount
loan.is_purchased
loan.ownership_transfers
exit!
bank_account_manager
exit!
life
life.loan
life
life.product
life.region
life.lender
exit!
loan.payments
whereami
bank_account_manager.lender_disbursement_account
bank_account_manager = BankAccountManager.new(loan.BankAccountManager.new(loan.product, loan.region, loan.lender)
  ;
BankAccountManager.new(loan.product, loan.region, loan.lender)
b = _
b.lender_disbursement_account
exit!
Calvin.Brian
Calvin::Brian
exit!
accountant.accounts(:financial)[:deferred_premium].abs
print-accounting loan
whereami
print-accounting loa
print-accounting loan
whereami
total_premium_owed = loan.premium_expense(earliest_ach_date)
print-accounting loan
exit!
print-accounting loan
exit!
Payment.lender
Payment.non_lender
Payment.non_lender.where_values
Payment.non_lender.where_values.reduce(:and)
Payment.non_lender.where_values.reduce(:and).not
Payment.non_lender.where_values.reduce(:and)methods
Payment.non_lender.where_values.reduce(:and).methods
Payment.non_lender.where_values.reduce(:and).class
Payment.non_lender.class
exit!
Payment.lender
exit!
Payment.not(:non_lender)
Payment.not(:non_lender)exit!
exit!
Payment.not(:non_lender)
Payment.non_lender
Payment.non_lender.where_values
Payment.non_lender.class
Payment.non_lender.methods
Payment.non_lender.substitute_values
Payment.non_lender.where_values_hash
Payment.non_lender.where_values
edit Payment.non_lender.where_values
edit Payment.non_lender.where_values.not
Payment.non_lender.where_values
Payment.non_lender.where_values.not
edit Payment.non_lender.where_values
Payment.non_lender.where_values
Payment.where(Payment.non_lender.where_values)
Payment.where(Payment.non_lender.where_values).not
Payment.where.not(Payment.non_lender.where_values)
exit!
Payment.non_lender
Payment.lender
exit!
Payment.lender
@lender_payments
@lender_payments.all
@lender_payments.to_a
@lender_payments.all
@lender_payments.first
@lender_payments.methods
@lender_payments.size
@lender_payments.to_sql
whereami
Payment.lender
loan.payments
loan.payments.size
Payment.lender
Payment.lender.size
Payment.lender.methods
exit!
loan.payments
loan.payments.non_failures
loan.payments.non_lender
loan.payments.lender
loan.payments.non_lender
loan.payments.non_lender.to_sql
loan.payments.lender.to_sql
loan.payments.non_lender
loan.payments.non_lender.where_values
loan.payments.non_lender.where_values.reduce(:and)
loan.payments.lender.to_sql
loan.payments.non_lender.to_sql
loan.payments.non_lender
Payment.lender
loan.payments.non_lender.where_values.reduce(:and)
loan.payments.lender.where_values.reduce(:and)
Payment.non_lender
Payment.non_lender.not
Payment.where.not(non_lender)
exit!
exit!
Payment.lender
Payment.lender.size
Payment.lender.to_sql
loan.payments
loan.payments.lender
Payment.lender.to_sql
loan.payments.lender
edit loan.payments.lender
loan.payments.lender
loan.payments.non_lender
whereami
exit!
loan.payments
loan.payments.lender
loan.payments.non_lender.where_values.reduce(:and)
loan.payments.lender.where_values.reduce(:and)
loan.payments.non_lender.where_values.reduce(:and)
loan.payments.non_lender.where_values
exit!
loan.payments.non_lender
loan.payments.lender
edit loan.payments.lender
whereami
Payment.lender
Payment.lender.with_loan_id(1)
non_lender
non_lender.where_values
Payment.lender.with_loan(1)
whereami
Payment.lender
[].map(&:amount)
[].map(&:amount).inject(&:+)
[].map(&:amount).inject(0,&:+)
print-accounting loan
exit!
print-accounting loan
loan.contractual_payments
loan.contractual_paymentss
loan.payments
loan.payments.contractual
loan.scheduled_payments.contractual
print-accounting loan
exit!
print-accounting loan
loan.scheduled_payments
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting lona
print-accounting loan
loan.payments
print-accounting loan
exit!
print-accounting loan
exit@
exit!
print-accounting loan
exit!
print-accounting loan
whereami
print-accounting loan
exit!
gs
ls
whereami
print-accounting loan
whereami
print-accounting
accounts
print-accounting -b
exit!
print-accounting loan
exit!
:me + :you
:me + 'you'
"#{:meyou}"
"#{:meyou}".to_sym
exit!
send('me')
send(:me)
exit!
ls
life
class
end
self
sim
@metadata
ls
@group
_context
_context.life
loan_under_test
loan
loan_under_test
loan_under_test.region
whereami
exit!
life
loan_under_test
whereami
context
_context
whereami
ls
bank_account_manager
whereami
BankAccountManager.new(life.product, life.region, life.lender)
caller
exit!
life
whereami
life
exit!
@group
ls
@group
@parent_groups
@parent_groups.first
@parent_groups.first.life
@parent_groups.first.context
@parent_groups.first.context.life
@parent_groups.first._context.life
@parent_groups.last._context.life
exit!
life
whereami
life()
ls
@_context
whereami
exit!
_context.life
exit!
whereami
disable-pry
print-accounting loan
whereami
print-accounting loan -b
exit!
print-accounting loan
loan.scheduled_payments
exit!
print-accounting loan
exit!
balance
print-accounting laon
print-accounting loan
exit!
print-accounting loa
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
loan.payments
scope
purpose
loan.payments.on_date(date).direction(direction)
whereami
scope = scope.with_purpose(purpose) if purpose
print-accounting loan
loan.payments
loan.scheduled_payments
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
today
loan.disbursement_date + loan.servicing_period.seasoning_period
Loan.first
loan = Loan.first
loan.disbursement_date + loan.servicing_period.seasoning_period
loan.disbursement_date + loan.servicing_agreement.seasoning_period
loan.disbursement_date + loan.servicing_agreement?
loan
Loan.last
loan = Loan.last
loan.disbursement_date + loan.servicing_agreement.seasoning_period
whereami
next_purchase_date
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period < ?::date", next_purchase_date).where(is_purchased: false)
print-accounting loan
exit!
next_purchase_date
DisbursementDateCalculator.next_system_disbursement(brand, RepaymentMethod['ach'], next_purchase_date)
exit
next_purchase_date
exit!
next_purchase_date
print-accounting loan
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period < ?::date", next_purchase_date).where(is_purchased: false)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date).where(is_purchased: false)
print-accounting loan
exit!
print-accounting loan
loan
subject
subject.generate
ServicedLoanPurchaseWorker.generate
ServicedLoanPurchaseWorker.loans_to_purchase(Brand['netcredit'))
ServicedLoanPurchaseWorker.loans_to_purchase(Brand['netcredit'])
ServicedLoanPurchaseWorker.loans_to_purchase(Brand['netcredit'))
ServicedLoanPurchaseWorker.loans_to_purchase(Brand['netcredit'])
loan
loan.brand
Loan.joins(:servicing_agreement).where('1=1)
')
Loan.joins(:servicing_agreement).where('1=1'))
Loan.joins(:servicing_agreement).where('1=1')
Loan.joins(:servicing_agreement).where('1=1').first
Loan.joins(:servicing_agreement).where('1=1')
Loan.joins(:servicing_agreement)
Loan.joins(:servicing_agreement).all
Loan.joins(:servicing_agreement).all.to_a
Loan.joins(:servicing_agreement).select_all
Loan.joins(:servicing_agreement).select
Loan.joins(:servicing_agreement).uniq
Loan.joins(:servicing_agreement).to_sql
Loan.all
Loan.first
exit
e
Loan.first
Loan.joins(:servicing_agreement)
ServicedLoanPurchaseWorker.loans_to_purchase('netcredit')
Loan.joins(:servicing_agreement)
ServicedLoanPurchaseWorker.loans_to_purchase('netcredit')
loan
loan.disbursement_date
loan.servicing_agreement.seasoning_period
ServicingAgreement.all
exit!
today
today.now
loan
loa.disbursement_date
loan.disbursement_date
Loan.joins(:servicing_agreement)
loan.servicing_agreement
loan.save!
loan.servicing_agreement
Loan.joins(:servicing_agreement)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
next_purchase_date = ServicedLoanPurchaseWorker.next_purchase_date(today)
next_purchase_date = ServicedLoanPurchaseWorker.latest_purchase_date_to_consider(today)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
loan.disbursement_date + loan.servicing_agreement.seasoning_period
loan.update_column :disbursement_date, Date.parse('2015-06-21')
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
loan
loan.update_column :disbursement_date, Date.parse('2015-06-02')
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
exit!
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
next_purchase_date = ServicedLoanPurchaseWorker.latest_purchase_date_to_consider(today)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
exit!
today
next_purchase_date = ServicedLoanPurchaseWorker.latest_purchase_date_to_consider(today)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
ServicedLoanPurchaseWorker.generate
expect(Mock::Resque).to have_enqueued(ServicedLoanPurchaseWorker, loan.id)
Mock::Resque
Mock::Resque.methods
Mock::Resque.enqueued
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date).pluck(&:id)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date).pluck(&:loan_id)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date).map(&:loan_id)
exit!
Mock::Resque
Mock::Resque.enqueued
exit!
Mock::Resque.enqueued
Mock::Resque.enqueued.size
loan.disbursement_date
loan.disbursement_date.to_date + loan.servicing_agreement.seasoning_period
loan.disbursement_date.to_date - 1 + loan.servicing_agreement.seasoning_period
exit!
loan.disbursement_date.to_date - 1 + loan.servicing_agreement.seasoning_period
loan.disbursement_date.to_date + loan.servicing_agreement.seasoning_period
'2015-01-02'.to_date - 20
exit!
('2015-12-13'.to_date..'2015-01-15'
  ('2015-12-13'.to_date..'2015-01-15')
  ('2015-12-13'.to_date..'2015-01-15'.to_date)
  '
)
('2015-12-13'.to_date..'2015-01-15'.to_date)
exit!
loan.disbursement_date.to_date + loan.servicing_agreement.seasoning_period
date
loan.disbursement_date.to_date + loan.servicing_agreement.seasoning_period
next_purchase_date = ServicedLoanPurchaseWorker.latest_purchase_date_to_consider(today)
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
Loan.all
loan.save!
Loan.joins(:servicing_agreement).where("disbursement_date + servicing_agreements.seasoning_period <= ?::date", next_purchase_date)
loan.disbursement_date + loan.servicing_agreement.seasoning_period
next_purcahse_date
exit!
date
loan.disbursement_date + loan.servicing_agreement.seasoning_period
exit!
print-accounting loan
exit!
print-accouonting loan
print-accuonting loan
print-accounting loan
loan.payments
exit!
balance
print-accounting loan
date
loan.today
balance
exit!
balance
print-accounting loan
balance
disable-pry
sim
ls
loan
@life
whereami
loan
loan.today
loan.today.to_s
exit!
date
target_date
date
print-accounting lona
print-accounting loan
date
loan.today
exit!
date
start_date
start_date.upto(target_date)
start_date.upto(target_date).to_a
start_date.upto(target_date - 1) { |today| run :morning, today, target_date }
print-accounting loan
loan
ls loan
whereami
loan.reload
print-accounting loan
loan.reload
print-accounting loan
whereami
print-accounting loan
exit!
print-accounting lona
print-accounting loan
exit!
print-accounting loan
loan.today
caller
whereami
exit!
caller
exit!
today
print-accounting loan
loan.accounting(&:itself)
whereami
loan.accounting(&:itself)
loan
whereami
ls
@loan
loan
ls
@loan.save!
balance
print-accounting loan
exit!
@loan
print-accounting @loan
@loan.save!
print-accounting @loan
exit!
date
loan.today
exit!
balance
disable-pry
balance
print-accounting loan
loan.payments
print-accounting loan
exit!
print-accounting loan
loan.payments
whereami
Date.current
exit!
print-accounting loan
exit!
date
Date.current
processing_day?
exit!
print-accounting loan
loan.payments
exit!
print-accounting lona
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
loan.payments
loan.payments.first
loan.payments
loan.payments.last
loan.payments.last.funding_payment?
loan.funding_payment
exit!
print-accounting loan
loan.payments
loan.scheduled_payments
print-accounting loan
4388.41 + 225
exit!
print-accounting lona
print-accounting loan
loan.accountant.accounts
loan.accountanting(&:itself).accounts
loan.accounting(&:itself).accounts
loan.accounting(&:itself).accounts(:financial)
90.51 / 4.31
loan.accounting(&:itself).accounts(:financial)
4.31 * 19
73.63 / 4.31
exit!
print-accounting simulator
4388.41 - 225
print-accounting 
loan.payments
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
disable-pry
total_servicing_fee_owed
print-accounting loan
exit!
print-accounting loan
whereami
servicing_fee_already_paid
total_servicing_fee_owed
exit!
servicing_fee_already_paid
total_servicing_fee_owed
disable-pry
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting loan
print-accounting 
whereami
print-accounting simulator -b
print-accounting 
print-accounting -b
accountant.loan
accountant.loan.ownership_transfers
accountant.loan.ownership_transfers.last.transferred_to
accountant.loan.ownership_transfers.last.transferred_from
accountant.loan.ownership_transfers.order(:effective_date_
)
accountant.loan.ownership_transfers.order(:effective_date)
accountant.loan.ownership_transfers.order(:effective_date).first
accountant.loan.ownership_transfers.order(:effective_date, :desc).first
accountant.loan.ownership_transfers.order(:effective_date)
accountant.loan.ownership_transfers.order(:effective_date).last
exit!
loan.ownership_transfer
loan.ownership_transfers
accountant.loan.ownership_transfers
accountant.loan.ownership_transfers.most_current
exit!
accountant.loan.current_owner
exit!
accountant.loan.current_owner
print-accounting loan
print-accounting accountant
accountant.loan.ownership_transfers.most_current
accountant.loan.ownership_transfers.most_current.transferred_to
accountant.loan.servicer
accountant.loan.lender
accountant.loan.lender == accountant.loan.current_owner
exit!
whereami
accountant.loan.lender == accountant.loan.owner
print-accounting loan
print-accounting 
accountant.loan.owner(Date.parse('2015-06-22')
  accountant.loan.owner(Date.parse('2015-06-22'))
accountant.loan.owner(Date.parse('2015-06-22'))
accountant.loan.owner(Date.parse('2015-06-23'))
accountant.loan.owner(Date.parse('2015-06-24'))
accountant.loan.owner(Date.parse('2015-06-22'))
accountant.loan.owner(Date.parse('2015-06-2'))
accountant.loan.owner(Date.parse('2015-06-1'))
accountant.loan.owner(Date.parse('2015-06-01'))
accountant.loan.owner(Date.parse('2015-06-02'))
loan.ownership_transfers
accountant.loan.ownership_transfers
accountant.loan.owner(Date.parse('2015-06-21'))
accountant.loan.owner(Date.parse('2015-06-22'))
accountant.loan.owner(Date.parse('2015-06-23'))
accountant.loan.lender_owned?(Date.parse('2015-06-23'))
exit!
print-accounting simulator
exit!
print-accounting simulator
print-accounting 
print-accounting loan
print-accounting simulator
whereami
print-accounting loan -b
print-accounting 
print-accounting simulator
print-accounting 
print-accounting loan
exit!
ls
date
on date
_context
config
@metadata
exit!
ls
on
ls
on
LoanExampleGroup
LoanExampleGroup::LifeCycleDSL
LoanExampleGroup::LifeCycleDSL.on
LoanExampleGroup::LifeCycleDSL.methods
LoanExampleGroup::LifeCycleDSL.class
LoanExampleGroup::LifeCycleDSL.send(:on)
LoanExampleGroup::LifeCycleDSL.on
LoanExampleGroup::LifeCycleDSL::Day
LoanExampleGroup::LifeCycleDSL::Day.new
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
whereami
print-accounting loan
print-accounting loan -b
print-accounting 
print-accounting loan
loan
loan.rulebook
loan.rulebook.max_rescission_days
loan.rulebook.product
loan.rulebook.rule_sets
loan.rulebook.rule_sets.first
loan.rulebook.rule_sets.first.product
exit!
print-accounting lona
print-accounting loan
loan.rulebook
print-accounting loan
RescissionPolicy.loan_in_rescindable_state?
RescissionPolicy.new(loan).loan_in_rescindable_state?
RescissionPolicy.new(loan).send(:loan_in_rescindable_state?)
RescissionPolicy.new(loan).send(:only_issue_related_payments?)
RescissionPolicy.new(loan).send(:within_allowed_rescission_window?)
loan.today
loan.payments
loan.payments.unsettled
loan.payments.non_lender.unsettled
exit!
print-accounting loan
whereami
loan.today
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
loan.status
loan.loan_status
print-accounting loan
servicing_fee_amount
loan.payments
exit!
print-accounting loan
exit!
print-accounting loan
exit!
loan.loan_status
expected_status
loan.loan_status
expected_status
loan.loan_status
expected_status
loan.loan_status
expected_status
loan.loan_status
expected_status
exit!
print-accounting loan
canceled_activity
payment
exit!
canceled_activity
print-accounting loan
exit!
@simulator_schedule
@remove_activities
@remove_activities.scheduled[1]
@simulator_schedule.scheduled[1]
@simulator_schedule.send(:scheduled)[1]
ls @simulator_schedule
@simulator_schedule.instance_variable_get(:@scheduled)
@simulator_schedule.instance_variable_get(:@scheduled)[1]
@simulator_schedule.instance_variable_get(:@scheduled)[1].matches_activity?(@remove_activities.first)
@remove_activities
exit!
simulator_schedule
print-accounting loan
print-accounting simulator
exit!
should_cancel_marketing_fee_recognition?
print-accounting
print-accounting @accountant
whereami
activity_to_cancel
exit!
print-accounting simulator
print-accounting loan
print-accounting 
whereami
@canceling_activity
@cancelling_activity
cancelling_activity
canceling_activity
ls
@adjusting_activity
exit
print-accounting loan
print-accounting 
print-accounting simulator
print-accounting loan
loan.payments
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting lona
print-accounting loan
print-accounting loan -b
FinanceXL::ActivityType.all
FinanceXL::ActivityType.to_a
FinanceXL::ActivityType.all.to_a
exit!
FinanceXL::ActivityType.all.to_a
FinanceXL::ActivityType.all.map(&:activity_type)
retained = [
  :waiver, :discharge, :unearned_fee_waiver,
  :settle_to_cso, :settle_to_lender, :settle_from_lender,
  :transfer_in, :transfer_out, :rescission,
  :late_fee, :nsf_fee, :premium, :recognize_marketing_fee,
  :servicing_fee, :marketing_fee, :refund_serving_fee,
  :purchase, :lender_discount, :refund_interest
]
all = FinanceXL::ActivityType.all.map(&:activity_type)
all - retained
all
all = FinanceXL::ActivityType.all.map(&:activity_type).map(&:to_sym)
all - retained
retained = [
  :waiver, :discharge, :unearned_fee_waiver,
  :settle_to_cso, :settle_to_lender, :settle_from_lender,
  :transfer_in, :transfer_out, :rescission,
  :late_fee, :nsf_fee, :premium, :recognize_marketing_fee,
  :servicing_fee, :marketing_fee, :refund_servicing_fee,
  :purchase, :lender_discount, :refund_interest
]
all - retained
ack 'activity \:late'
print-accounting lona
print-accounting loan
loan
print-accounting loan
exit!
print-accounting loan
loan
whereami
loan
print-accounting loan
loan.today
exit
print-accounting loan
_context
whereami
ls
self
ancestors
ancestors[1..-1]
ancestors
exit!
_context
selft
self
_context
self
exit!
_context
exit!
print-accounting loan
exit!
_context
context
_context
context
_context
exit!
ancestors
template
exit!
caller
@_context
disable-pry
self
@_context
self
exit!
self
ancestors
exit!
@context
self
ancestors
ancestors[1..-1]
ancestors[1..-1].respond_to?(:_context)
ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self
ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self
ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self
self.class
self.ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self.class.ancestors[1..-1].find { |anc| anc.respond_to?(:_context) }
self.class.ancestors[1..-1]
self.class.ancestors
whereami
self.class
ls self.class
ls self.class.instance_variable_get(:@_context)
ls self.class._context
self.class.instance_variable_get(:@_context)
exit!
self.class.instance_variable_get(:@_context)
whereami
caller
exit!
self.class._context
self
self.class
self.class._context
self.class
self.class._context
self.class
self.class._context
self.class
self.class._context
disable-pry
loan
loan.loan_status
loan
loan.save!
loan.issue!
loan.loan_status
exit!
loan.loan_staus
loan.loan_status
loan
loan.loan_status
Loan.all
Account.all
loan.account
loan.account_id
ServicingAgreement.all
loan.issue!
loan.loan_status
edit loan.issue!
whereami
loan.issue!
loan.can_disburse_now?
edit loan.can_disburse_now?
loan.supports_draws?
loan.loan_agreement
loan.loan_agreement.can_disburse_now?
edit loan.loan_agreement.can_disburse_now?
whereami
loan.today
next_system_disbursement_date
edit loan.loan_agreement.can_disburse_now?
exit!
next_system_disbursement_date
acceptable_disbursement_date?(next_system_disbursement_date)
next_system_disbursement_date
exit!
life
life.birthday
life
life.birthday
Time.now
whereami
Time.noew
Time.now
next_system_disbursement_date
edit next_system_disbursement_date
exit
settlement_date
account_id
Time.zone.now
loan.account_id
loan
edit next_system_disbursement_date
exit!
world
exit
e
exit!
loan
print-accounting loan
loan
world.account
caller
.clear
whereami
world.account
given_identity_account(brand: brand)
whereami
loan.account
loan
loan.account
loan.account_id
world.account
exit!
print-accounting loan
print-accounitng lona
print-accounitng loan
print-accounting loan
exit!
ls
servicing_fee_already_paid
exit!
servicing_fee_already_paid
@relevant_payments = loan.payments.with_purpose(:lender_discount, :premium_expense, :servicing_fee)
servicing_fee_already_paid
print-accounting loan
exit!
rescinded?
whereami
print-accounting
loan.loan_status
loan.rescission
.clcear
.clear
print-accounting lona
loan.rescission.status
loan.rescission.rescission_status
print-accounting
print-accounting loan
print-accounting loan -b
whereami
exit!
print-accounting 
print-accounting simulator
exit!
print-accounting simulator
print-accounting simulator -b
exit!
print-accounting simulator
print-accounting loan
exit!
print-accounting 
print-accounting simulator
print-accouting loan
print-accounting loan
print-accounting loan -b
print-accounting loan
loan.rescission_id
loan.rescission
loan.rescission_id
edit loan.rescission
loan
edit loan.rescissions
loan.rescissions
loan.rescission
loan.loan_agreement
loan.loan_agreement_id
loan.rescission_id
loan.rescission
loan.rescission_id
loan.rescission.present?
exit
print-accounting loan
exit!
print-accounting simulator
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
should_refund_servicing_fee?
loan.funding_failed? || outstanding_balance > FinanceXL::ZERO
servicing_fee_to_refund
servicing_fee_already_paid
exit!
should_refund_servicing_fee
should_refund_servicing_fee?
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting accountant
print-accounting simulator
exit!
print-accounting simulator
print-accounting lona
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
loan.payments
loan.payments.succesful
loan.payments.succesfull
loan.payments.successful
loan.payments.successful.with_purpose(:rescission)
print-accounting loan 
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan 
print-accounting loan -b
print-accounting loan
print-accounting lona
print-accounting loan
loan
loan.loan_status
loan.payments
exit!
print-accounting loan
loan.payments
loan.loan_status
print-accounting lona
print-accounting simulator
print-accounting loan
loan.funding_payment
loan.funding_payment.is_cancellable?
exit!
loan.funding_payment.is_cancellable?
loan.payments.incoming.with_purpose(:marketing_fee)
loan.payments.incoming.with_purpose(:marketing_fee).first
exit!
disable-pry
print-accounting
print-accounting simulator
exit!
print-accounting loan
payment.amount = loan.balances_on(loan.today)[:outstanding]
account_for_payment
loan.loan_status
print-accounting loan
exit!
print-accounting loan
print-accounting 
loan.payments
accountant.loan.payments
whereami
exit!
disable-pry
print-accounting loan
whereami
loan.payments.unsettled.non_lender
(loan.payments.unsettled.non_lender - payments_from_issue_event).empty?
loan_in_rescindable_state?
only_issue_related_payments?
within_allowed_rescission_window?
edit within_allowed_rescission_window?
rulebook
whereami
edit loan.rulebook
loan.underwriting_decision
loan.underwriting_decision.rule_sets
loan.underwriting_decision.rule_set_ids
edit loan.underwriting_decision.rule_set_ids
edit loan.underwriting_decision.rule_sets
exit!
rulebook
rulebook.me
rulebook.max_rescission_days
edit rulebook.max_rescission_days
exit!
rule_set_ids
caller
exit!
rule_sets.any?
underwriting_decision.rule_set_ids.empty?
underwriting_decision.rule_set_ids
exit!
ls
@rule_set_ids
edit rule_set_ids
caller
@rule_book
@rulebook
exit!
RuleSet.by_product(product).where_current
RuleSet.by_product(product)
exit!
RuleSet.by_product(product)
RuleSet.all
RuleSet.find(937)
RuleSet.find(937).product
exit!
RuleSet.create!(
  product: Product['netcredit_bank_partnership'],
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
RuleSet.by_product(product)
RuleSet.find(937).product
RuleSet.find(937)
exit!
Product['netcredit_bank_partnership']
RuleSet.build(
  product: Product['netcredit_bank_partnership'],
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
RuleSet.new(
  product: Product['netcredit_bank_partnership'],
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
RuleSet.new(
  product_id: Product['netcredit_bank_partnership'].id,
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
edit RuleSet.new
RueleSet.columns
RueleSet.methods
RuleSet.column_names
whereami
RuleSet.new(
  product_id: 'netcredit_bank_partnership',
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  product_id: 'netcredit_bank_partnership',
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r.product
r.product_id
RuleSet.new(
  product: 'netcredit_bank_partnership',
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
RuleSet.new(
  product: 'netcredit_bank_partnership',
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  product: 'netcredit_bank_partnership',
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r.product
r.country
r.rule_set_type
r.product
r.product_id
RuleSet.new(
  rule_set_type: 'business',
  product: 'netcredit_bank_partnership',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
product: :netcredit_bank,
RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
edit RuleSet.new
max_rescission_hour: 17r = RuleSet.new(
rule_set_type: 'business',
product: :netcredit_bank_partnership,
country: 'US',
version: 1,
is_rescission_period_in_business_days: true,
max_rescission_days: 1,
max_rescission_hour: 17
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
edit RuleSet.new
exit!
$pry = true
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
exit@
exit!
r
Product[:netcredit_bank_partnership]
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.create!(
  product: :netcredit_bank_partnership,
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
edit RuleSet.create!
r
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
edit RuleSet.new
$pry = true
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
r = RuleSet.new(
  rule_set_type: 'business',
  product: :netcredit_bank_partnership,
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 2,
  max_rescission_hour: 17
)
edit RuleSet.new
r.class
r.class == RuleSet
exit!
RuleSet.last
edit RuleSet.new
exit!
RuleSet.new(
  product: Product['netcredit_bank_partnership'],
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
Product
Product.lookup.reload
RuleSet.new(
  product: Product['netcredit_bank_partnership'],
  rule_set_type: 'business',
  country: 'US',
  version: 1,
  is_rescission_period_in_business_days: true,
  max_rescission_days: 1,
  max_rescission_hour: 17
)
exit!
print-accounting loan
print-accounting loan -b
new_rule
RuleSet.where_current.by_product("netcredit_bank_partnership").business
RuleSet.where_current.by_product("netcredit_bank_partnership").business.by_region(:nil)
RuleSet.where_current.by_product("netcredit_bank_partnership").business.first
RuleSet.where_current.by_product("netcredit_bank_partnership").business.first.region
RuleSet.where_current.by_product("netcredit_bank_partnership").business.by_region(nil)
exit!
new_rule
new_rule.version
print-accounting loan
print-accounting loan -b
Date.tomorrow - Date.today
(Date.tomorrow - Date.today).to_i
premium_left
print-acounting loan
print-accounting loan
wherami
whereami
remaining_days
num_days
BigDecimal(premium_left.divide(remaining_days).multiply(num_days).floor(places: 2))
last_installment_date
BigDecimal(premium_left.divide(remaining_days).multiply(num_days).floor(places: 2))
todya
today
print-accounting 
BigDecimal(premium_left.divide(remaining_days).multiply(num_days).floor(places: 2))
BigDecimal(premium_left.divide(remaining_days).multiply(num_days))
BigDecimal(premium_left.divide(remaining_days).multiply(num_days).floor(places: 2))
0.06 * 31
exit!
print-accounting loan
[nil, Date.today].max
print-accounting loan
@accountant.source
@accountant.loan
@accountant.loan.servicing_agreement?
FinanceXL::Source.any_instance.stub(:servicing_agreement?).and_return false
@accountant.loan.servicing_agreement?
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
whereami
wherami
whereami
scope
options
PaymentPurpose.find(9)
exit!
exit!
print-accounting loan
loan.payments
print-accounting loan
4500 + 86.2 + 225 
print-accounting loan
print-accounting loan -b
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
print-accounting loan
loan.payments.map(&:payment_purpose)
exit!
interest_refund_already_paid
loan.payments
@relevant_payments
whereami
interest_payments = @relevant_payments.select do |payment|
  payment.payment_purpose == :interest_refund
end
exit!
interest_refund_already_paid
interest_past_due
print-accounting loan
disable-pry
@accountant
@accountant.source
edit @accountant.source=
caller
exit!
accounts
default_ledger
edit accounts
ls
@book.accounts
exit!
print-accounting loan
loan.account
loan.account.person
loan.account.person_id
loan.account.customer
exit!
print-accounting loan
loan
loan.account
loan.account_id
Loan.all
exit!
print-accounting loan
loan
loan.all
Loan.all
exit!
loan
exit!
print-accounting lona
print-accounting loan
Loan.all
exit!
print-accounting loan
Loan.all
loan.payments
Loan.where(account_id: loan.account_id)
Loan.where(account_id: loan.account_id).order(:created_at)
Loan.where(account_id: loan.account_id).order(:created_at,desc)
Loan.where(account_id: loan.account_id).order(:created_at, :desc)
Loan.where(account_id: loan.account_id).order(created_at: :desc)
Loan.where(account_id: loan.account_id).order(created_at: :desc).first
Loan.where(account_id: loan.account_id).order(loan_id: :desc).first
Loan.where(account_id: loan.account_id).order(created_at: :desc).first
exit!
Loan.where(account_id: loan.account_id).order(created_at: :desc).first
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).order(created_at: :desc).first
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).order(created_at: :desc)
Loan.all
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).order(created_at: :desc)
Loan.references(:loan_statuses).where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).order(created_at: :desc)
Loan.references(:loan_statuses).where(account_id: loan.account_id).where(loan_status: :rescinded).where.not(loan_id: loan.loan_id).order(created_at: :desc)
Loan.references(:loan_statuses).where(account_id: loan.account_id).where(loan_status: :rescinded).where.not(loan_id: loan.loan_id).order(created_at: :desc).first
Loan.includes(:loan_statuses).where(account_id: loan.account_id).where(loan_status: :rescinded).where.not(loan_id: loan.loan_id).order(created_at: :desc).references(:loan_statuses)
Loan.includes(:loan_statuses).where(account_id: loan.account_id).where(loan_status: :rescinded).where.not(loan_id: loan.loan_id).order(created_at: :desc).references(:loan_statuses).sql
Loan.includes(:loan_statuses).where(account_id: loan.account_id).where(loan_status: :rescinded).where.not(loan_id: loan.loan_id).order(created_at: :desc).references(:loan_statuses).to_sql
loan.loan_status
loan
Loan.includes(:loan_statuses)
Loan.includes(:loan_statuses).to_sql
Loan.includes(:loan_statuses).references(:loan_statuses).to_sql
Loan.includes(:loan_status).references(:loan_statuses).to_sql
Loan.joins(:loan_status).references(:loan_statuses).to_sql
Loan.joins(:loan_status).
Loan.joins(:loan_status).to_sql
Loan.joins(:loan_statuses).to_sql
Loan.associations
Loan.joins(:product)
Loan.joins(:product).to_sql
Loan.joins(:products).to_sql
Loan.joins(:loan_applications).to_sql
exit!
Loan.joins(:loan_applications)
Loan.joins(:loan_applications).to_sql
LoanStatuses.join(:loans(
LoanStatuses.join(:loans)
LoanStatus.join(:loans)
LoanStatus.joins(:loans)
Loan.joins(:loans)
Loan.joins(:loan_statuses)
Loan.includes(:loan_statuses)
Loan.includes(:loan_statuses).to_sql
LoanStatus[:rescinded]
LoanStatus[:rescinded, :funding_failed]
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).order(created_at: :desc)
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus['rescinded', 'funding_failure').order(created_at: :desc)
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus['rescinded', 'funding_failure']).order(created_at: :desc)
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus[:rescinded, :funding_failure]).order(created_at: :desc)
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus[:rescinded, :funding_failed]).order(created_at: :desc)
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus[:rescinded, :funding_failed]).order(created_at: :desc).to_sql
Loan.where(account_id: loan.account_id).where.not(loan_id: loan.loan_id).where(loan_status_id: LoanStatus[:rescinded, :funding_failed, :pending_rescission]).order(created_at: :desc).to_sql
exit!
print-accounting loan
Loan.all
exit!
most_recent_loan
Loan.all
most_recent_loan
loan.loan_status
print-accounting loan
print-accounting most_recent_loan
exit!
loan.loan_status
loan.persisted?
loan.changed?
loan.changes
loan
loan.loan_status
loan.save
loan.save!
loan
loan.loan_status
LoanStatus[loan.loan_status]
most_recent_loan
loan.loan_status
most_recent_loan.loan_status
whereami
LoanStatus[:rescinded, :funding_failed, :pending_rescission].include?(most_recent_loan.loan_status)
most_recent_loan
most_recent_loan.loan_status
LoanStatus[:rescinded, :funding_failed, :pending_rescission]
[:rescinded, :funding_failed, :pending_rescission]
exit!
print-accounting loan
loan.loan_status
print-accounting lona
print-accounting loan
whereami
loan.payments
exit!
most_recent_loan
[:rescinded, :funding_failed, :pending_rescission].include?(most_recent_loan.loan_status)
accountant.accounts[:marketing_fee_revenue] == FinanceXL::ZERO
accountant = most_recent_loan.accounting(&:itself)
whereami
accountant.accounts[:marketing_fee_revenue] == FinanceXL::ZERO
accountant.accounts[:marketing_fee_revenue]
print-accounting 
print-accounting accountant
print-accounting accountant -b
accountant.accounts(:financial)[:marketing_fee_revenue] == FinanceXL::ZERO
exit!
accountant
print-accounting accountant 
print-accounting loan
loan.payments
print-accounting loan
whereami
life.due_dates
ls
sim.life
sim.life.due_dates.drop(1)
print-accounting loan
loan.loan_status
print-accounting loan
sim.life.due_dates
sim.life.due_dates.drop(1)
sim.life.due_dates
exit!
print-accounting loan
4500 + 77.58 + 250
4500 + 77.58 - 4802.58
exit!
print-accounting loan
'2015-06-15'.to_date + 20
exit!
print-accounting loan
print-accounting loan -b
print-accounting lloan
print-accounting loan
print-accounting loan -b
loan.status
loan.loan_status
loan.is_open
-283.69 + 225
-283.69 + 225 + 4.31
-283.69 + 225 - 4.31
print-accounting loan
loan
Loan.all
whereami
'2015-07-15'.to_date + 20
print-accounting loan
'2015-07-14'.to_date + 20
exit!
print-accounting loan
loan.payments
whereami
exit!
print-accounting loan
loan.payments
loan.payments.first
loan.payments.first.payment_status
ls
sim
sim.life
sim.life.issue_loan
sim.life.issue_loan?
exit!
issue_loan?
loan.funding_payment
loan.funding_payment.payment_status
mark_funding_payment_submitted(loan, loan.funding_payment) if issue_loan?
loan.funding_payment.payment_status
update_contractual_payments!(loan)
update_loan_offer(loan) if loan.cso_installment_type?
loan.funding_payment
exit!
scope
exit!
scope
wherami
whereami
scope.reject! loan.funding_payment
scope.reject! { |payment| payment == loan.funding_payment }
scope
whereami
exit!
print-accounting loan
loan.payments
exit!
print-accounting loan
loan.loan_status
print-accounting loan
print-accounting lona
print-accounting loan
loan.funding_payment
loan.funding_payment.successful
loan.funding_payment.successful?
loan.funding_payment.cancelled?
loan.funding_payment.payment_status
loan.funding_payment.canceled?
loan.funding_payment.reversed
loan.funding_payment.reversed_by_payment
exit!
print-accounting loan
loan.payments
print-accounting loan
print-accounting lona
print-accounting loan
exit!
print-accounting loan
loan.payments
loan.payments.first.payment_status
exit!
loan.payments.first.payment_status
loan
RescindLoan.new(loan, loan.today, 'sgunda').rescind!
loan.payments.first.payment_status
exit!
loan.payments
loan.payments.size
RescindLoan.new(loan, loan.today, 'sgunda').rescind!
loan.payments.size
loan.payments
exit!
print-accounting loan
marketing_fee_payment
marketing_fee_payment.payment_status
exit!
loan.payments
loan.payments.first
loan.payments.first.payment_status
today
whereami
today
loan.today
sim
sim.life.issue_loan?
loan.payments
exit!
date
caller
exit!
date
time_of_day
caller
exit!
marketing_fee_payment.is_cancellable?
ownership_transfers
ownership_transfers.as_of(date)
ownership_transfers.as_of(date).transferred_to
ownership_transfers.as_of(date)
ownership_transfers.as_of(date).transferred_to
ownership_transfers
ownership_transfers.as_of(date)
where("effective_date < ?", date).
order(:effective_date).last
ownership_transfers.as_of(date).where("effective_date < ?", date).order(:effective_date).last
ownership_transfers.as_of(date).where("effective_date < ?", date).order(:effective_date)
ownership_transfers.as_of(date)
ownership_transfers.as_of(date).last
ownership_transfers.as_of(date).where("effective_date < ?", date).order(:effective_date).last
ownership_transfers.where("effective_date < ?", date).order(:effective_date).last
exit!
ownership_transfers.as_of(date).transferred_to
date
ownership_transfers.where("effective_date < ?", date).order(:effective_date).last
loan.lender
lender
ownership_transfers.as_of(date).transferred_to
date
exit!
marketing_fee_payment.is_cancellable?
loan.payments
loan.payments.first
loan.payments.first.payment_purpose
exit!
payment.lender_payment?
exit!
edit send_unscheduled_debits
edit refund_marketing_fee
print-accounting loan
whereami
rescission.funding_collection_payment.payment_status
rescission.rescission_status
loan.loan_status
exit!
print-accounting loan
exit!
print-accounting loan
loan.loan_status
exit!
rescission.settle_servicer_payment
rescission.rescission_status = RescissionStatus[:completed]
rescission.save
loan.rescind!
loan
loan.loan_status
loan
loan.loan_status
loan.reload
loan.loan_status
exit!
edit process_rescission
ServicedLoanPurchaseWorker.loans_to_purchase(loan.brand).pluck(:loan_id)
disable-pry
loan
loan.product
loan.disbursement_amount
LoanFundingPaymentCreator.create!(loan,effective_date)
loan.disbursement_amount.zero?
loan.payments
loan.reload
loan.disbursement_amount.zero?
effective_date
exit!
disable-pry
subject
loan.funding_payment
loan.reload
loan.funding_payment
loan.payments
loan.funding_payment
edit loan.funding_payment
loan.disbursed?
edit loan.disbursed?
exit!
loan.disbursement_date
loan
exit!
loan.payments
effective_date
loan
loan.payments
loan.funding_payment
whereami
loan.reload
loan.funding_payment
loan.payments
loan.disbursement_date
whereami
update_disbursement_date
update_disbursement_dates
loan.disbursement_dates
update_disbursement_date
loan.disbursement_date
exit!
print-accounting loan
whereami
84.91 - 79.3
loan.finance_charge_start_date
exit!
print-accounting loan
loan.finance_charge_start_date
sim
sim.life
sim.finance_charge_start_date
sim.life.finance_charge_start_date
life
life.attributes
life.attributes[:finance_charge_start_date]
life
life.methods
exit!
loan
loan.disbursement_amount
subject
subject.loan
subject.loan.disbursement_amount
subject.create!
exit!
loan.disbursement_date
exit!
loan
update_disbursement_dates
loan
whereami
loan.mark_funding_success!
loan.add_funding_activities
loan.accounting(&:itself)
loan.refinance_amount
exit!
subject
loan
loan.funding_payment
loan.reload.funding_payment
subject
loan.disbursement_amount
subject.create!
loan.funding_payment
exit!
loan.mark_funding_success!
loan.add_funding_activities
update_disbursement_dates
options
loan
update_disbursement_dates
loan.mark_funding_success!
loan
whereami
loan.amount
exit!
loan.mark_funding_success!
update_disbursement_dates
loan.mark_funding_success!
exit
loan.add_funding_activities
!wtf?
wtf?
wtf?!!?
loan.add_funding_activities
wtf?!!?
exit!
loan.add_funding_activities
loan.funding_payment
funding_payment.nil? && loan.disbursement_amount.nonzero?
loan.funding_payment.nil? && loan.disbursement_amount.nonzero?
loan.refinance_amount
loan.loan_application.refinance_type?(:cash_out)
loan.loan_application.refinance_type
loan.loan_application.refinance_type.present
loan.loan_application.refinance_type.present?
exit!
funding_payment.nil? && loan.disbursement_amount.nonzero?loan.refinance_amount > 0 && loan.loan_application.refinance_type.present? &&
loan.refinance_amount > 0 && loan.loan_application.refinance_type.present? &&
!loan.loan_application.refinance_type?(:cash_out)
loan.add_funding_activities
update_disbursement_dates
loan.add_funding_activities
FundingSuccessMessage.new(loan).deliver
edit FundingSuccessMessage.new(loan).deliver
loan.postal_service_notifier.loan_funded(loan.account, loan)
exit!
loan.mark_funding_sucess!
loan.mark_funding_success!
vim /Users/cmwesigwa/.rbenv/versions/2.2.2/gemsets/enova_portfolio/gems/state_machine-1.2.0/lib/state_machine/event.rb
edit /Users/cmwesigwa/.rbenv/versions/2.2.2/gemsets/enova_portfolio/gems/state_machine-1.2.0/lib/state_machine/event.rb
exit!
loan.mark_funding_success!
$pry = true
loan.mark_funding_success!
$pry
loan.mark_funding_success!
edit /Users/cmwesigwa/.rbenv/versions/2.2.2/gemsets/enova_portfolio/gems/state_machine-1.2.0/lib/state_machine/event.rb
loan.mark_funding_success!
exit!
loan.mark_funding_success!
exit!
edit /Users/cmwesigwa/.rbenv/versions/2.2.2/gemsets/enova_portfolio/gems/state_machine-1.2.0/lib/state_machine/event.rb
loan.mark_funding_success!
loan.add_funding_activities
FundingSuccessMessage.new(loan).deliver
exit!
loan.mark_funding_success!
loan.loan_status
loan.can_disburse_now?
loan.mark_funding_success!
exit!
loan.can_disburse_now?
ls
loan
ls
@machine
@machine.loan
@machine
whereami
ls
@name
loan.mark_funding_success!
loan.loan_status
effective_date
loan
exit!
whereami
loan
loan.disbursement_amount
loan.accounting(&:itself)
loan.accounting_activities
loan.mark_funding_success!
loan.add_funding_activities
FundingSuccessMessage.new(loan).deliver
exit!
loan.issue!
loan.disbursement_date
effective_date
loan.reload.disbursement_date
exit!
loan.loan_status
loan.issue!
loan.loan_status
loan.can_disburse_now
?
loan.can_disburse_now?
exit!
loan.issue!
exit!
loan
loan.loan_status
loan.issue!
loan.loan_state_transition
loan.loan_state_transitions
exit!
loan
Loan.all
loan.loan_state_transitions
loan.issue!
loan.loan_state_transitions
exit!
loan
loan.brand
loan.brand?
loan.product.brand
loan.raw_product.brand
loan.raw_product.brand?(:cnu)
exit!
loan.finance_charge_start_date
effective_date + 3
effective_date + 4
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
loan.accounting(&:itself).balances
exit!
print-accounting loan
whereami
loan.accounting(&:itself).accounts
print-accounting loan
print-accounting loan -b
4224 + 4.05
exit
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
197.43 - 52.65
exit!
print-accounting loan
loan.payments
loan.payments[-1]
loan.payments[-2]
loan.payments[-2].payment_purpose
loan.payments[-2].contractual?
loan.payments[-2].methods
loan.payments[-2].non_contractual?
print-accounting loan
print-accounting loan -b
print-accounting loan
exit!
amount
edit default_amount
exit!
scope
amount
print-accounting loan
amount
print-accounting loan
scope
life.event_on?(tomorrow, :miss_payment)
scope
wherami
whereami
life.event_on?(tomorrow, :miss_payment)
tomorrow
life.event_on?(tomorrow, :miss_payment)
life.due_datew
life.due_dates
exit!
disable-pry
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
whereami
loan.accounting(&:itself).balances
loan.accounting(&:itself).balances(:financial)
print-accounting loan
whereami
exit!
print-accounting loan
whereami
loan.accounting(&:itself).balances
loan.accounting(&:itself).balances(:financial)
4675.42 - 4618.86
loan.accounting(&:itself).accounts(:financial)
scheduler
print-accounting loan
print-accounting loan -b
loan.accounting(&:itself).balances
amount
whereami
payment
scheduler.errors
date
payment.date
loan.payoff_amount(payment.date)
exit!
date
balances
print-accounting
accounting(:itself)
accounting(&:itself)
whereami
edit balances_on
exit!
accountant
whereami
print-accounting accountant
whereami
without_scheduled_payment_ids
whereami
exit!
print-accounting loan
accountant
print-accounting accountant
print-accounting loan
loan.accounting(&:itself).balances
accountant
print-accounting loan
print-accounting loan -b
4675.42 + 3.72
print-accounting loan
amount
loan.accounting(&:itself)
print-accounting loan.accounting(&:itself)
wherami
whereami
loan.simulated_accountant(today)
loan.simulated_accountant(loan.today)
print-accounting loan.simulated_accountant(loan.today)
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }.map(&:id)
print-accounting loan.simulated_accountant(loan.today, [931])
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }.first
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }.first.scheduled_payment
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }.map { |payment| payment.scheduled_payment.id }
print-accounting loan.simulated_accountant(loan.today, [4176])
payments_today = loan.payments.select { |payment| payment.effective_date == loan.today }.map { |payment| payment.scheduled_payment.id }
print-accounting loan
loan.accounting(&:itself).balances
print-accounting loan -b
loan.accounting(&:itself).balances
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
loan.due_dates
sim
sim.life.due_dates
exit!
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
sim.life.due_dates
loan.accounting(&:itself).balances(:financial)
print-accounting loan
exit!
print-accounting loan 
print-accounting loan -b
exit!
print-accounting loan
sim.life.due_dates
sim.life.due_dates.size
exit!
print-accounting loan
loan.scheduled_payments
exit!
print-accounting loan
exit!
print-accounting loan
loan.accounting(&:itself).balances(:financial)
sim.due_dates
sim.life.due_dates
sim.life.due_dates.map(&:to_s)
exit!
print-accounting loan
exit!
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
exit!
print-accounting loan
print-accounting loan -b
loan.accounting(&:itself).balances(:financial)
exit!
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
exit!
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.accounting(&:itself).balances(:financial)
print-accounting loan
print-accounting loan -b
loan.accounting(&:itself).balances(:financial)
print-accounting loan
accountant
loan
servicing_agreement
servicing_agreement.di
servicing_agreement.id
exit!
accountant
whereami
print-accounting
print-accounting accountant
print-accounting accountant -b
accountant.accounts[:deferred_premium]
accountant.accounts
accountant
accountant.accounts(:financial)
accountant.activity.find? { |act| act.type?(:recognize_marketing_fee) }
accountant.activities.find? { |act| act.type?(:recognize_marketing_fee) }
accountant.activities.find { |act| act.type?(:recognize_marketing_fee) }
exit!
loan.is_purchased/
loan.is_purchased
loan.is_purchased?
loan
print-accounting loan
accountant
loan.accounting(&:itself
)
exit@
exit!
print-accounting loan
whereami
loan.accountant.balances(:financial)
loan.accounting(&:itself).balances(:financial)
print-accounting loan
loan.ownership_transfers
loan.lender_owned?(Date.parse('2015-07-04'))
exit!
today
accounts[:principal_current].zero?
exit!
accounts[:principal_current]
print-accounting loan
loan.lender_owned?(today)
whereami
today
loan.lender
loan.owner(today)
loan.ownership_transfers
ownership_transfers.as_of(today)
loan.ownership_transfers.as_of(today)
whereami
print-accounting loan
loan.payments
ls
whereami
print-accounting loan
exit~
exit!
print-accounting loan
servicing_agreement
principal_outstanding
balances_on(date, ledger: :financial)
balances_on(date, ledger: :financial)[:me]
exit!
principal_outstanding
balances_on(date)
balances_on(date)[:me]
exit!
balances_on(date, ledger: :financial)[:principal_outstanding]
edit balances_on
ls
self
exit!
balances_on(date, ledger: :financial)[:principal_outstanding]
balances_on(date, ledger: :financial)
edit balances_on
exit!
servicing_agreement?
edit servicing_agreement?
edit balances_on
exit!
payments
payments.size
loan.lender_discount(date)
loan.balances_on
loan.balances_on(date)
servicing_agreement
exit
loan.lender_discoutn
loan.lender_discount
loan.lender_discount(date)
lender_selection_trail
lender_selection_trial
Trial.where(trial_name: 'netcredit_bank_partnership_selector')
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, tier: tier, region: region).last
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, tier: tier, region: region)
product
product.product_id
Product.find(10)
product
exit!
lender_selection_trial
lender_selection_trial.try(:add_participant, account)
disable-pry
trial
underwriter
underwriter.product
underwriter.lender_selection_trial
edit underwriter.lender_selection_trial
tier
underwriter.tier
Trial.where(trial_name: 'netcredit_bank_partnership_selector')
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, region: region)
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, region: undewriter.region)
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, region: underwriter.region)
Trial.where(trial_name: 'netcredit_bank_partnership_selector').active_for(product: product, region: underwriter.region, tier: underwriter.tier)
Trail.where(tier_id: nil)
Trial.where(tier_id: nil)
Trial.all
Trial.where(tier: nil)
exit!
trial
trail_participations
trial_participations
whereami
trial_participation
trial_participations=
a
trial_participation
exit!
trial_participation
trials.map { |trial| trial.add_participant(account) }
trials
edit trials
Trial.active_for(product: product, tier: tier, region: region)
product
tier
region
tier
edit tier
ls
caller
whereami
@tier
exit!
caller
exit!
@underwriting_decision
@underwriting_decision.trial_participation
lender_selector_trial = @undewriting_decision.trial_participation.select { |tp| tp.trial.name == 'netcredit_bank_partnership_selector' }
lender_selector_trial = @undewriting_decision.trial_participation
@underwriting_decision
exit!
lender_selector_trial
@underwriting_decision
@underwriting_decision.trial_participation
caller
whereami
exit!
trials
undewriter
underwriter
underwriter.tier
underwriter.send(:tier)
exit!
caller
exit!
trials
product
tier
region
whereami
trials
trials.first.product_id
trials.first.trial
exit!
declined?
trials
retained_trials
trials
tier
Trial.active_for(product: product, tier: tier, region: region)
Trial.active_for(product: product, tier: nil, region: region)
Trial.active_for(product: product, tier: tier, region: region)
product
exit!
disable-pry
decision
decision.trial_participation
decision.trial_participation.first
decision.trial_participation.first.trial
decision.declined?
decision.trial_participation.first.persisted?
exit!
products
Brand['netcredit'].products
product.enabled
product.methods
whereami
rulebook_for(nil)
methods
Rulebook.for(country: country)
country
entity
entity.country
Rulebook.for(
  country:                  loan_application.country,
  region:                   loan_application.region,
  product:                  product,
  tier:                     tier,
  is_repeat_customer:       repeat_customer?,
  income_payment_frequency: payment_frequency,
  campaign:                 campaign,
  lender:                   lender
)
product
whereami
products
product = products.first
Rulebook.for(
  country:                  loan_application.country,
  region:                   loan_application.region,
  product:                  product,
  tier:                     tier,
  is_repeat_customer:       repeat_customer?,
  income_payment_frequency: payment_frequency,
  campaign:                 campaign,
  lender:                   lender
)
tier = nil
repeat_customer?
exit!
rulebook
rulebook.is_enabled?
rulebook.businessis_enabled?
rulebook.business.is_enabled?
rulebook.methods
rulebook.is_enabled
product
whereami
product = Product['netcredit_bank_partnership']
rulebook_for(product)
rulebook.is_enabled
region
region = Region['ND']
region
rulebook_for(product)
entity.address.region = 'ND'
rulebook_for(product)
rulebook.is_enabled
Ruleset.where(product: 'netcredit_bank_partnership')
RuleSet.where(product: 'netcredit_bank_partnership')
RuleSet.where(product: 'netcredit_bank_partnership').all
RuleSet.where(product_id: Product['netcredit_bank_partnership']).all
RuleSet.column_names
RuleSet.where(product_id: Product['netcredit_bank_partnership'].id).all
RuleSet.all
exit!
RuleSet.all
RuleSet.where(product_id: Product['netcredit_bank_partnership'].id).all
RuleSet.where(product_id: Product['netcredit_bank_partnership'].id).all.last
RuleSet.find(1036)
RuleSet.find(1036).is_enabled
whereami
entity.address
entity.address.region = 'ND'
entity.address
rulebook = rulebook_for(product)
product = Product['netcredit_bank_partnership']
rulebook = rulebook_for(product)
rule_book.is_enabled
rule_book.methods
rulebook = rulebook_for(product)
rulebook.is_enabled
exit!
described_class.region(options[:entity])
underwriter
underwriter.products
underwriter.underwriters
underwriter.underwriters.size
underwriter.send(:products)
Brand['netcredit'].products.order(:underwriting_priority).where(is_underwriting_enabled: true)
underwriter.send(:products).include?(Product['netcredit_bank_partnership'])
exit!
loan_application.underwriting_decisions
loan_application.product
loan_application.
me
loan_application
loan_application.region
loan_application.brand
whereami
loan_application
loan_application.underwriting_decisions
exit!
underwriters
products
region
underwriters
products
exit!
products
@all_products
whereami
underwriters
products
whereami
rulebook_for(:me)
rulebook_for(:me).is_enabled
@all_products
@enabled_products
exit!
product
rulebook_for(product)
rulebook_for(:me)
rulebook_for
rulebook_for(product)
self
rulebook_for(:me)
exit!
products
exit!
ls
exit!
products
underwriters
underwriters.size
disable-pry
date
edit worker_failed?
date
worker_failure_event && worker_failure_event.additional_attributes[:class] == worker_class
worker_failure_event
life.events_on(date, :worker_failure
)
worker_failure_event = _
worker_failure_event = _.first
worker_failure_event && worker_failure_event.additional_attributes[:class] == worker_class
exit
print-accounting loan
print-accounting loan -b
exit!
print-acounting loan
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
@underwriting_decision.trial_participation.class
@underwriting_decision.trial_participation.methods
@underwriting_decision.trial_participation.methods.to_a
@underwriting_decision.trial_participation.to_a
@underwriting_decision.trial_participation.to_a.class
@underwriting_decision.trial_participation.class
exit!
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation.map(&:trial)
exit!
@underwriting_decision.trial_participation
exit!
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation *=2
@underwriting_decision.trial_participation
Participant.new
@underwriting_decision.trial_participation << _
@underwriting_decision.trial_participation
p = @underwriting_decision.trial_participation.first
p.id = 1095
p
@underwriting_decision.trial_participation << p
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation.reject! { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }
@underwriting_decision.trial_participation.reject { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation.uniq
@underwriting_decision.trial_participation.to_a
exit!
@underwriting_decision.trial_participation.to_a
p = @underwriting_decision.trial_participation.first
p = @underwriting_decision.trial_participation.first.dup
@underwriting_decision.trial_participation << p
@underwriting_decision.trial_participation
exit!
p = @underwriting_decision.trial_participation.first.dup
p.trail
p.trial
p.trial_id = 80
edit p.trial
edit p.cohort
p.cohort
Cohort.all
p.cohort_id = 1
@underwriting_decision.trial_participation << p
whereami
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation.reject { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }
@underwriting_decision.trial_participation
@underwriting_decision.trial_participation.reject! { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }
@underwriting_decision.trial_participation.reject { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }
@underwriting_decision.trial_participation.reject { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" && tp.delete }.class
@underwriting_decision.trial_participation.reject { |tp| tp.trial.trial_name != "netcredit_bank_partnership_selector" }
exit!
previous_loans
whereami
previous_loans
previous_loans.any? { |loan| loan.lender_owned?(disbursement_date) }
exit
previous_loans
print-accounting previous_loans.first
disbursement_date
whereami
previous_loans.any? { |loan| loan.lender_owned?(disbursement_date) }
previous_loans.any?
previous_loans.any? { |loan| loan.lender_owned?(disbursement_date) }
previous_loans.none? { |loan| loan.lender_owned?(disbursement_date) }
exit!
previous_loans
previous_loans.any? { |loan| !loan.lender_owned?(disbursement_date) }
exit!
print-accounting loan
most_recent_loan
Loan.where(account_id: loan.account_id).where('loan_id < ?', loan.loan_id)
Loan.where(account_id: loan.account_id).where('loan_id < ?', loan.loan_id).where(lender_id: loan.lender)
Loan.where(account_id: loan.account_id).where('loan_id < ?', loan.loan_id).where(lender_id: Lender[loan.lender].id)
exit!
disable-pry
loan
Loan.where(account_id: account_id).
where(lender_id: Lender[lender])
where(account_id: account_id).where(lender_id: Lender[lender])
whereami
exit!
most_recent_loan
Loan.where(account_id: account_id).where(lender_id: Lender[lender])
Loan.where(account_id: account_id).where(lender_id: Lender[lender]).where('loan_id < ?', loan_id)
Loan.where(account_id: loan.account_id).where(lender_id: Lender[loan.lender])
disable-pry
underwriter.send(:products)
edit underwriter.products
underwriter.send(:products)
exit!
@all_products
whereami
@all_products
@all_products[1]
p = _
whereami
rulebook_for(p)
RuleSet.all
RuleSet.find(1048)
RuleSet.find(1048).is_enabled
exit!
@all_products
wherami
rulebook_for(@all_products.first)
rulebook_for(@all_products.first).is_enabled
rulebook_for(@all_products.first).rule_sets
rulebook_for(@all_products.first).rule_sets.first
rulebook_for(@all_products.first).rule_sets.first.is_enabled
rulebook_for(@all_products.first).rule_sets.last.is_enabled
rulebook_for(@all_products.first).rule_sets.last
exit!
rulebook_for(@all_products.first).rule_sets.last
rulebook_for(@all_products.first).rule_sets.last.is_enabled
exit!
rulebook_for(@all_products.first).rule_sets.last.is_enabled
rulebook_for(@all_products.first)
rulebook_for(@all_products.last)
exit!
rulebook_for(@all_products.first)
rulebook_for(@all_products.last)
print-accounting loan
loan.payments.first
loan.payments.first.payment_purpose
loan.payments.first.payment_purpose.include?(:dis)
loan.payments.first.payment_purpose.to_s.include?(:dis
)
loan.payments.first.payment_purpose.to_s.include?('dis')
loan.payments.first.payment_purpose.to_s.include?('as')
payment.loan.payments.lender.
first
loan.payments.lender
loan.payments
loan.payments.non_lender
loan.payments.lender.where(amount: 4500)
loan.payments.non_lender.where(amount: 4500)
loan.payments.first.column_names
Payment.column_names
exit!
@purchase_payments.related_payments
@purchase_payment.related_payments
exit!
@purchase_payment.related_payments
@purchase_payment.associated_payments
exit!
@purchase_payment.associated_payments
exit!
@purchase_payment.associated_payments
@purchase_payment.associated_payments.all
@purchase_payment.associated_payments.to_a
exit!
@purchase_payment.associated_payments.to_a
exit!
@purchase_payment.associated_payments.to_a
exit!
@purchase_payment.associated_payments.to_a
exit!~
exit!
@purchase_payment.associated_payments.to_a
@purchase_payment.related_payments
@purchase_payment.related_payments = [@premium_expense_payment, @servicing_fee_payment, @discount_payment]]
@purchase_payment.related_payments = [@premium_expense_payment, @servicing_fee_payment, @discount_payment]
@purchase_payment.related_payments = [@premium_expense_payment, @servicing_fee_payment, @discount_payment].compact
@purchase_payment.related_payments
@purchase_payment.save!
AssociatedPayments.all
AssociatedPayment.all
@purchase_payment.related_payments
exit!
disable-pry
@purchase_payment.related_payments
exit!
@purchase_payment.related_payments
exit!
@purchase_payment.related_payments
@purchase_payment.payment_associations
@purchase_payment.payment_associations.create!(related_payment: @premium_expense_payment, payment_association_type: :loan_purchase)
@purchase_payment.payment_associations.create!(related_payment: @premium_expense_payment, payment_association_type: PaymentAssociationType[:loan_purchase])
@purchase_payment.payment_associations
@purchase_payment.related_payments
@purchase_payment.related_payments.reload
@purchase_payment.related_payments
@purchase_payment.related_payments.size
whereami
@purchase_payment.payment_associations.create!(related_payment: @premium_expense_payment)
exit!
@purchase_payment.payment_associations.create!(related_payment: @premium_expense_payment)
@purchase_payment.payment_associations.create!(related_payment: @premium_expense_payment, payment_association_type: PaymentAssociationType[:loan_purchase])
@purchase_payment.payment_associations.create!(related_payments: [@premium_expense_payment, @servicing_fee_payment], payment_association_type: PaymentAssociationType[:loan_purchase])
exit!
payment.payment_associations
expect(payment.payment_associations).to all(be_payment_association_type(:loan_purchase))
exit!
expect(payment.payment_associations).to all(be_payment_association_type(:loan_purchase))
exit!
expect(payment.payment_associations).to all(be_payment_association_type(:loan_purchase))
exit!
payment.related_payments
expect(payment.related_payments)
payment.related_payments.map(&:payment_purpose)
expect(payment.related_payments.map(&:payment_purpose)).to be_include(:premium_expense)
expect(payment.related_payments.map(&:payment_purpose)).to be_include(:premium_expense, :servicing_fee, :lender_discount)
expect(payment.related_payments.map(&:payment_purpose)).to be_eql([:premium_expense, :servicing_fee, :lender_discount])
exit!
print-accounting loan
loan.payments.where(amount: '4564.65')
loan.payments.non_lender.where(amount: '4564.65')
loan.payments.non_lender.where(amount: '4564.65').related_payments
loan.payments.non_lender.where(amount: '4564.65').first.related_payments
loan.payments.non_lender.where(amount: '4564.65').first.related_payments.map(&:payment_purpose)
loan.payments.non_lender.where(amount: '4564.65').first.related_payments.with_purpose(:lender_settlement).map(&:payment_purpose)
loan.payments.non_lender.where(amount: '4564.65').first.related_payments.with_payment_association_type(:lender_settlement).map(&:payment_purpose)
loan.payments.non_lender.where(amount: '4564.65').first.associated_payments.with_payment_association_type(:lender_settlement).map(&:payment_purpose)
loan.payments.non_lender.where(amount: '4564.65').first.payment_associations.with_payment_association_type(:lender_settlement).map(&:payment_purpose)
loan.payments.non_lender.where(amount: '4564.65').first.payment_associations.with_payment_association_type(:lender_settlement)
full_payment = loan.payments.non_lender.where(amount: '4564.65').first
expect(full_payment.payment_associations.with_payment_association_type(:lender_settlement).size).to eq 2
exit!
scheduled_payments_scope(loan)
contractual
payment
realized_payments_scope
realized_payments_scope(loan)
exit!
print-accounting loan
exit!
print-accounting loan
exit!
print-accounting loan
exit!
payment
payment.is_cancellable?
exit!
print-accounting loan
exit!
payment.payment_purpose.to_s.include?('collection')
exit!
related_payments
payment.payment_associations
payment.payment_associations.with_payment_association_type(:lender_settlement)
PaymentAssociationType.find(2)
payment.payment_associations.with_payment_association_type('lender_settlement')
exit!
related_payments
whereami
related_payments
payment.payment_status
payment.cancellable_via_pgs?
payment.payment_gateway
payment.gateway_uri
exit!
related_payments
payment.payment_associations.with_payment_association_type(:lender_settlement)
payment.payment_associations
exit!
payment.payment_associations
payment
payment.payment_associations.with_payment_association_type(:lender_settlement)
exit!
payment.payment_associations.with_payment_association_type(:lender_settlement)
related_payments
whereami
payment.payment_associations.includes(:related_payments)
payment.payment_associations.includes(:related_payments).to_a
payment.payment_associations.includes(:related_payment).to_a
payment.payment_associations.includes(:related_payment).to_sql
payment.payment_associations.includes(:related_payment).related_payments
payment.payment_associations.includes(:related_payment).map(&:related_payments)
payment.payment_associations.includes(:related_payment).map(&:related_payment)
exit!
payment.payment_associations
expect(payment.payment_associations.size).to eq 1
payment.payment_associations.map(&:payment_association_type)
expect(payment.payment_associations.map(&:payment_association_type)).to eq [:roll_up]
expect(payment.related_payments).to include(fee_payment)
exit!
reverse_payment
Payment.all
Payment.all.size
Payment.connection
Payment.all(&:persisted?)
Payment.any?(&:persisted?)
Payment.all?(&:persisted?)
Payment.none?(&:persisted?)
Payment.none(&:persisted?)
Payment.connection
whereami
Payment.first
Payment.first.save!
self
ls
@loaded_fixtures
exit!
create(:payment)
FactoryGirl.build (:payment)
exit!
create
FactoryGirl.build (:payment)
FactoryGirl
Factorygirl
FactoryGirl
include FactoryGirl::Syntax::Methods
include FactoryGirl
Payment.new
Payment.new.save
Payment.new.save!
Payment.new.save!(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000)
Payment.new(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000).save!
loan = Loan.new()
loan.save!
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1)
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1).save!
loan_application = LoanApplcation.new
loan_application = LoanApplication.new
loan_application = LoanApplication.new.save!
loan_application = LoanApplication.new(account_id: 1)
loan_application = LoanApplication.new(account_id: 1).save!
LoanApplicationStatus.all
loan_application = LoanApplication.new(account_id: 1, loan_application_status: :approved).save!
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1, loan_application_id: 1).save!
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1, loan_application: 1).save!
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1).save!
loan.loan_application = loan_application
loan.loan_agreement = 1
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1, loan_agreement: 1).save!
loan = Loan.new(product: 'netcredit', region: 'IL', account_id: 1, loan_agreement_id: 1).save!
loan = Loan.first
Payment.new(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000).save!
Payment.new(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000, is_outgoing: true).save!
1000.times { Payment.new(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000, is_outgoing: true).save! }
whereami
Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement')
Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement').size
scope = Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement')
scope
scope.sort
payment = scope.first
scope.where(to_account: payment.to_account, from_account: payment.from_account,
is_outgoing: payment.is_outgoing?)
all = scope.where(to_account: payment.to_account, from_account: payment.from_account,
is_outgoing: payment.is_outgoing?)
all.size
related = all.where.not(payment_id: id)
related = all.where.not(payment_id: payment.id)
related.size
amount  = RollUpPayments.call(payment, related)
amount
Payment.where(rolled_into_payment_id: nil)
Payment.first.destroy
Payment.where(rolled_into_payment_id: nil)
Payment.where(rolled_into_payment_id: 3)
Payment.where(rolled_into_payment_id: 3).size
100000.times { Payment.new(repayment_method: :ach, effective_date: Date.today, loan_id: 1, payment_purpose: :lender_settlement, amount: 1000, is_outgoing: true).save! }
Payment.where(rolled_into_payment_id: 3).size
Payment.find(50000)
payment = Payment.find(50000)
scope = Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement')
scope = Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement').size
Payment.size
Payment.all.size
Payment.pending.size
Payment.without_status(:pending)
Payment.without_status(:pending).size
Payment.with_status(:pending).size
scope
scope = Payment.pending.without_repayment_method('manual').with_purpose('lender_settlement')
scope
all         = scope.where(to_account: payment.to_account, from_account: payment.from_account,
is_outgoing: payment.is_outgoing?)
related     = all.where.not(payment_id: payment.id)
payment
RollUpPayments.call(payment, related)
payment.payment_associations
payment.related_payments
payment = Payment.find(50000)
payment.related_payments
payment.related_payments.size
payment.payment_associations.with_payment_association_type(:roll_up)
payment.payment_associations.with_payment_association_type(:roll_up).size
payment.rolled_up_payments.size
PaymentAssocationType
exit!
print-accounting loan
print-accounting loan -b
4564.65 + 21.55
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
exit!
print-accounting loan
print-accounting loan -b
exit!
print-accounting loan
print-accounting loan -b
exit
print-accounting loan
print-accounting loan -b
print-accounting loan
whereami
print-accounting loan
exit!
print-accounting loan
whereami
exit!
loan.is_purchased?
whereami
print-accounting loan
loan.lender_owned?(loan.today)
exit!
whereami
print-accounting loan
whereami
exit!
print-accounting loan
whereami
should_cancel_marketing_fee_recognition?
print-accounting loan
whereami
print-accounting loan
exit!
total_discount
whereami
print-accounting loan
print-accounting 
whereami
lender_discount_paid
print-accounting loan
exit!
payments.non_failures.with_purpose(:interest_refund).sum(:amount)
print-accounting loa
print-accounting
payments.non_failures.with_purpose(:interest_refund).sum(:amount)
payments
payments.last.payment_purpose
payments.last.payment_purpose.cancelled?
payments.last.cancelled?
print-accounting 
exit!
print-accounting
whereami
payments.non_failures.with_purpose(:interest_refund).sum(:amount)
interest_to_refund
payments.non_failures.with_purpose(:interest_refund).sum(:amount)
payments.non_failures
payments.non_failures.sort
payments.non_failures.find(499)
payments.non_failures.find(499).payment_purpose
exit!
print-accounting loan
print-accounting loan -b
payment
payment.brand
payment.brand?
exit!
brand
payment.loan
payment.loan.product
payment.brand
payment.rolled_up_payments
payment.rolled_up_payments.first.brand
exit!
brand
disable-pry
brand
payment.rolled_up_payments
payment.rolled_up_payments.product
payment.rolled_up_payments.first.product
payment.rolled_up_payments.first
payment.rolled_up_payments.first.brand
payment.rolled_up_payments.first.loan
payment.rolled_up_payments.first.loan.product
exit!
loan
loan.product
exit!
brand
loan.time_zone.now
whereami
cutoff
disable-pry
Time.now
evening_of(date)
exit!
Time.now
loan
loan.time_zone
loan.time_zone.now
exit!
loan.time_zone.now
Time.now
loan
Time.now
exit!
Time.now
loan.time_zone
Time.time_zone
Time.zone
Time.zone.now
Time.now
whereami
Time.zone.now
exit!
Time.zone.now
loan
loan.time_zone
loan.time_zone.now
loan
loan.time_zone.now
loan
whereami
exit!
loan.funding_payment
exit!
